{"version":3,"sources":["p2p.js","utils.js","cards.js","assert.js","logic.js","Chat.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["RTC_CONFIG","iceServers","urls","haveGum","navigator","mediaDevices","getUserMedia","video","audio","catch","console","log","onOpen","conn","messageHandlers","data","type","value","indx","onMessage","e","JSON","parse","addMessageHandler","handler","messageHandlersIndx","parseInt","removeMessageHandler","key","send","json","dc","stringify","encodeKey","btoa","replace","decodeKey","str","length","slice","atob","shuffle","array","rng","temporaryValue","randomIndex","currentIndex","Math","floor","RANK","RANKS","SUITS","shuffledDeck","utils","deck","suit_index","suit","rank_index","rank","push","orderedDeck","serializeCard","card","firstChar","charCodeAt","secondChar","String","fromCharCode","serializeDeck","deckstr","assert","condition","error_m","error","PHASE","SETUP","PLAY","GAMEOVER","ABORT","SETUP_STATE","Object","values","PRE_READY","SENT_READY","SENT_START","METHOD","READY","START","PLAYACK","METHODS","METHOD_HANDLER","game","m","phase","abort","state","user","from","hash","players","includes","readyHashes","maybeSendStart","update","unimplemented","addListener","listener","listenerIndex","listeners","removeListener","userId","a","randomNumber","keys","startNumbers","randomNumberHash","maybeStartGame","reason","method","message","encoder","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","Uint8Array","hashHex","map","b","toString","padStart","join","myRandom","random","hash_r","finalRandomNumber","forEach","seedrandom","sort","nextTurn","playedCards","playerHands","users","cards","index","startGame","sendStart","getMyUserId","getOppUserId","filter","x","getMyHand","getOppHand","Chat","props","useState","chatMessage","setChatMessage","messages","setMessages","onSendMessage","connRef","current","newMessage","oldm","useEffect","p2p","onChange","target","onKeyUp","onClick","style","whiteSpace","Setup","Play","gameRef","setPlayedCards","logic","myHand","setMyHand","oppHand","setOppHand","myUserId","setMyUserId","oppUserId","setOppUserId","updateGameState","useCallback","Hand","PlayedCards","Deck","fontSize","Game","setPhase","Create1","setOffer","setMyOffer","pc","signalingState","createDataChannel","onopen","onmessage","then","createOffer","d","setLocalDescription","onicecandidate","candidate","localDescription","Create2","joinKey","setJoinKey","offer","answerDesc","RTCSessionDescription","setRemoteDescription","Join1","setAnswer","offerDesc","createAnswer","setMyAnswer","Join2","answer","Welcome","Lobby","myOffer","myAnswer","Fragment","methods","handlers","App","inSetup","setInSetup","useRef","RTCPeerConnection","ondatachannel","channel","oniceconnectionstatechange","iceConnectionState","substr","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d36e050.chunk.js","sourcesContent":["const RTC_CONFIG = {\n  iceServers: [\n    { urls: [\"stun:stun.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"] },\n  ],\n};\n\nvar haveGum = navigator.mediaDevices\n  .getUserMedia({ video: true, audio: true })\n  .catch(console.log);\n\nexport function createConn() {\n  let conn = {\n    pc: new RTCPeerConnection(RTC_CONFIG),\n    dc: null,\n    messageHandlers: {},\n    messageHandlersIndx: \"0\",\n  };\n  conn.pc.ondatachannel = (e) => {\n    conn.dc = e.channel;\n    conn.dc.onopen = () => onOpen(conn);\n    conn.dc.onmessage = (e) => onMessage(conn, e);\n  };\n  conn.pc.oniceconnectionstatechange = (e) =>\n    console.log(conn.pc.iceConnectionState);\n  return conn;\n}\n\nfunction onOpen(conn) {\n  console.log(\"opened chat!!\");\n  console.log(conn.messageHandlers);\n  const data = { type: \"info\", value: \"successfully opened connection!!\" };\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nfunction onMessage(conn, e) {\n  console.log(\"received message!\");\n  console.log(conn.messageHandlers);\n  let data = JSON.parse(e.data);\n  console.log(data);\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nexport function addMessageHandler(conn, handler) {\n  const indx = conn.messageHandlersIndx;\n  conn.messageHandlers[indx] = handler;\n  conn.messageHandlersIndx = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeMessageHandler(conn, key) {\n  console.log(`removing key ${key} from conn ${conn}`);\n  delete conn.messageHandlers[key];\n}\n\nexport function sendMessage(conn, message) {\n  send(conn, { type: \"message\", message: message });\n}\nexport function sendData(conn, data) {\n  send(conn, { type: \"data\", ...data });\n}\nexport function send(conn, json) {\n  conn.dc.send(JSON.stringify(json));\n}\n\nexport function createOffer(conn, setOffer) {\n  console.log(\"create offer\");\n  console.log(conn.pc.signalingState);\n  conn.dc = conn.pc.createDataChannel(\"chat\");\n\n  conn.dc.onopen = () => onOpen(conn);\n  conn.dc.onmessage = (e) => onMessage(conn, e);\n\n  haveGum\n    .then(() => conn.pc.createOffer())\n    // conn.pc\n    //   .createOffer()\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setOffer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nfunction encodeKey(json) {\n  return btoa(json).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction decodeKey(key) {\n  let str = key;\n  if (str.length % 4 !== 0) {\n    str += \"===\".slice(0, 4 - (str.length % 4));\n  }\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return atob(str);\n}\n\nexport function join(conn, joinKey, setAnswer) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  let offerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n\n  conn.pc\n    .setRemoteDescription(offerDesc)\n    .then(() => conn.pc.createAnswer())\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setAnswer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nexport function acceptAnswer(conn, joinKey) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  var answerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n  conn.pc.setRemoteDescription(answerDesc).catch(console.log);\n}\n\nexport function numConnections(conn) {\n  // TODO: update this for many players\n  return 1;\n}\n","export function shuffle(array, rng) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import * as utils from \"./utils.js\";\n\nexport const RANK = {\n  ACE: \"A\",\n  TWO: \"2\",\n  THREE: \"3\",\n  FOUR: \"4\",\n  FIVE: \"5\",\n  SIX: \"6\",\n  SEVEN: \"7\",\n  EIGHT: \"8\",\n  NINE: \"9\",\n  TEN: \"10\",\n  JACK: \"J\",\n  QUEEN: \"Q\",\n  KING: \"K\",\n};\nexport const RANKS = [\n  RANK.ACE,\n  RANK.TWO,\n  RANK.THREE,\n  RANK.FOUR,\n  RANK.FIVE,\n  RANK.SIX,\n  RANK.SEVEN,\n  RANK.EIGHT,\n  RANK.NINE,\n  RANK.TEN,\n  RANK.JACK,\n  RANK.QUEEN,\n  RANK.KING,\n]; // dont do Object.values because we want to guarantee order\nexport const SUIT = {\n  SPADES: \"spades\",\n  HEARTS: \"hearts\",\n  DIAMONDS: \"diamonds\",\n  CLUBS: \"clubs\",\n};\nexport const SUITS = [SUIT.SPADES, SUIT.HEARTS, SUIT.DIAMONDS, SUIT.CLUBS]; // dont do Object.values because we want to guarantee order\n\n//      card is represented by {rank:, suit:} (why no types :(((()))))\n\nexport function orderedDeck() {\n  let deck = [];\n  let suit_index = 0;\n  for (const suit of SUITS) {\n    let rank_index = 0;\n    for (const rank of RANKS) {\n      deck.push({ rank, suit, rank_index, suit_index });\n      rank_index++;\n    }\n    suit_index++;\n  }\n  return deck;\n}\n\nexport function shuffledDeck(rng) {\n  let deck = orderedDeck();\n  return utils.shuffle(deck, rng);\n}\n\n// users: list of IDs for each user who wants a card\n// return: an object {user_id -> array of cards}, as even as possible, union is all cards, disjoint\nexport function dealShuffledCards(users, rng) {\n  let deck = shuffledDeck(rng);\n  let cards = {};\n  let index = 0;\n  for (const user of users) {\n    cards[user] = [];\n  }\n  while (index < deck.length) {\n    for (const user of users) {\n      cards[user].push(deck[index]);\n      index++;\n    }\n  }\n  return cards;\n}\n\nexport function serializeCard(card) {\n  const aceOfSpades = \"🂡\";\n  const firstChar = aceOfSpades.charCodeAt(0);\n  const secondChar = aceOfSpades.charCodeAt(1);\n  return (\n    String.fromCharCode(firstChar) +\n    String.fromCharCode(\n      secondChar +\n        card.rank_index +\n        card.suit_index * 16 +\n        (card.rank === RANK.QUEEN || card.rank === RANK.KING ? 1 : 0)\n    )\n  );\n}\n\nexport function serializeDeck(deck) {\n  let deckstr = \"\";\n  for (const card of deck) {\n    deckstr += serializeCard(card);\n  }\n  return deckstr;\n}\n","export default function assert(condition, error_m) {\n  if (condition) return;\n  console.error(\"assertion failed\");\n  console.error(error_m);\n}\n","// logic.js is intended to hold all game logic\n\nimport seedrandom from \"seedrandom\";\n\nimport * as p2p from \"./p2p.js\";\nimport * as utils from \"./utils.js\";\nimport * as cards from \"./cards.js\";\n\nimport assert from \"./assert.js\";\n\n// what's the game state?\n// there's a public part and a private part\n// the public part needs to be agreed upon among all players\n// the private part is\n//\n// PUBLIC:\n// for version 1:\n// 1: the middle deck, which has order\n// 2: each player's hand, which does not have order\n//      invariant: all disjoint, union is all cards\n//\n// for version 2:\n// 3: all the rule hashes\n// 4:\n//\n// PRIVATE:\n// for version 2:\n// 1: your own rules (which is in the form of uhhhh)\n//\n//\n//\n// TODO: later version: add signatures to actually be secure\n\n// WIRE PROTOCOL:\n// always assume broadcast messages!!!!!!\n// 1. setup:\n//  1.1 everyone: READY hashOfRandomNumber userID (number is a 64-bit integers, user id is randomly generated (later should be public key))\n//  1.2 when everyone you have open connections with say READY: START randomNumber  (userID is sent with every message)\n//  1.3 when received all STARTs: verifies all hashes, xors all numbers, seed rng with this, then just pick cards\n//  1.4 using same seed just choose order\n// 2. play:\n//  2.1 someone: PLAY card userID publicGameStateAfter\n//  2.2 everyone else: PLAYACK card fromUser userID publicGameStateAfter\n// 3. abort:\n//  3.1 send ABORT userID to every user, be sad\n\n// ok dont overthink it\n// i think having a hierarchical state thing makes sense\n// this is javascript not rust\n\n// ok so we have:\n// phase = {\"setup\", \"play\", \"gameover\", \"abort\"}\n// each phase has some metadata, which can be public or private\n// the public metadata is always sent over for debugging purposes\n\n// transitions\n// setup:\n//      state = {\"preReady\",\"sentReady\",\"sentStart\"},\n//      players, readyHashes, startNumbers, myRandom\n//\n// play:\n//      nextTurn = user_id\n//      public: players (order matters), playedCards (0 bottom, n-1 top), playerHands (id -> array)\n//          invariant: union is good, disjoint\n//\n// gameover: (transitions directly to setup.sentReady)\n//      winner = user_id\n//\n// abort:\n//      (no data)\n\nexport const PHASE = {\n  SETUP: \"SETUP\",\n  PLAY: \"PLAY\",\n  GAMEOVER: \"GAMEOVER\",\n  ABORT: \"ABORT\",\n};\nconst PHASES = Object.values(PHASE);\nconst SETUP_STATE = {\n  PRE_READY: \"PRE_READY\",\n  SENT_READY: \"SENT_READY\",\n  SENT_START: \"SENT_START\",\n};\nconst SETUP_STATES = Object.values(SETUP_STATE);\n\nconst METHOD = {\n  READY: \"READY\",\n  START: \"START\",\n  PLAY: \"PLAY\",\n  PLAYACK: \"PLAYACK\",\n  ABORT: \"ABORT\",\n};\nconst METHODS = Object.values(METHOD);\nconst METHOD_HANDLER = {\n  [METHOD.READY]: handleReadyMethod,\n  [METHOD.START]: handleStartMethod,\n  [METHOD.PLAY]: handlePlayMethod,\n  [METHOD.PLAYACK]: handlePlayAckMethod,\n  [METHOD.ABORT]: handleAbortMethod,\n};\nassert(\n  JSON.stringify(METHODS) === JSON.stringify(Object.keys(METHOD_HANDLER)),\n  {\n    methods: METHODS,\n    handlers: METHOD_HANDLER,\n  }\n);\n\nexport function createGame(conn) {\n  // TODO: generate private/public keypair here and let userId be the public key\n  const userId = Math.random().toString(36).substr(2, 9);\n  const game = {\n    conn,\n    listeners: {},\n    listenerIndex: \"0\",\n    phase: PHASE.SETUP,\n    userId: userId,\n    state: SETUP_STATE.PRE_READY,\n    players: [userId],\n    readyHashes: {},\n    startNumbers: {},\n    myRandom: null,\n  };\n  return game;\n}\nexport function addListener(game, listener) {\n  const indx = game.listenerIndex;\n  game.listeners[indx] = listener;\n  game.listenerIndex = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeListener(game, key) {\n  console.log(`removing key ${key} from game ${game}`);\n  delete game.listener[key];\n}\n// this function needs to be called every time the game state is updated!!!!!!!!\nfunction update(game) {\n  for (let listener of Object.values(game.listeners)) {\n    listener();\n  }\n}\n\n// m should be on form {data: , method: , ...}\nexport function receive(game, m) {\n  console.log(\"game receiving message!\");\n  console.log(m);\n  if (m.type !== \"data\") {\n    console.log(\"ignoring non-data message\");\n    return;\n  }\n  assert(METHODS.includes(m.method));\n  console.log(METHOD_HANDLER);\n  METHOD_HANDLER[m.method](game, m);\n}\nfunction send(game, m) {\n  // TODO: sign the message\n  m[\"from\"] = game.userId;\n  p2p.sendData(game.conn, m);\n}\n\nfunction unimplemented() {\n  assert(false, \"not implemented yet!!\");\n}\n\nfunction handleReadyMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) abort(game);\n  // should not have sent start already\n  if (\n    !(\n      game.state === SETUP_STATE.PRE_READY ||\n      game.state === SETUP_STATE.SENT_READY\n    )\n  ) {\n    abort(game);\n  }\n\n  const user = m.from;\n  const hash = m.hash;\n\n  // shouldn't receive twice; should have different IDs\n  if (game.players.includes(user)) abort(game);\n\n  game.players.push(user);\n  game.readyHashes[user] = hash;\n\n  // if we have received all, send start\n  maybeSendStart(game);\n\n  update(game);\n}\nasync function handleStartMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) abort(game, \"wrong phase\");\n  // should have sent ready (not necessarily should have sent start though)\n  if (\n    !(\n      game.state === SETUP_STATE.SENT_READY ||\n      game.state === SETUP_STATE.SENT_START\n    )\n  ) {\n    abort(game);\n  }\n\n  const user = m.from;\n  const randomNumber = m.randomNumber;\n\n  // shouldn't receive twice\n  if (Object.keys(game.startNumbers).includes(user)) abort(game);\n\n  // should receive from verified user\n  if (!game.players.includes(user)) abort(game, `unknown user ${user}`);\n\n  // assert that the hash is ok\n  const randomNumberHash = await hash(`${randomNumber}`);\n  if (game.readyHashes[user] !== randomNumberHash)\n    abort(\n      game,\n      `incorrect hash ${randomNumberHash} received for random number ${randomNumber} from user ${user}`\n    );\n\n  // add to numbers\n  game.startNumbers[user] = randomNumber;\n\n  // if we have received all, go to the game!!\n  maybeStartGame(game);\n\n  update(game);\n}\nfunction handlePlayMethod(game, m) {\n  unimplemented();\n\n  update(game);\n}\nfunction handlePlayAckMethod(game, m) {\n  unimplemented();\n\n  update(game);\n}\nfunction handleAbortMethod(game, m) {\n  console.log(\"ABORTING :(((( SAD\");\n  unimplemented();\n\n  update(game);\n}\n\nfunction abort(game, reason) {\n  console.error(\"ABORT GAME :((\");\n  console.error(reason);\n  send(game, { method: METHOD.ABORT, reason });\n  game.phase = PHASE.ABORT;\n\n  update(game);\n}\n\nasync function hash(message) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n\nexport async function sendReady(game) {\n  assert(\n    (game.phase === PHASE.SETUP && game.state === SETUP_STATE.PRE_READY) ||\n      game.phase === PHASE.GAMEOVER,\n    game\n  );\n  // generate a random number\n  game.myRandom = Math.floor(Math.random() * 2 ** 64);\n  // hash the random number\n  const hash_r = await hash(`${game.myRandom}`);\n  console.log(hash_r);\n  game.readyHashes[game.userId] = hash_r;\n  send(game, { method: METHOD.READY, hash: hash_r });\n  game.state = SETUP_STATE.SENT_READY;\n  maybeSendStart(game);\n\n  update(game);\n}\n\nfunction maybeStartGame(game) {\n  if (game.players.length === Object.keys(game.startNumbers).length) {\n    startGame(game);\n  }\n}\nfunction startGame(game) {\n  assert(\n    game.phase === PHASE.SETUP && game.state === SETUP_STATE.SENT_START,\n    game\n  );\n\n  // xor all the random numbers (which means that as long as at least 1 person honest, it is random)\n  let finalRandomNumber = 0;\n  Object.values(game.startNumbers).forEach((randomNumber) => {\n    finalRandomNumber ^= randomNumber;\n  });\n\n  console.log(`final randomness: ${finalRandomNumber}`);\n  // use this random number as the seed of an rng\n  let rng = seedrandom(`${finalRandomNumber}`);\n\n  // now we can transition to the game phase\n  // delete the old game object properties\n  delete game.state;\n  delete game.readyHashes;\n  delete game.startNumbers;\n  delete game.myRandom;\n\n  // shuffle the player list\n  // note: we need to sort it first before we do it so everyone gets the same list\n  game.players = utils.shuffle(game.players.sort(), rng);\n\n  game.nextTurn = game.players[0];\n\n  game.playedCards = []; // start empty\n\n  // now deal cards\n  game.playerHands = cards.dealShuffledCards(\n    utils.shuffle(game.players, rng),\n    rng\n  );\n\n  // now we're done :))))))\n  game.phase = PHASE.PLAY;\n\n  console.log(\"STARTING GAME!!!! exciting :)))\");\n  console.log(game);\n\n  update(game);\n}\n\nfunction maybeSendStart(game) {\n  if (\n    p2p.numConnections(game.conn) ===\n    Object.keys(game.readyHashes).length - 1\n  ) {\n    assert(game.players.length === Object.keys(game.readyHashes).length, game);\n    sendStart(game);\n  }\n}\nfunction sendStart(game) {\n  assert(\n    game.phase === PHASE.SETUP && game.state === SETUP_STATE.SENT_READY,\n    game\n  );\n\n  send(game, { method: METHOD.START, randomNumber: game.myRandom });\n\n  game.startNumbers[game.userId] = game.myRandom;\n  game.state = SETUP_STATE.SENT_START;\n\n  maybeStartGame(game);\n\n  update(game);\n}\n\n// convenience for 2 players\n// TODO: update this for more players\n\nexport function getMyUserId(game) {\n  return game.userId;\n}\nexport function getOppUserId(game) {\n  return game.players.filter((x) => x !== getMyUserId(game))[0];\n}\nexport function getMyHand(game) {\n  return game.playerHands[getMyUserId(game)];\n}\nexport function getOppHand(game) {\n  return game.playerHands[getOppUserId(game)];\n}\n","import React from \"react\";\nimport { useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\n\nexport function Chat(props) {\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  function onSendMessage() {\n    p2p.sendMessage(props.connRef.current, chatMessage);\n    newMessage(chatMessage);\n    setChatMessage(\"\");\n  }\n\n  function newMessage(m) {\n    setMessages((oldm) => {\n      if (oldm === \"\") return m;\n      return m + \"\\n\" + oldm;\n    });\n  }\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(props.connRef.current, (m) => {\n      if (m.type === \"message\") return newMessage(m.message);\n      newMessage(JSON.stringify(m));\n    });\n    return () => {\n      console.log(`cleaning up chat!!! index ${indx}`);\n      p2p.removeMessageHandler(props.connRef.current, indx);\n    };\n  }, [props.connRef]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={chatMessage}\n        onChange={(e) => setChatMessage(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onSendMessage() : 0)}\n      ></input>\n      <button onClick={onSendMessage}>Send message</button>\n      <p style={{ whiteSpace: \"pre-line\" }}>{messages}</p>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\nimport * as cards from \"./cards.js\";\n\nimport { Chat } from \"./Chat.js\";\n\nfunction Setup() {\n  return <div>Waiting for everyone else to press start...</div>;\n}\n\nfunction Play(props) {\n  const [playedCards, setPlayedCards] = useState(\n    props.gameRef.current.playedCards\n  );\n  const [myHand, setMyHand] = useState(logic.getMyHand(props.gameRef.current));\n  const [oppHand, setOppHand] = useState(\n    logic.getOppHand(props.gameRef.current)\n  );\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n  const [oppUserId, setOppUserId] = useState(\n    logic.getOppUserId(props.gameRef.current)\n  );\n\n  const updateGameState = useCallback(() => {\n    setPlayedCards(props.gameRef.current.playedCards);\n    setMyHand(logic.getMyHand(props.gameRef.current));\n    setOppHand(logic.getOppHand(props.gameRef.current));\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n    setOppUserId(logic.getOppUserId(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      Playing the game!!!\n      <hr />\n      <Hand cards={oppHand} user={oppUserId} />\n      <PlayedCards cards={playedCards} />\n      <Hand cards={myHand} user={myUserId} />\n    </div>\n  );\n}\n\nfunction PlayedCards(props) {\n  return (\n    <div>\n      played cards: <Deck cards={props.cards} />\n    </div>\n  );\n}\n\nfunction Hand(props) {\n  return (\n    <div>\n      {props.user}'s cards:\n      <Deck cards={props.cards} />\n    </div>\n  );\n}\n\nfunction Deck(props) {\n  if (props.cards.length === 0) {\n    return <div>(none)</div>;\n  }\n  return (\n    <div style={{ fontSize: \"3em\" }}>{cards.serializeDeck(props.cards)}</div>\n  );\n}\n\nexport function Game(props) {\n  const [phase, setPhase] = useState(props.gameRef.current.phase);\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n\n  const updateGameState = useCallback(() => {\n    setPhase(props.gameRef.current.phase);\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      welcome to the game, {myUserId}!\n      <hr />\n      {phase === logic.PHASE.SETUP && <Setup />}\n      {phase === logic.PHASE.PLAY && <Play gameRef={props.gameRef} />}\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\n\nimport { Game } from \"./Game.js\";\nimport { Chat } from \"./Chat.js\";\n\nfunction Create1(props) {\n  return (\n    <div>\n      <button\n        onClick={() => p2p.createOffer(props.connRef.current, props.setMyOffer)}\n      >\n        Create game\n      </button>\n    </div>\n  );\n}\n\nfunction Create2(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      send this message to your friends: <code>{props.offer}</code>\n      <br />\n      input their answer:\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button onClick={() => p2p.acceptAnswer(props.connRef.current, joinKey)}>\n        Add player\n      </button>\n    </div>\n  );\n}\n\nfunction Join1(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button\n        onClick={() =>\n          p2p.join(props.connRef.current, joinKey, props.setMyAnswer)\n        }\n      >\n        Join\n      </button>\n    </div>\n  );\n}\n\nfunction Join2(props) {\n  return (\n    <div>\n      send this message to your friends: <code>{props.answer}</code>\n      <br />\n    </div>\n  );\n}\n\nfunction Welcome(props) {\n  console.log(props.connRef);\n  return (\n    <div>\n      <Create1 connRef={props.connRef} setMyOffer={props.setMyOffer} />\n      <br />\n      <Join1 connRef={props.connRef} setMyAnswer={props.setMyAnswer} />\n      <br />\n    </div>\n  );\n}\n\nfunction Lobby(props) {\n  return (\n    <div>\n      {props.offer ? (\n        <Create2 connRef={props.connRef} offer={props.offer} />\n      ) : (\n        <Join2 connRef={props.connRef} answer={props.answer} />\n      )}\n      <hr />\n      Participants list: idk\n      <br />\n      <hr />\n      <button onClick={props.startGame}>Start game!</button>\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n\nfunction Setup(props) {\n  const [myOffer, setMyOffer] = useState(null);\n  const [myAnswer, setMyAnswer] = useState(null);\n\n  if (myOffer || myAnswer) {\n    return (\n      <Lobby\n        connRef={props.connRef}\n        offer={myOffer}\n        answer={myAnswer}\n        startGame={props.startGame}\n      />\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <Welcome\n          connRef={props.connRef}\n          setMyOffer={setMyOffer}\n          setMyAnswer={setMyAnswer}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction App() {\n  const [inSetup, setInSetup] = useState(true);\n  const connRef = useRef();\n  const gameRef = useRef();\n\n  const startGame = useCallback(() => {\n    setInSetup(false);\n    logic.sendReady(gameRef.current);\n  }, [gameRef]);\n\n  useEffect(() => {\n    connRef.current = p2p.createConn();\n    gameRef.current = logic.createGame(connRef.current);\n  }, []);\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(connRef.current, (m) =>\n      logic.receive(gameRef.current, m)\n    );\n    return () => {\n      p2p.removeMessageHandler(connRef.current, indx);\n    };\n  }, [connRef, gameRef]);\n\n  return (\n    <div className=\"App\">\n      {inSetup && <Setup connRef={connRef} startGame={startGame} />}\n      {!inSetup && <Game connRef={connRef} gameRef={gameRef} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}