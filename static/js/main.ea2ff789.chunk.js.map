{"version":3,"sources":["p2p.js","assert.js","utils.js","cards.js","config.js","rules.js","logic.js","Chat.js","Game.js","App.js","reportWebVitals.js","mimc.ts","index.js"],"names":["RTC_CONFIG","iceServers","urls","onOpen","conn","console","log","messageHandlers","data","type","value","indx","onMessage","e","JSON","parse","addMessageHandler","handler","messageHandlersIndx","parseInt","removeMessageHandler","key","send","json","dc","stringify","encodeKey","btoa","replace","decodeKey","str","length","slice","atob","assert","condition","error_m","error","shuffle","array","rng","temporaryValue","randomIndex","currentIndex","Math","floor","unimplemented","hash","message","a","encoder","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","RANK","RANKS","SUITS","VOID_CARD","shuffledDeck","startFromRankIndex","utils","deck","suit_index","index","suit","rank_index","rank","push","orderedDeck","serializeCard","card","firstChar","charCodeAt","secondChar","String","fromCharCode","serializeCardASCII","charAt","toUpperCase","serializeDeck","deckstr","sameCard","c1","c2","EVERYONE","createPrivateRule","name","source","owner","rule","compiled","compileSource","hashCompiledSource","publicRule","sameRule","r1","r2","determinePenalties","playedCards","selectedRules","myRules","proof","penalty","INCORRECT_PENALTIES","verifyPenalties","provedRules","violatedRules","PHASE","SETUP","PLAY","GAMEOVER","ABORT","PHASES","Object","values","SETUP_STATE","PRE_READY","SENT_READY","SENT_START","PLAY_STATE","WAIT_FOR_PLAY","WAIT_FOR_PLAYACK","METHOD","READY","START","PLAYACK","METHODS","METHOD_HANDLER","game","m","phase","abort","state","user","players","includes","readyHashes","maybeSendStart","update","rules","nextTurn","cards","playerHands","some","c","legalToPlayCard","userRulesHashes","allRules","filter","r","provedRulesHashes","sort","penalties","recordPenalties","actuallyPlayCard","method","acksReceived","userId","maybeStopWaitingForAcks","sendPlayAck","lastPlayedUser","lastPlayedCard","lastSelectedRules","createGame","listeners","listenerIndex","random","substr","initPhase","then","setUpPublicRules","resetPhase","args","startNumbers","myRandom","users","penaltyRules","addListener","listener","removeListener","randomNumber","keys","randomNumberHash","maybeStartGame","reason","lastCard","playCard","isMyTurn","every","x","sendReady","hash_r","i","bottomCard","splice","enforcePenalties","l","winner","checkIfWon","finalRandomNumber","forEach","seedrandom","startGame","sendStart","getMyUserId","getOppUserId","oppUserId","getMyHand","getOppHand","playerHand","isMyTurnEnabled","getPlayedCards","getRules","methods","handlers","Chat","props","useState","chatMessage","setChatMessage","messages","setMessages","onSendMessage","connRef","current","newMessage","oldm","useEffect","p2p","onChange","target","onKeyUp","onClick","style","whiteSpace","Setup","Play","logic","gameRef","setPlayedCards","myHand","setMyHand","oppHand","setOppHand","myUserId","setMyUserId","setOppUserId","selectedCard","setSelectedCard","myTurn","setMyTurn","setSelectedRules","changeCard","useCallback","currentTarget","toggleRule","updateGameState","Hand","PlayedCards","MyHand","SelectRule","PlayButton","disabled","play","cardstr","secondCharSpades","diff","pass","marginTop","marginBottom","className","Fragment","checked","id","htmlFor","Deck","SelectableDeck","fontSize","GameOver","Rules","Game","setPhase","setRules","Create1","setOffer","setMyOffer","pc","signalingState","createDataChannel","onopen","onmessage","createOffer","d","setLocalDescription","catch","onicecandidate","candidate","localDescription","Create2","joinKey","setJoinKey","offer","answerDesc","RTCSessionDescription","setRemoteDescription","Join1","setAnswer","offerDesc","createAnswer","setMyAnswer","Join2","answer","Welcome","Lobby","myOffer","myAnswer","App","inSetup","setInSetup","useRef","RTCPeerConnection","ondatachannel","channel","oniceconnectionstatechange","iceConnectionState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","p","bigInt","n","FeistelState","rounds","k","this","elt","add","mod","lNew","modPow","t","mimcSponge","inputs","nOutputs","inject","mix","outputs","modPBigInt","ret","lesser","mimcWithRounds","mimcHash","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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CA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,+EACA,6EACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,+EACA,+EACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,8EACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,8EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,8EACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,8EACA,8EACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,gFACA,8EACA,gFACA,+EACA,KACA/F,KAAI,SAAC8R,GAAD,OAAOD,KAAOC,MAEdC,G,WAMJ,WAAYC,EAAgBC,GAAgB,0BAL5C9I,OAK2C,OAJ3C/C,OAI2C,OAH3C4L,YAG2C,OAF3CC,OAE2C,EACzCC,KAAK/I,EAAI0I,KAAO,GAChBK,KAAK9L,EAAIyL,KAAO,GAChBK,KAAKF,OAASA,EACdE,KAAKD,EAAIA,E,oDAGJE,GACLD,KAAK/I,EAAI+I,KAAK/I,EAAEiJ,IAAID,GAAKE,IAAIT,M,4BAI7B,IAAK,IAAI7I,EAAI,EAAGA,EAAImJ,KAAKF,OAAS,EAAGjJ,IAAK,CACxC,IACMuJ,EADIJ,KAAKD,EAAEG,IAAIF,KAAK/I,GAAGiJ,IAAIrM,GAAEgD,IAAIsJ,IAAIT,IAC5BW,OAAO,EAAGX,IAAGQ,IAAIF,KAAK9L,GAAGiM,IAAIT,IAC5CM,KAAK9L,EAAI8L,KAAK/I,EACd+I,KAAK/I,EAAImJ,EAEX,IAAME,EAAIN,KAAKD,EAAEG,IAAIF,KAAK/I,GAAGkJ,IAAIT,IACjCM,KAAK9L,EAAIoM,EAAED,OAAO,EAAGX,IAAGQ,IAAIF,KAAK9L,GAAGiM,IAAIT,Q,KAI5C,SAASa,GACPC,EACAC,EACAX,EACAzU,GAEA,IADc,EACR4H,EAAQ,IAAI4M,GAAaC,EAAQH,KAAOtU,IADhC,cAEImV,GAFJ,IAEd,2BAA0B,CAAC,IAAhBP,EAAe,QACxBhN,EAAMyN,OAAOT,GACbhN,EAAM0N,OAJM,8BAOd,IADA,IAAMC,EAAwB,CAAC3N,EAAMgE,GAC5BJ,EAAI,EAAGA,EAAI4J,EAAW,EAAG5J,IAChC5D,EAAM0N,MACNC,EAAQ5R,KAAKiE,EAAMgE,GAErB,OAAO2J,EAGF,IAAMC,GAAa,SAACnK,GACzB,IAAIoK,EAAMnB,KAAOjJ,GAAGyJ,IAAIT,IAIxB,OAHIoB,EAAIC,OAAOpB,KAAO,MACpBmB,EAAMA,EAAIZ,IAAIR,KAEToB,GAWIE,GAAiB,SAAClB,EAAgBzU,GAAjB,OAAiC,sCAC1DmV,EAD0D,yBAC1DA,EAD0D,uBAG7DD,GACEC,EAAO1S,KAAI,SAAC8R,GAAD,OAAOiB,GAAWjB,MAC7B,EACAE,EACAzU,GACA,KAEE4V,GAAWD,GAAe,IA5SpB,GAiTGC,IAHcD,GAAe,EA9ShC,GA+SaA,GAAe,EA9StB,GAgTHC,ICnTfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAG1BjX,QAAQC,IACN2W,GACE,oBACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAOJ/B,O","file":"static/js/main.ea2ff789.chunk.js","sourcesContent":["const RTC_CONFIG = {\n  iceServers: [\n    { urls: [\"stun:stun.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"] },\n  ],\n};\n\n// var haveGum = navigator.mediaDevices\n//   .getUserMedia({ video: true, audio: true })\n//   .catch(console.log);\n\nexport function createConn() {\n  let conn = {\n    pc: new RTCPeerConnection(RTC_CONFIG),\n    dc: null,\n    messageHandlers: {},\n    messageHandlersIndx: \"0\",\n  };\n  conn.pc.ondatachannel = (e) => {\n    conn.dc = e.channel;\n    conn.dc.onopen = () => onOpen(conn);\n    conn.dc.onmessage = (e) => onMessage(conn, e);\n  };\n  conn.pc.oniceconnectionstatechange = (e) =>\n    console.log(conn.pc.iceConnectionState);\n  return conn;\n}\n\nfunction onOpen(conn) {\n  console.log(\"opened chat!!\");\n  console.log(conn.messageHandlers);\n  const data = { type: \"info\", value: \"successfully opened connection!!\" };\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nfunction onMessage(conn, e) {\n  console.log(\"received message!\");\n  console.log(conn.messageHandlers);\n  let data = JSON.parse(e.data);\n  console.log(data);\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nexport function addMessageHandler(conn, handler) {\n  const indx = conn.messageHandlersIndx;\n  conn.messageHandlers[indx] = handler;\n  conn.messageHandlersIndx = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeMessageHandler(conn, key) {\n  if (!conn) return;\n  console.log(`removing key ${key} from conn ${conn}`);\n  delete conn.messageHandlers[key];\n}\n\nexport function sendMessage(conn, message) {\n  send(conn, { type: \"message\", message: message });\n}\nexport function sendData(conn, data) {\n  send(conn, { type: \"data\", ...data });\n}\nexport function send(conn, json) {\n  conn.dc.send(JSON.stringify(json));\n}\n\nexport function createOffer(conn, setOffer) {\n  console.log(\"create offer\");\n  console.log(conn.pc.signalingState);\n  conn.dc = conn.pc.createDataChannel(\"chat\");\n\n  conn.dc.onopen = () => onOpen(conn);\n  conn.dc.onmessage = (e) => onMessage(conn, e);\n\n  // haveGum\n  //   .then(() => conn.pc.createOffer())\n  conn.pc\n    .createOffer()\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setOffer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nfunction encodeKey(json) {\n  return btoa(json).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction decodeKey(key) {\n  let str = key;\n  if (str.length % 4 !== 0) {\n    str += \"===\".slice(0, 4 - (str.length % 4));\n  }\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return atob(str);\n}\n\nexport function join(conn, joinKey, setAnswer) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  let offerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n\n  conn.pc\n    .setRemoteDescription(offerDesc)\n    .then(() => conn.pc.createAnswer())\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setAnswer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nexport function acceptAnswer(conn, joinKey) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  var answerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n  conn.pc.setRemoteDescription(answerDesc).catch(console.log);\n}\n\nexport function numConnections(conn) {\n  // TODO: update this for many players\n  return 1;\n}\n","export default function assert(condition, error_m) {\n  if (condition) return;\n  console.error(\"assertion failed\");\n  console.error(JSON.parse(JSON.stringify(error_m)));\n}\n","import assert from \"./assert.js\";\n\nexport function shuffle(array, rng) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function unimplemented() {\n  assert(false, \"not implemented yet!!\");\n}\n\nexport async function hash(message) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n","import * as utils from \"./utils.js\";\n\nexport const RANK = {\n  ACE: \"A\",\n  TWO: \"2\",\n  THREE: \"3\",\n  FOUR: \"4\",\n  FIVE: \"5\",\n  SIX: \"6\",\n  SEVEN: \"7\",\n  EIGHT: \"8\",\n  NINE: \"9\",\n  TEN: \"10\",\n  JACK: \"J\",\n  QUEEN: \"Q\",\n  KING: \"K\",\n};\nexport const RANKS = [\n  RANK.ACE,\n  RANK.TWO,\n  RANK.THREE,\n  RANK.FOUR,\n  RANK.FIVE,\n  RANK.SIX,\n  RANK.SEVEN,\n  RANK.EIGHT,\n  RANK.NINE,\n  RANK.TEN,\n  RANK.JACK,\n  RANK.QUEEN,\n  RANK.KING,\n]; // dont do Object.values because we want to guarantee order\nexport const SUIT = {\n  SPADES: \"spades\",\n  HEARTS: \"hearts\",\n  DIAMONDS: \"diamonds\",\n  CLUBS: \"clubs\",\n};\nexport const SUITS = [SUIT.SPADES, SUIT.HEARTS, SUIT.DIAMONDS, SUIT.CLUBS]; // dont do Object.values because we want to guarantee order\n\nexport const VOID_CARD = \"VOID_CARD\";\n\n//      card is represented by {rank:, suit:} (why no types :(((()))))\n\nexport function orderedDeck(startFromRankIndex) {\n  if (!startFromRankIndex) startFromRankIndex = 0;\n  let deck = [];\n  let suit_index = 0;\n  let index = 0;\n  for (const suit of SUITS) {\n    let rank_index = 0;\n    for (const rank of RANKS) {\n      if (rank_index >= startFromRankIndex) {\n        deck.push({ rank, suit, rank_index, suit_index, index });\n      }\n      rank_index++;\n      index++;\n    }\n    suit_index++;\n  }\n  return deck;\n}\n\nexport function shuffledDeck(rng, startFromRankIndex) {\n  let deck = orderedDeck(startFromRankIndex);\n  return utils.shuffle(deck, rng);\n}\n\n// users: list of IDs for each user who wants a card\n// return: an object {user_id -> array of cards}, as even as possible, union is all cards, disjoint\nexport function dealShuffledCards(users, rng, startFromRankIndex) {\n  let deck = shuffledDeck(rng, startFromRankIndex);\n  let cards = {};\n  let index = 0;\n  for (const user of users) {\n    cards[user] = [];\n  }\n  while (index < deck.length) {\n    for (const user of users) {\n      cards[user].push(deck[index]);\n      index++;\n    }\n  }\n  return cards;\n}\n\nexport function serializeCard(card) {\n  const aceOfSpades = \"🂡\";\n  const firstChar = aceOfSpades.charCodeAt(0);\n  const secondChar = aceOfSpades.charCodeAt(1);\n  return (\n    String.fromCharCode(firstChar) +\n    String.fromCharCode(\n      secondChar +\n        card.rank_index +\n        card.suit_index * 16 +\n        (card.rank === RANK.QUEEN || card.rank === RANK.KING ? 1 : 0)\n    )\n  );\n}\nexport function deserializeCard(cardstr) {\n  const aceOfSpades = \"🂡\";\n  const secondCharSpades = aceOfSpades.charCodeAt(1);\n  const secondChar = cardstr.charCodeAt(1);\n  const diff = secondChar - secondCharSpades;\n  const suit_index = Math.floor(diff / 16);\n  let rank_index = diff % 16;\n  if (rank_index >= 12) {\n    rank_index--;\n  }\n  return {\n    suit: SUITS[suit_index],\n    rank: RANKS[rank_index],\n    suit_index,\n    rank_index,\n    index: suit_index * 13 + rank_index,\n  };\n}\nexport function serializeCardASCII(card) {\n  return card.rank + card.suit.charAt(0).toUpperCase();\n}\n\nexport function serializeDeck(deck) {\n  let deckstr = \"\";\n  for (const card of deck) {\n    deckstr += serializeCard(card);\n  }\n  return deckstr;\n}\n\nexport function sameCard(c1, c2) {\n  if (c1 === VOID_CARD || c2 === VOID_CARD)\n    return c1 === VOID_CARD && c2 === VOID_CARD;\n  return c1.index === c2.index;\n}\n","export const START_FROM_RANK = 12;\n","// rules\n\nimport * as utils from \"./utils.js\";\n\n// rule is a struct containing:\n//  - name: name of the rule\n//  - hash: hash of the compiled source code (same hash as within the snark)\n//  if it is private, also contains:\n//  - source: (the human readable source code written a cool language)\n//  - compiled: (a list of integers which is the compiled version for the snark)\n//  - owner: (the user id of the user owning the rule, or \"everyone\")\n\n// the game will store:\n//  - myRules: a list of my private rules\n//  - allRules: a list of all known public rules\n//  - rulesByOwner: a map {user -> ownedRule}. because if initial rules it is ok for multiple people to know the same rule\n\nexport const EVERYONE = \"everyone\";\n\nexport async function createPrivateRule(name, source, owner) {\n  const rule = {\n    name,\n    source,\n    owner,\n    compiled: compileSource(source),\n    hash: null,\n  };\n  rule.hash = await hashCompiledSource(rule.compiled);\n  return rule;\n}\nexport function publicRule(rule) {\n  // strip out the private parts of this rule, before publishing it to anyone else\n  const publicRule = {\n    name: rule.name,\n    owner: rule.owner,\n    hash: rule.hash,\n  };\n  return publicRule;\n}\n\n// TODO: implement this\nfunction compileSource(source) {\n  console.log(\"compiling source:\");\n  console.log(source);\n  utils.unimplemented();\n\n  return [1, 1, 1, 1, 1, 1 * source.length];\n}\n// TODO: implement this\nasync function hashCompiledSource(compiled) {\n  // should hash in the same way as the snark is doing\n  return await utils.hash(JSON.stringify(compiled));\n}\n\nexport function sameRule(r1, r2) {\n  return r1.hash === r2.hash;\n}\n\n// input:\n//  - card: the card that was played\n//  - playedCards: the cards that have been played so far, not including `card`, 0 is oldest and n-1 is most recently played\n//  - selectedRules: the rules that the player playing `card` selected\n//  - myRules: the private rules (including source code) that we know of and want to check for\n// output:\n//  - a list `provedRules` of length myRules.length, such that provedRules[i] is an object on the form:\n//      {rule: (publicrule object), proof: (snarkproof), penalty: (0 or 1)}\n//    where `rule` is the public rule version of each rule in `myRules`\nexport function determinePenalties(card, playedCards, selectedRules, myRules) {\n  // TODO: implement this\n\n  return myRules.map((rule) => {\n    return {\n      rule: publicRule(rule),\n      proof: \"this is supposed to be a snark proof\",\n      penalty: 0,\n    };\n  });\n}\n\nexport const INCORRECT_PENALTIES = \"INCORRECT_PENALTIES\";\n\n// input:\n//  - card: the card that was played\n//  - playedCards: the cards that have been played so far, not including `card`, 0 is oldest and n-1 is most recently played\n//  - selectedRules: the rules that the player playing `card` selected\n//  - provedRules: the proof object outputted by determinePenalties\n// output:\n//  if all provedRules were correct:\n//      - a list of all the publicrules that were violated\n//  if anything is incorrect:\n//      - INCORRECT_PENALTIES\nexport function verifyPenalties(card, playedCards, selectedRules, provedRules) {\n  // TODO: implement this!!! this below is bullshit\n  const violatedRules = [...selectedRules];\n  console.log(\"VIOLATED RULES:\");\n  console.log(violatedRules);\n  return violatedRules;\n}\n","// logic.js is intended to hold all game logic\n\nimport seedrandom from \"seedrandom\";\n\nimport * as p2p from \"./p2p.js\";\nimport * as utils from \"./utils.js\";\nimport * as cards from \"./cards.js\";\nimport * as config from \"./config.js\";\nimport * as rules from \"./rules.js\";\n\nimport assert from \"./assert.js\";\n\n// what's the game state?\n// there's a public part and a private part\n// the public part needs to be agreed upon among all players\n// the private part is\n//\n// PUBLIC:\n// for version 1:\n// 1: the middle deck, which has order\n// 2: each player's hand, which does not have order\n//      invariant: all disjoint, union is all cards\n//\n// for version 2:\n// 3: all the rule hashes\n// 4:\n//\n// PRIVATE:\n// for version 2:\n// 1: your own rules (which is in the form of uhhhh)\n//\n//\n//\n// TODO: later version: add signatures to actually be secure\n\n// WIRE PROTOCOL:\n// always assume broadcast messages!!!!!! this allows us to assume synchronicity which makes everything so much simpler\n// 1. setup:\n//  1.1 everyone: READY hashOfRandomNumber userID (number is a 64-bit integers, user id is randomly generated (later should be public key))\n//  1.2 when everyone you have open connections with say READY: START randomNumber  (userID is sent with every message)\n//  1.3 when received all STARTs: verifies all hashes, xors all numbers, seed rng with this, then just pick cards\n//  1.4 using same seed just choose order\n// 2. play:\n//  2.1 someone: PLAY card userID rules provedRules (same as for playack, need to show you enforce rules consistently even for yourself)\n//  2.2 everyone else: PLAYACK card user userID provedRules (rulehash, snark proof, for each rule you know)\n// 3. abort:\n//  3.1 send ABORT userID to every user, be sad\n\n// ok dont overthink it\n// i think having a hierarchical state thing makes sense\n// this is javascript not rust\n\n// we assume that messages come to people in the order they are sent\n// i.e. we assume that channels are FIFO\n\n// ok so we have:\n// phase = {\"setup\", \"play\", \"gameover\", \"abort\"}\n// each phase has some metadata, which can be public or private\n// the public metadata is always sent over for debugging purposes\n\n// transitions\n// setup:\n//      state = {\"preReady\",\"sentReady\",\"sentStart\"},\n//      players, readyHashes, startNumbers, myRandom\n//\n// play:\n//      nextTurn = index into players\n//      players (order matters),\n//      playedCards (0 bottom, n-1 top),\n//      playerHands (id -> array),\n//      state = {\"waitforplay\", \"waitforack\"}\n//      acksReceived = []\n//      lastPlayedCard\n//      lastPlayedUser\n//      lastSelectedRules\n//      penaltyRules\n//\n// gameover: (transitions directly to setup.sentReady)\n//      winner = user_id\n//\n// abort:\n//      (no data)\n\nexport const PHASE = {\n  SETUP: \"SETUP\",\n  PLAY: \"PLAY\",\n  GAMEOVER: \"GAMEOVER\",\n  ABORT: \"ABORT\",\n};\nconst PHASES = Object.values(PHASE);\nconst SETUP_STATE = {\n  PRE_READY: \"PRE_READY\",\n  SENT_READY: \"SENT_READY\",\n  SENT_START: \"SENT_START\",\n};\nconst SETUP_STATES = Object.values(SETUP_STATE);\nconst PLAY_STATE = {\n  WAIT_FOR_PLAY: \"WAIT_FOR_PLAY\",\n  WAIT_FOR_PLAYACK: \"WAIT_FOR_PLAYACK\",\n};\nconst PLAY_STATES = Object.values(PLAY_STATE);\n\nconst METHOD = {\n  READY: \"READY\",\n  START: \"START\",\n  PLAY: \"PLAY\",\n  PLAYACK: \"PLAYACK\",\n  ABORT: \"ABORT\",\n};\nconst METHODS = Object.values(METHOD);\nconst METHOD_HANDLER = {\n  [METHOD.READY]: handleReadyMethod,\n  [METHOD.START]: handleStartMethod,\n  [METHOD.PLAY]: handlePlayMethod,\n  [METHOD.PLAYACK]: handlePlayAckMethod,\n  [METHOD.ABORT]: handleAbortMethod,\n};\nassert(\n  JSON.stringify(METHODS) === JSON.stringify(Object.keys(METHOD_HANDLER)),\n  {\n    methods: METHODS,\n    handlers: METHOD_HANDLER,\n  }\n);\n\nexport function createGame(conn) {\n  // TODO: generate private/public keypair here and let userId be the public key\n  const userId = Math.random().toString(36).substr(2, 9);\n  const game = {\n    conn,\n    listeners: {},\n    listenerIndex: \"0\",\n    userId: userId,\n    phase: null,\n    data: {}, // contains data for every phase\n\n    // rule data\n    myRules: [],\n    allRules: [],\n  };\n  for (const phase of PHASES) {\n    game.data[phase] = {};\n  }\n  initPhase(game, PHASE.SETUP);\n  setUpPublicRules(game);\n  return game;\n}\nfunction setUpPublicRules(game) {\n  // TODO: add more public rules\n  rules\n    .createPrivateRule(\"spades\", \"card.suit == spades\", rules.EVERYONE)\n    .then((rule) => {\n      game.myRules.push(rule);\n      const publicRule = rules.publicRule(rule);\n      game.allRules.push(publicRule);\n      update(game);\n    })\n    .then(() => {\n      return rules.createPrivateRule(\n        \"lastcard\",\n        \"isLastCard()\",\n        rules.EVERYONE\n      );\n    })\n    .then((rule) => {\n      game.myRules.push(rule);\n      const publicRule = rules.publicRule(rule);\n      game.allRules.push(publicRule);\n      update(game);\n    });\n}\nfunction resetPhase(game, phase, args) {\n  assert(PHASES.includes(phase), game);\n  let data = {};\n  if (phase === PHASE.SETUP) {\n    data = {\n      state: SETUP_STATE.PRE_READY,\n      players: [game.userId],\n      readyHashes: {},\n      startNumbers: {},\n      myRandom: null,\n    };\n  } else if (phase === PHASE.PLAY) {\n    // shuffle the player list\n    // note: we need to sort it first before we do it so everyone gets the same list\n\n    data.players = utils.shuffle(\n      [...game.data[PHASE.SETUP].players].sort(),\n      args.rng\n    );\n\n    data.nextTurn = 0;\n\n    data.playedCards = []; // start empty\n\n    // now deal cards\n    data.playerHands = cards.dealShuffledCards(\n      utils.shuffle(data.players, args.rng),\n      args.rng,\n      config.START_FROM_RANK\n    );\n\n    data.state = PLAY_STATE.WAIT_FOR_PLAY;\n\n    data.acksReceived = [];\n    data.lastPlayedCard = null;\n    data.lastPlayedUser = null;\n    data.lastSelectedRules = null;\n    data.penaltyRules = [];\n  }\n  game.data[phase] = data;\n}\nfunction initPhase(game, phase, args) {\n  assert(PHASES.includes(phase), game);\n  resetPhase(game, phase, args);\n  game.phase = phase;\n}\nexport function addListener(game, listener) {\n  const indx = game.listenerIndex;\n  game.listeners[indx] = listener;\n  game.listenerIndex = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeListener(game, key) {\n  if (!game) return;\n  console.log(`removing key ${key} from game ${game}`);\n  console.log(game);\n  delete game.listeners[key];\n}\n// this function needs to be called every time the game state is updated!!!!!!!!\nfunction update(game) {\n  for (let listener of Object.values(game.listeners)) {\n    listener();\n  }\n}\n\n// m should be on form {data: , method: , ...}\nexport function receive(game, m) {\n  console.log(\"game receiving message!\");\n  console.log(m);\n  if (m.type !== \"data\") {\n    console.log(\"ignoring non-data message\");\n    return;\n  }\n  assert(METHODS.includes(m.method));\n  console.log(METHOD_HANDLER);\n  METHOD_HANDLER[m.method](game, m);\n}\nfunction send(game, m) {\n  // TODO: sign the message\n  m[\"from\"] = game.userId;\n  p2p.sendData(game.conn, m);\n}\n\nfunction handleReadyMethod(game, m) {\n  // should be in setup phase, or gameover phase\n  if (!(game.phase === PHASE.SETUP || game.phase === PHASE.GAMEOVER))\n    return abort(game);\n  const data = game.data[PHASE.SETUP];\n  // should not have sent start already\n  if (\n    !(\n      data.state === SETUP_STATE.PRE_READY ||\n      data.state === SETUP_STATE.SENT_READY\n    )\n  ) {\n    return abort(game);\n  }\n\n  const user = m.from;\n  const hash = m.hash;\n\n  // shouldn't receive twice; should have different IDs\n  if (data.players.includes(user)) return abort(game);\n\n  data.players.push(user);\n  data.readyHashes[user] = hash;\n\n  // if we have received all, send start\n  maybeSendStart(game);\n\n  update(game);\n}\nasync function handleStartMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) return abort(game, \"wrong phase\");\n  const data = game.data[PHASE.SETUP];\n  // should have sent ready (not necessarily should have sent start though)\n  if (\n    !(\n      data.state === SETUP_STATE.SENT_READY ||\n      data.state === SETUP_STATE.SENT_START\n    )\n  ) {\n    return abort(game);\n  }\n\n  const user = m.from;\n  const randomNumber = m.randomNumber;\n\n  // shouldn't receive twice\n  if (Object.keys(data.startNumbers).includes(user)) return abort(game);\n\n  // should receive from verified user\n  if (!data.players.includes(user)) return abort(game, `unknown user ${user}`);\n\n  // assert that the hash is ok\n  const randomNumberHash = await utils.hash(`${randomNumber}`);\n  if (data.readyHashes[user] !== randomNumberHash)\n    return abort(\n      game,\n      `incorrect hash ${randomNumberHash} received for random number ${randomNumber} from user ${user}`\n    );\n\n  // add to numbers\n  data.startNumbers[user] = randomNumber;\n\n  // if we have received all, go to the game!!\n  maybeStartGame(game);\n\n  update(game);\n}\nfunction handlePlayMethod(game, m) {\n  if (game.phase !== PHASE.PLAY) return abort(game, \"wrong phase\");\n  const data = game.data[game.phase];\n  if (data.state !== PLAY_STATE.WAIT_FOR_PLAY)\n    return abort(game, \"wrong state\");\n\n  const user = m.from;\n  const card = m.card;\n  const selectedRules = m.rules;\n  const provedRules = m.provedRules;\n\n  // make sure it is this user's turn\n  if (user !== data.players[data.nextTurn]) {\n    return abort(game, \"user tried to make move but it's not their turn\");\n  }\n\n  // make sure this user owns this card (or it is voidcard)\n  if (\n    card !== cards.VOID_CARD &&\n    !data.playerHands[user].some((c) => cards.sameCard(c, card))\n  ) {\n    return abort(game, \"user tried to play card not in their hand\");\n  }\n\n  // make sure the card move is legal\n  if (!legalToPlayCard(game, card)) {\n    return abort(game, \"user tried to play illegal card\");\n  }\n\n  // verify that provedRules contains all the (1) public rules and (2) user's rules\n  const userRulesHashes = game.allRules\n    .filter((r) => r.owner === rules.EVERYONE || r.owner === user)\n    .map((r) => r.hash);\n  const provedRulesHashes = provedRules.map((r) => r.rule.hash);\n  // these arrays need to contain the same set\n  if (\n    JSON.stringify(userRulesHashes.sort()) !==\n    JSON.stringify(provedRulesHashes.sort())\n  ) {\n    return abort(game, \"did not prove outcomes for all rules user knows of\");\n  }\n  const penalties = rules.verifyPenalties(\n    card,\n    data.playedCards,\n    selectedRules,\n    provedRules\n  );\n  if (penalties === rules.INCORRECT_PENALTIES) {\n    return abort(game, \"proofs were incorrect somehow :(\");\n  }\n  recordPenalties(game, penalties);\n\n  // actually do the move\n  actuallyPlayCard(game, user, card, selectedRules);\n\n  sendPlayAck(game, user, card, selectedRules);\n\n  update(game);\n}\nfunction handlePlayAckMethod(game, m) {\n  if (game.phase !== PHASE.PLAY) return abort(game, \"wrong phase\");\n  const data = game.data[game.phase];\n  if (data.state !== PLAY_STATE.WAIT_FOR_PLAYACK)\n    return abort(game, \"wrong state\");\n\n  const user = m.user;\n  const from = m.from;\n  const card = m.card;\n  const provedRules = m.provedRules;\n\n  // make sure the right user n right card was acked\n  if (user !== data.lastPlayedUser) {\n    return abort(game, \"tried to ack the wrong user\");\n  }\n  if (!cards.sameCard(card, data.lastPlayedCard)) {\n    return abort(game, \"tried to ack the wrong card\");\n  }\n\n  if (data.acksReceived.includes(from)) {\n    return abort(game, \"already received ack from this user\");\n  }\n\n  // verify that provedRules contains all the (1) public rules and (2) user's rules\n  const userRulesHashes = game.allRules\n    .filter((r) => r.owner === rules.EVERYONE || r.owner === from)\n    .map((r) => r.hash);\n  const provedRulesHashes = provedRules.map((r) => r.rule.hash);\n  // these arrays need to contain the same set\n  if (\n    JSON.stringify(userRulesHashes.sort()) !==\n    JSON.stringify(provedRulesHashes.sort())\n  ) {\n    return abort(game, \"did not prove outcomes for all rules user knows of\");\n  }\n\n  const penalties = rules.verifyPenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    data.lastSelectedRules,\n    provedRules\n  );\n  if (penalties === rules.INCORRECT_PENALTIES) {\n    return abort(game, \"proofs were incorrect somehow :(\");\n  }\n  recordPenalties(game, penalties);\n\n  data.acksReceived.push(from);\n\n  maybeStopWaitingForAcks(game);\n\n  update(game);\n}\nfunction recordPenalties(game, penalties) {\n  const data = game.data[game.phase];\n  for (const penalty of penalties) {\n    if (!data.penaltyRules.includes(penalty)) {\n      data.penaltyRules.push(penalty);\n    }\n  }\n}\nfunction enforcePenalties(game, user, penalties) {\n  console.log(\"enforce penalties:\");\n  console.log(penalties);\n  const data = game.data[game.phase];\n  // just take cards from the played cards as long as we can do so\n  // take from the bottom\n  for (let i = 0; i < penalties.length && data.playedCards.length > 0; i++) {\n    // TODO: make penalties have different worth HERE\n    const bottomCard = data.playedCards[0];\n    data.playerHands[user].push(bottomCard);\n    data.playedCards.splice(0, 1);\n  }\n  console.log(\"right before updating the game:\");\n  console.log(JSON.parse(JSON.stringify(game)));\n  update(game);\n}\nfunction handleAbortMethod(game, m) {\n  console.log(\"ABORTING :(((( SAD\");\n  utils.unimplemented();\n\n  update(game);\n}\n\nfunction abort(game, reason) {\n  console.error(\"ABORT GAME :((\");\n  console.error(reason);\n  send(game, { method: METHOD.ABORT, reason });\n  game.phase = PHASE.ABORT;\n\n  update(game);\n}\n\nfunction actuallyPlayCard(game, user, card, selectedRules) {\n  const data = game.data[game.phase];\n  data.nextTurn = (data.nextTurn + 1) % data.players.length;\n  data.state = PLAY_STATE.WAIT_FOR_PLAYACK;\n  data.lastPlayedCard = card;\n  data.lastPlayedUser = user;\n  data.lastSelectedRules = selectedRules;\n  if (card !== cards.VOID_CARD) {\n    data.playedCards.push(card);\n    data.playerHands[user] = data.playerHands[user].filter(\n      (c) => c.index !== card.index\n    );\n  }\n  update(game);\n}\n\nfunction legalToPlayCard(game, card) {\n  const data = game.data[game.phase];\n  // always ok to pass\n  if (card === cards.VOID_CARD) return true;\n  // first move always legal\n  if (data.playedCards.length === 0) return true;\n  // either suit or rank must be the same\n  const lastCard = data.playedCards[data.playedCards.length - 1];\n  return lastCard.suit === card.suit || lastCard.rank === card.rank;\n}\n\nexport function playCard(game, card, selectedRules) {\n  assert(game.phase === PHASE.PLAY && isMyTurn(game), game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAY, game);\n  assert(\n    card === cards.VOID_CARD ||\n      data.playerHands[game.userId].some((c) => cards.sameCard(c, card)),\n    game\n  );\n  assert(\n    selectedRules.every(\n      (rule) => game.allRules.filter((x) => rules.sameRule(x, rule)).length > 0\n    ),\n    game\n  );\n  console.log(`play card!`);\n  console.log(card);\n  console.log(selectedRules);\n\n  assert(legalToPlayCard(game, card), game);\n\n  // we do this for ourselves. we need to run the snarks\n  // to prove to others that we enforce our own rules correctly even on ourselves\n  const provedRules = rules.determinePenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    selectedRules,\n    game.myRules\n  );\n  const penalties = rules.verifyPenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    selectedRules,\n    provedRules\n  );\n  assert(\n    penalties !== rules.INCORRECT_PENALTIES,\n    \"your own penalty calculations were wrong lololol\"\n  );\n  recordPenalties(game, penalties);\n\n  send(game, { method: METHOD.PLAY, card, rules: selectedRules, provedRules });\n\n  actuallyPlayCard(game, game.userId, card, selectedRules);\n  update(game);\n}\n\nexport function restartGame(game) {\n  game.phase = PHASE.SETUP;\n\n  sendReady(game);\n}\n\nexport async function sendReady(game) {\n  assert(game.phase === PHASE.SETUP, game);\n  const data = game.data[PHASE.SETUP];\n  assert(data.state === SETUP_STATE.PRE_READY, game);\n  // generate a random number\n  data.myRandom = Math.floor(Math.random() * 2 ** 64);\n  // hash the random number\n  const hash_r = await utils.hash(`${data.myRandom}`);\n  console.log(hash_r);\n  data.readyHashes[game.userId] = hash_r;\n  send(game, { method: METHOD.READY, hash: hash_r });\n  data.state = SETUP_STATE.SENT_READY;\n  maybeSendStart(game);\n\n  update(game);\n}\n\nfunction checkIfWon(game) {\n  assert(game.phase === PHASE.PLAY, game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAY, game);\n\n  for (const user of data.players) {\n    if (data.playerHands[user].length === 0) {\n      // someone won!!!!\n      // assert only one player won\n      assert(\n        Object.values(data.playerHands).filter((l) => l.length === 0).length ===\n          1\n      );\n\n      game.phase = PHASE.GAMEOVER;\n      game.data[PHASE.GAMEOVER].winner = user;\n    }\n  }\n}\n\nfunction maybeStopWaitingForAcks(game) {\n  const data = game.data[game.phase];\n  // everyone except the player needs to ack the card\n  if (data.acksReceived.length === data.players.length - 1) {\n    enforcePenalties(game, data.lastPlayedUser, data.penaltyRules);\n\n    data.state = PLAY_STATE.WAIT_FOR_PLAY;\n    data.acksReceived = [];\n    data.lastPlayedCard = null;\n    data.lastPlayedUser = null;\n    data.lastSelectedRules = null;\n    data.penaltyRules = [];\n\n    // check if someone won\n    checkIfWon(game);\n\n    update(game);\n  }\n}\n\nfunction sendPlayAck(game, user, card, selectedRules) {\n  assert(game.phase === PHASE.PLAY, game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAYACK, game);\n\n  const provedRules = rules.determinePenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    selectedRules,\n    game.myRules\n  );\n  const penalties = rules.verifyPenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    selectedRules,\n    provedRules\n  );\n  assert(\n    penalties !== rules.INCORRECT_PENALTIES,\n    \"my own proofs were incorrect lolol im stupid\"\n  );\n  recordPenalties(game, penalties);\n\n  send(game, { method: METHOD.PLAYACK, card, user, provedRules });\n\n  assert(!data.acksReceived.includes(game.userId), game);\n  data.acksReceived.push(game.userId);\n\n  maybeStopWaitingForAcks(game);\n\n  update(game);\n}\n\nfunction maybeStartGame(game) {\n  const data = game.data[game.phase];\n  if (data.players.length === Object.keys(data.startNumbers).length) {\n    startGame(game);\n  }\n}\nfunction startGame(game) {\n  assert(game.phase === PHASE.SETUP);\n  const data = game.data[game.phase];\n  assert(data.state === SETUP_STATE.SENT_START, game);\n\n  // xor all the random numbers (which means that as long as at least 1 person honest, it is random)\n  let finalRandomNumber = 0;\n  Object.values(data.startNumbers).forEach((randomNumber) => {\n    finalRandomNumber ^= randomNumber;\n  });\n\n  console.log(`final randomness: ${finalRandomNumber}`);\n  // use this random number as the seed of an rng\n  let rng = seedrandom(`${finalRandomNumber}`);\n\n  // now we can transition to the game phase\n  // delete the old game object properties\n  initPhase(game, PHASE.PLAY, { rng });\n  resetPhase(game, PHASE.SETUP);\n\n  console.log(\"STARTING GAME!!!! exciting :)))\");\n  console.log(game);\n\n  update(game);\n}\n\nfunction maybeSendStart(game) {\n  const data = game.data[PHASE.SETUP];\n  if (\n    p2p.numConnections(game.conn) ===\n    Object.keys(data.readyHashes).length - 1\n  ) {\n    assert(data.players.length === Object.keys(data.readyHashes).length, game);\n    sendStart(game);\n  }\n}\nfunction sendStart(game) {\n  assert(game.phase === PHASE.SETUP, game);\n  const data = game.data[game.phase];\n  assert(data.state === SETUP_STATE.SENT_READY, game);\n\n  send(game, { method: METHOD.START, randomNumber: data.myRandom });\n\n  data.startNumbers[game.userId] = data.myRandom;\n  data.state = SETUP_STATE.SENT_START;\n\n  maybeStartGame(game);\n\n  update(game);\n}\n\n// convenience for 2 players\n// TODO: update this for more players\n\nexport function getMyUserId(game) {\n  return game.userId;\n}\nexport function getOppUserId(game) {\n  const data = game.data[PHASE.PLAY];\n  const oppUserId = data.players.filter((x) => x !== getMyUserId(game))[0];\n  console.log(`opp user id: ${oppUserId}`);\n  return oppUserId;\n}\nexport function getMyHand(game) {\n  const data = game.data[PHASE.PLAY];\n  return [...data.playerHands[getMyUserId(game)]];\n}\nexport function getOppHand(game) {\n  const data = game.data[PHASE.PLAY];\n  const playerHand = data.playerHands[getOppUserId(game)];\n  console.log(\"player hand!\");\n  console.log(JSON.stringify(playerHand));\n  return [...playerHand];\n}\nfunction isMyTurn(game) {\n  const data = game.data[PHASE.PLAY];\n  return getMyUserId(game) === data.players[data.nextTurn];\n}\nexport function isMyTurnEnabled(game) {\n  const data = game.data[PHASE.PLAY];\n  return isMyTurn(game) && data.state === PLAY_STATE.WAIT_FOR_PLAY;\n}\n\nexport function getPlayedCards(game) {\n  const data = game.data[PHASE.PLAY];\n  return [...data.playedCards];\n}\n\nexport function getWinner(game) {\n  const data = game.data[PHASE.GAMEOVER];\n  return data.winner;\n}\n\nexport function getRules(game) {\n  return [...game.allRules];\n}\n","import React from \"react\";\nimport { useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\n\nexport function Chat(props) {\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  function onSendMessage() {\n    p2p.sendMessage(props.connRef.current, chatMessage);\n    newMessage(chatMessage);\n    setChatMessage(\"\");\n  }\n\n  function newMessage(m) {\n    setMessages((oldm) => {\n      if (oldm === \"\") return m;\n      return m + \"\\n\" + oldm;\n    });\n  }\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(props.connRef.current, (m) => {\n      if (m.type === \"message\") return newMessage(m.message);\n      newMessage(JSON.stringify(m));\n    });\n    return () => {\n      console.log(`cleaning up chat!!! index ${indx}`);\n      p2p.removeMessageHandler(props.connRef.current, indx);\n    };\n  }, [props.connRef]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={chatMessage}\n        onChange={(e) => setChatMessage(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onSendMessage() : 0)}\n      ></input>\n      <button onClick={onSendMessage}>Send message</button>\n      <p style={{ whiteSpace: \"pre-line\" }}>{messages}</p>\n    </div>\n  );\n}\n","import \"./Game.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\nimport * as cards from \"./cards.js\";\nimport * as rules from \"./rules.js\";\n\nimport { Chat } from \"./Chat.js\";\n\nfunction Setup() {\n  return <div>Waiting for everyone else to press start...</div>;\n}\n\nfunction Play(props) {\n  const [playedCards, setPlayedCards] = useState(\n    logic.getPlayedCards(props.gameRef.current)\n  );\n  const [myHand, setMyHand] = useState(logic.getMyHand(props.gameRef.current));\n  const [oppHand, setOppHand] = useState(\n    logic.getOppHand(props.gameRef.current)\n  );\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n  const [oppUserId, setOppUserId] = useState(\n    logic.getOppUserId(props.gameRef.current)\n  );\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [myTurn, setMyTurn] = useState(\n    logic.isMyTurnEnabled(props.gameRef.current)\n  );\n  const [selectedRules, setSelectedRules] = useState([]);\n\n  const changeCard = useCallback((e) => {\n    setSelectedCard(e.currentTarget.value);\n  }, []);\n\n  const toggleRule = useCallback(\n    (e) => {\n      const rule = JSON.parse(e.currentTarget.value);\n      console.log(`toggling rule ${rule.name}`);\n      if (selectedRules.filter((x) => rules.sameRule(x, rule)).length > 0) {\n        setSelectedRules(selectedRules.filter((x) => !rules.sameRule(x, rule)));\n      } else {\n        setSelectedRules([rule, ...selectedRules]);\n      }\n    },\n    [selectedRules]\n  );\n\n  const updateGameState = useCallback(() => {\n    console.log(\"updating game state in Play :))))))\");\n    console.log(JSON.parse(JSON.stringify(props.gameRef.current)));\n    setPlayedCards(logic.getPlayedCards(props.gameRef.current));\n    setMyHand(logic.getMyHand(props.gameRef.current));\n    setOppHand(logic.getOppHand(props.gameRef.current));\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n    setOppUserId(logic.getOppUserId(props.gameRef.current));\n    setMyTurn(logic.isMyTurnEnabled(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      <Hand cards={oppHand} user={oppUserId} />\n      <PlayedCards cards={playedCards} />\n      <MyHand\n        cards={myHand}\n        user={myUserId}\n        changeCard={changeCard}\n        selectedCard={selectedCard}\n      />\n      <SelectRule\n        rules={props.rules}\n        selectedRules={selectedRules}\n        toggleRule={toggleRule}\n      />\n      <PlayButton\n        disabled={!myTurn || props.disabled}\n        play={() => {\n          logic.playCard(\n            props.gameRef.current,\n            cards.deserializeCard(selectedCard),\n            selectedRules\n          );\n          setSelectedRules([]);\n        }}\n        pass={() => {\n          logic.playCard(props.gameRef.current, cards.VOID_CARD, selectedRules);\n          setSelectedRules([]);\n        }}\n      />\n    </div>\n  );\n}\n\nfunction SelectRule(props) {\n  return (\n    <div style={{ marginTop: \"5px\", marginBottom: \"7px\" }}>\n      rules:\n      <div className=\"SelectRule\">\n        {props.rules.map((rule, index) => {\n          return (\n            <React.Fragment key={`rulesfragment${index}`}>\n              <input\n                type=\"checkbox\"\n                name=\"rules\"\n                value={JSON.stringify(rule)}\n                checked={\n                  props.selectedRules.filter((x) => rules.sameRule(x, rule))\n                    .length > 0\n                }\n                onChange={props.toggleRule}\n                id={rule.hash}\n                key={`rulesradio${index}`}\n              />\n              <label htmlFor={rule.hash} key={`ruleslabel${index}`}>\n                {rule.name}\n              </label>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction PlayButton(props) {\n  return (\n    <div>\n      <button onClick={props.play} disabled={props.disabled}>\n        Play!\n      </button>\n      <button onClick={props.pass} disabled={props.disabled}>\n        Pass\n      </button>\n    </div>\n  );\n}\n\nfunction PlayedCards(props) {\n  return (\n    <div>\n      played cards: <Deck cards={props.cards} />\n    </div>\n  );\n}\n\nfunction Hand(props) {\n  return (\n    <div>\n      {props.user}'s cards:\n      <Deck cards={props.cards} />\n    </div>\n  );\n}\nfunction MyHand(props) {\n  return (\n    <div>\n      my cards:\n      <SelectableDeck\n        cards={props.cards}\n        changeCard={props.changeCard}\n        selectedCard={props.selectedCard}\n      />\n    </div>\n  );\n}\nfunction Deck(props) {\n  if (props.cards.length === 0) {\n    return <div>(none)</div>;\n  }\n  return (\n    <div style={{ fontSize: \"3em\" }}>{cards.serializeDeck(props.cards)}</div>\n  );\n}\nfunction SelectableDeck(props) {\n  if (props.cards.length === 0) {\n    return <div>(none)</div>;\n  }\n  return (\n    <div style={{ fontSize: \"3em\" }} className=\"SelectableDeck\">\n      {props.cards.map((card, index) => {\n        return (\n          <React.Fragment key={`mycardsfragment${index}`}>\n            <input\n              type=\"radio\"\n              name=\"mycards\"\n              value={cards.serializeCard(card)}\n              checked={props.selectedCard === cards.serializeCard(card)}\n              onChange={props.changeCard}\n              id={cards.serializeCardASCII(card)}\n              key={`mycardsradio${index}`}\n            />\n            <label\n              htmlFor={cards.serializeCardASCII(card)}\n              key={`mycardslabel${index}`}\n            >\n              {cards.serializeCard(card)}\n            </label>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction GameOver(props) {\n  return (\n    <div>\n      <div style={{ fontSize: \"2em\" }}>\n        Game is over!!!! {props.winner} won!\n      </div>\n      <button onClick={() => logic.restartGame(props.gameRef.current)}>\n        Play again!\n      </button>\n    </div>\n  );\n}\n\nfunction Rules(props) {\n  return (\n    <div>\n      Rules:\n      <ul>\n        {props.rules.map((rule) => {\n          return <li key={rule.hash}>{JSON.stringify(rule)}</li>;\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport function Game(props) {\n  const [phase, setPhase] = useState(props.gameRef.current.phase);\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n  const [rules, setRules] = useState(logic.getRules(props.gameRef.current));\n\n  const updateGameState = useCallback(() => {\n    setPhase(props.gameRef.current.phase);\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n    setRules(logic.getRules(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      welcome to the game, {myUserId}!\n      <hr />\n      {phase === logic.PHASE.GAMEOVER && (\n        <React.Fragment>\n          <GameOver\n            gameRef={props.gameRef}\n            winner={logic.getWinner(props.gameRef.current)}\n          />\n          <hr />\n        </React.Fragment>\n      )}\n      {phase === logic.PHASE.SETUP && (\n        <React.Fragment>\n          <Setup />\n          <hr />\n        </React.Fragment>\n      )}\n      <Rules rules={rules} />\n      <hr />\n      {(phase === logic.PHASE.PLAY || phase === logic.PHASE.GAMEOVER) && (\n        <React.Fragment>\n          <Play\n            gameRef={props.gameRef}\n            disabled={phase === logic.PHASE.GAMEOVER}\n            rules={rules}\n          />\n          <hr />\n        </React.Fragment>\n      )}\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\n\nimport { Game } from \"./Game.js\";\nimport { Chat } from \"./Chat.js\";\n\nfunction Create1(props) {\n  return (\n    <div>\n      <button\n        onClick={() => p2p.createOffer(props.connRef.current, props.setMyOffer)}\n      >\n        Create game\n      </button>\n    </div>\n  );\n}\n\nfunction Create2(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      send this message to your friends: <code>{props.offer}</code>\n      <br />\n      input their answer:\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button onClick={() => p2p.acceptAnswer(props.connRef.current, joinKey)}>\n        Add player\n      </button>\n    </div>\n  );\n}\n\nfunction Join1(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button\n        onClick={() =>\n          p2p.join(props.connRef.current, joinKey, props.setMyAnswer)\n        }\n      >\n        Join\n      </button>\n    </div>\n  );\n}\n\nfunction Join2(props) {\n  return (\n    <div>\n      send this message to your friends: <code>{props.answer}</code>\n      <br />\n    </div>\n  );\n}\n\nfunction Welcome(props) {\n  console.log(props.connRef);\n  return (\n    <div>\n      <Create1 connRef={props.connRef} setMyOffer={props.setMyOffer} />\n      <br />\n      <Join1 connRef={props.connRef} setMyAnswer={props.setMyAnswer} />\n      <br />\n    </div>\n  );\n}\n\nfunction Lobby(props) {\n  return (\n    <div>\n      {props.offer ? (\n        <Create2 connRef={props.connRef} offer={props.offer} />\n      ) : (\n        <Join2 connRef={props.connRef} answer={props.answer} />\n      )}\n      <hr />\n      Participants list: idk\n      <br />\n      <hr />\n      <button onClick={props.startGame}>Start game!</button>\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n\nfunction Setup(props) {\n  const [myOffer, setMyOffer] = useState(null);\n  const [myAnswer, setMyAnswer] = useState(null);\n\n  if (myOffer || myAnswer) {\n    return (\n      <Lobby\n        connRef={props.connRef}\n        offer={myOffer}\n        answer={myAnswer}\n        startGame={props.startGame}\n      />\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <Welcome\n          connRef={props.connRef}\n          setMyOffer={setMyOffer}\n          setMyAnswer={setMyAnswer}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction App() {\n  const [inSetup, setInSetup] = useState(true);\n  const connRef = useRef();\n  const gameRef = useRef();\n\n  const startGame = useCallback(() => {\n    setInSetup(false);\n    logic.sendReady(gameRef.current);\n  }, [gameRef]);\n\n  useEffect(() => {\n    connRef.current = p2p.createConn();\n    gameRef.current = logic.createGame(connRef.current);\n  }, []);\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(connRef.current, (m) =>\n      logic.receive(gameRef.current, m)\n    );\n    return () => {\n      p2p.removeMessageHandler(connRef.current, indx);\n    };\n  }, [connRef, gameRef]);\n\n  return (\n    <div className=\"App\">\n      {inSetup && <Setup connRef={connRef} startGame={startGame} />}\n      {!inSetup && <Game connRef={connRef} gameRef={gameRef} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//credit to https://github.com/darkforest-eth/client/blob/master/src/miner/mimc.ts\nimport bigInt from \"big-integer\";\nimport { BigInteger } from \"big-integer\";\n\nexport const p = bigInt(\n  \"21888242871839275222246405745257275088548364400416034343698204186575808495617\"\n);\n\nconst KEY = 0;\nconst BIOME_KEY = 8;\n\nconst c = [\n  \"0\",\n  \"7120861356467848435263064379192047478074060781135320967663101236819528304084\",\n  \"5024705281721889198577876690145313457398658950011302225525409148828000436681\",\n  \"17980351014018068290387269214713820287804403312720763401943303895585469787384\",\n  \"19886576439381707240399940949310933992335779767309383709787331470398675714258\",\n  \"1213715278223786725806155661738676903520350859678319590331207960381534602599\",\n  \"18162138253399958831050545255414688239130588254891200470934232514682584734511\",\n  \"7667462281466170157858259197976388676420847047604921256361474169980037581876\",\n  \"7207551498477838452286210989212982851118089401128156132319807392460388436957\",\n  \"9864183311657946807255900203841777810810224615118629957816193727554621093838\",\n  \"4798196928559910300796064665904583125427459076060519468052008159779219347957\",\n  \"17387238494588145257484818061490088963673275521250153686214197573695921400950\",\n  \"10005334761930299057035055370088813230849810566234116771751925093634136574742\",\n  \"11897542014760736209670863723231849628230383119798486487899539017466261308762\",\n  \"16771780563523793011283273687253985566177232886900511371656074413362142152543\",\n  \"749264854018824809464168489785113337925400687349357088413132714480582918506\",\n  \"3683645737503705042628598550438395339383572464204988015434959428676652575331\",\n  \"7556750851783822914673316211129907782679509728346361368978891584375551186255\",\n  \"20391289379084797414557439284689954098721219201171527383291525676334308303023\",\n  \"18146517657445423462330854383025300323335289319277199154920964274562014376193\",\n  \"8080173465267536232534446836148661251987053305394647905212781979099916615292\",\n  \"10796443006899450245502071131975731672911747129805343722228413358507805531141\",\n  \"5404287610364961067658660283245291234008692303120470305032076412056764726509\",\n  \"4623894483395123520243967718315330178025957095502546813929290333264120223168\",\n  \"16845753148201777192406958674202574751725237939980634861948953189320362207797\",\n  \"4622170486584704769521001011395820886029808520586507873417553166762370293671\",\n  \"16688277490485052681847773549197928630624828392248424077804829676011512392564\",\n  \"11878652861183667748838188993669912629573713271883125458838494308957689090959\",\n  \"2436445725746972287496138382764643208791713986676129260589667864467010129482\",\n  \"1888098689545151571063267806606510032698677328923740058080630641742325067877\",\n  \"148924106504065664829055598316821983869409581623245780505601526786791681102\",\n  \"18875020877782404439294079398043479420415331640996249745272087358069018086569\",\n  \"15189693413320228845990326214136820307649565437237093707846682797649429515840\",\n  \"19669450123472657781282985229369348220906547335081730205028099210442632534079\",\n  \"5521922218264623411380547905210139511350706092570900075727555783240701821773\",\n  \"4144769320246558352780591737261172907511489963810975650573703217887429086546\",\n  \"10097732913112662248360143041019433907849917041759137293018029019134392559350\",\n  \"1720059427972723034107765345743336447947522473310069975142483982753181038321\",\n  \"6302388219880227251325608388535181451187131054211388356563634768253301290116\",\n  \"6745410632962119604799318394592010194450845483518862700079921360015766217097\",\n  \"10858157235265583624235850660462324469799552996870780238992046963007491306222\",\n  \"20241898894740093733047052816576694435372877719072347814065227797906130857593\",\n  \"10165780782761211520836029617746977303303335603838343292431760011576528327409\",\n  \"2832093654883670345969792724123161241696170611611744759675180839473215203706\",\n  \"153011722355526826233082383360057587249818749719433916258246100068258954737\",\n  \"20196970640587451358539129330170636295243141659030208529338914906436009086943\",\n  \"3180973917010545328313139835982464870638521890385603025657430208141494469656\",\n  \"17198004293191777441573635123110935015228014028618868252989374962722329283022\",\n  \"7642160509228669138628515458941659189680509753651629476399516332224325757132\",\n  \"19346204940546791021518535594447257347218878114049998691060016493806845179755\",\n  \"11501810868606870391127866188394535330696206817602260610801897042898616817272\",\n  \"3113973447392053821824427670386252797811804954746053461397972968381571297505\",\n  \"6545064306297957002139416752334741502722251869537551068239642131448768236585\",\n  \"5203908808704813498389265425172875593837960384349653691918590736979872578408\",\n  \"2246692432011290582160062129070762007374502637007107318105405626910313810224\",\n  \"11760570435432189127645691249600821064883781677693087773459065574359292849137\",\n  \"5543749482491340532547407723464609328207990784853381797689466144924198391839\",\n  \"8837549193990558762776520822018694066937602576881497343584903902880277769302\",\n  \"12855514863299373699594410385788943772765811961581749194183533625311486462501\",\n  \"5363660674689121676875069134269386492382220935599781121306637800261912519729\",\n  \"13162342403579303950549728848130828093497701266240457479693991108217307949435\",\n  \"916941639326869583414469202910306428966657806899788970948781207501251816730\",\n  \"15618589556584434434009868216186115416835494805174158488636000580759692174228\",\n  \"8959562060028569701043973060670353733575345393653685776974948916988033453971\",\n  \"16390754464333401712265575949874369157699293840516802426621216808905079127650\",\n  \"168282396747788514908709091757591226095443902501365500003618183905496160435\",\n  \"8327443473179334761744301768309008451162322941906921742120510244986704677004\",\n  \"17213012626801210615058753489149961717422101711567228037597150941152495100640\",\n  \"10394369641533736715250242399198097296122982486516256408681925424076248952280\",\n  \"17784386835392322654196171115293700800825771210400152504776806618892170162248\",\n  \"16533189939837087893364000390641148516479148564190420358849587959161226782982\",\n  \"18725396114211370207078434315900726338547621160475533496863298091023511945076\",\n  \"7132325028834551397904855671244375895110341505383911719294705267624034122405\",\n  \"148317947440800089795933930720822493695520852448386394775371401743494965187\",\n  \"19001050671757720352890779127693793630251266879994702723636759889378387053056\",\n  \"18824274411769830274877839365728651108434404855803844568234862945613766611460\",\n  \"12771414330193951156383998390424063470766226667986423961689712557338777174205\",\n  \"11332046574800279729678603488745295198038913503395629790213378101166488244657\",\n  \"9607550223176946388146938069307456967842408600269548190739947540821716354749\",\n  \"8756385288462344550200229174435953103162307705310807828651304665320046782583\",\n  \"176061952957067086877570020242717222844908281373122372938833890096257042779\",\n  \"12200212977482648306758992405065921724409841940671166017620928947866825250857\",\n  \"10868453624107875516866146499877130701929063632959660262366632833504750028858\",\n  \"2016095394399807253596787752134573207202567875457560571095586743878953450738\",\n  \"21815578223768330433802113452339488275704145896544481092014911825656390567514\",\n  \"4923772847693564777744725640710197015181591950368494148029046443433103381621\",\n  \"1813584943682214789802230765734821149202472893379265320098816901270224589984\",\n  \"10810123816265612772922113403831964815724109728287572256602010709288980656498\",\n  \"1153669123397255702524721206511185557982017410156956216465120456256288427021\",\n  \"5007518659266430200134478928344522649876467369278722765097865662497773767152\",\n  \"2511432546938591792036639990606464315121646668029252285288323664350666551637\",\n  \"32883284540320451295484135704808083452381176816565850047310272290579727564\",\n  \"10484856914279112612610993418405543310546746652738541161791501150994088679557\",\n  \"2026733759645519472558796412979210009170379159866522399881566309631434814953\",\n  \"14731806221235869882801331463708736361296174006732553130708107037190460654379\",\n  \"14740327483193277147065845135561988641238516852487657117813536909482068950652\",\n  \"18787428285295558781869865751953016580493190547148386433580291216673009884554\",\n  \"3804047064713122820157099453648459188816376755739202017447862327783289895072\",\n  \"16709604795697901641948603019242067672006293290826991671766611326262532802914\",\n  \"11061717085931490100602849654034280576915102867237101935487893025907907250695\",\n  \"2821730726367472966906149684046356272806484545281639696873240305052362149654\",\n  \"17467794879902895769410571945152708684493991588672014763135370927880883292655\",\n  \"1571520786233540988201616650622796363168031165456869481368085474420849243232\",\n  \"10041051776251223165849354194892664881051125330236567356945669006147134614302\",\n  \"3981753758468103976812813304477670033098707002886030847251581853700311567551\",\n  \"4365864398105436789177703571412645548020537580493599380018290523813331678900\",\n  \"2391801327305361293476178683853802679507598622000359948432171562543560193350\",\n  \"214219368547551689972421167733597094823289857206402800635962137077096090722\",\n  \"18192064100315141084242006659317257023098826945893371479835220462302399655674\",\n  \"15487549757142039139328911515400805508248576685795694919457041092150651939253\",\n  \"10142447197759703415402259672441315777933858467700579946665223821199077641122\",\n  \"11246573086260753259993971254725613211193686683988426513880826148090811891866\",\n  \"6574066859860991369704567902211886840188702386542112593710271426704432301235\",\n  \"11311085442652291634822798307831431035776248927202286895207125867542470350078\",\n  \"20977948360215259915441258687649465618185769343138135384346964466965010873779\",\n  \"792781492853909872425531014397300057232399608769451037135936617996830018501\",\n  \"5027602491523497423798779154966735896562099398367163998686335127580757861872\",\n  \"14595204575654316237672764823862241845410365278802914304953002937313300553572\",\n  \"13973538843621261113924259058427434053808430378163734641175100160836376897004\",\n  \"16395063164993626722686882727042150241125309409717445381854913964674649318585\",\n  \"8465768840047024550750516678171433288207841931251654898809033371655109266663\",\n  \"21345603324471810861925019445720576814602636473739003852898308205213912255830\",\n  \"21171984405852590343970239018692870799717057961108910523876770029017785940991\",\n  \"10761027113757988230637066281488532903174559953630210849190212601991063767647\",\n  \"6678298831065390834922566306988418588227382406175769592902974103663687992230\",\n  \"4993662582188632374202316265508850988596880036291765531885657575099537176757\",\n  \"18364168158495573675698600238443218434246806358811328083953887470513967121206\",\n  \"3506345610354615013737144848471391553141006285964325596214723571988011984829\",\n  \"248732676202643792226973868626360612151424823368345645514532870586234380100\",\n  \"10090204501612803176317709245679152331057882187411777688746797044706063410969\",\n  \"21297149835078365363970699581821844234354988617890041296044775371855432973500\",\n  \"16729368143229828574342820060716366330476985824952922184463387490091156065099\",\n  \"4467191506765339364971058668792642195242197133011672559453028147641428433293\",\n  \"8677548159358013363291014307402600830078662555833653517843708051504582990832\",\n  \"1022951765127126818581466247360193856197472064872288389992480993218645055345\",\n  \"1888195070251580606973417065636430294417895423429240431595054184472931224452\",\n  \"4221265384902749246920810956363310125115516771964522748896154428740238579824\",\n  \"2825393571154632139467378429077438870179957021959813965940638905853993971879\",\n  \"19171031072692942278056619599721228021635671304612437350119663236604712493093\",\n  \"10780807212297131186617505517708903709488273075252405602261683478333331220733\",\n  \"18230936781133176044598070768084230333433368654744509969087239465125979720995\",\n  \"16901065971871379877929280081392692752968612240624985552337779093292740763381\",\n  \"146494141603558321291767829522948454429758543710648402457451799015963102253\",\n  \"2492729278659146790410698334997955258248120870028541691998279257260289595548\",\n  \"2204224910006646535594933495262085193210692406133533679934843341237521233504\",\n  \"16062117410185840274616925297332331018523844434907012275592638570193234893570\",\n  \"5894928453677122829055071981254202951712129328678534592916926069506935491729\",\n  \"4947482739415078212217504789923078546034438919537985740403824517728200332286\",\n  \"16143265650645676880461646123844627780378251900510645261875867423498913438066\",\n  \"397690828254561723549349897112473766901585444153303054845160673059519614409\",\n  \"11272653598912269895509621181205395118899451234151664604248382803490621227687\",\n  \"15566927854306879444693061574322104423426072650522411176731130806720753591030\",\n  \"14222898219492484180162096141564251903058269177856173968147960855133048449557\",\n  \"16690275395485630428127725067513114066329712673106153451801968992299636791385\",\n  \"3667030990325966886479548860429670833692690972701471494757671819017808678584\",\n  \"21280039024501430842616328642522421302481259067470872421086939673482530783142\",\n  \"15895485136902450169492923978042129726601461603404514670348703312850236146328\",\n  \"7733050956302327984762132317027414325566202380840692458138724610131603812560\",\n  \"438123800976401478772659663183448617575635636575786782566035096946820525816\",\n  \"814913922521637742587885320797606426167962526342166512693085292151314976633\",\n  \"12368712287081330853637674140264759478736012797026621876924395982504369598764\",\n  \"2494806857395134874309386694756263421445039103814920780777601708371037591569\",\n  \"16101132301514338989512946061786320637179843435886825102406248183507106312877\",\n  \"6252650284989960032925831409804233477770646333900692286731621844532438095656\",\n  \"9277135875276787021836189566799935097400042171346561246305113339462708861695\",\n  \"10493603554686607050979497281838644324893776154179810893893660722522945589063\",\n  \"8673089750662709235894359384294076697329948991010184356091130382437645649279\",\n  \"9558393272910366944245875920138649617479779893610128634419086981339060613250\",\n  \"19012287860122586147374214541764572282814469237161122489573881644994964647218\",\n  \"9783723818270121678386992630754842961728702994964214799008457449989291229500\",\n  \"15550788416669474113213749561488122552422887538676036667630838378023479382689\",\n  \"15016165746156232864069722572047169071786333815661109750860165034341572904221\",\n  \"6506225705710197163670556961299945987488979904603689017479840649664564978574\",\n  \"10796631184889302076168355684722130903785890709107732067446714470783437829037\",\n  \"19871836214837460419845806980869387567383718044439891735114283113359312279540\",\n  \"20871081766843466343749609089986071784031203517506781251203251608363835140622\",\n  \"5100105771517691442278432864090229416166996183792075307747582375962855820797\",\n  \"8777887112076272395250620301071581171386440850451972412060638225741125310886\",\n  \"5300440870136391278944213332144327695659161151625757537632832724102670898756\",\n  \"1205448543652932944633962232545707633928124666868453915721030884663332604536\",\n  \"5542499997310181530432302492142574333860449305424174466698068685590909336771\",\n  \"11028094245762332275225364962905938096659249161369092798505554939952525894293\",\n  \"19187314764836593118404597958543112407224947638377479622725713735224279297009\",\n  \"17047263688548829001253658727764731047114098556534482052135734487985276987385\",\n  \"19914849528178967155534624144358541535306360577227460456855821557421213606310\",\n  \"2929658084700714257515872921366736697080475676508114973627124569375444665664\",\n  \"15092262360719700162343163278648422751610766427236295023221516498310468956361\",\n  \"21578580340755653236050830649990190843552802306886938815497471545814130084980\",\n  \"1258781501221760320019859066036073675029057285507345332959539295621677296991\",\n  \"3819598418157732134449049289585680301176983019643974929528867686268702720163\",\n  \"8653175945487997845203439345797943132543211416447757110963967501177317426221\",\n  \"6614652990340435611114076169697104582524566019034036680161902142028967568142\",\n  \"19212515502973904821995111796203064175854996071497099383090983975618035391558\",\n  \"18664315914479294273286016871365663486061896605232511201418576829062292269769\",\n  \"11498264615058604317482574216318586415670903094838791165247179252175768794889\",\n  \"10814026414212439999107945133852431304483604215416531759535467355316227331774\",\n  \"17566185590731088197064706533119299946752127014428399631467913813769853431107\",\n  \"14016139747289624978792446847000951708158212463304817001882956166752906714332\",\n  \"8242601581342441750402731523736202888792436665415852106196418942315563860366\",\n  \"9244680976345080074252591214216060854998619670381671198295645618515047080988\",\n  \"12216779172735125538689875667307129262237123728082657485828359100719208190116\",\n  \"10702811721859145441471328511968332847175733707711670171718794132331147396634\",\n  \"6479667912792222539919362076122453947926362746906450079329453150607427372979\",\n  \"15117544653571553820496948522381772148324367479772362833334593000535648316185\",\n  \"6842203153996907264167856337497139692895299874139131328642472698663046726780\",\n  \"12732823292801537626009139514048596316076834307941224506504666470961250728055\",\n  \"6936272626871035740815028148058841877090860312517423346335878088297448888663\",\n  \"17297554111853491139852678417579991271009602631577069694853813331124433680030\",\n  \"16641596134749940573104316021365063031319260205559553673368334842484345864859\",\n  \"7400481189785154329569470986896455371037813715804007747228648863919991399081\",\n  \"2273205422216987330510475127669563545720586464429614439716564154166712854048\",\n  \"15162538063742142685306302282127534305212832649282186184583465569986719234456\",\n  \"5628039096440332922248578319648483863204530861778160259559031331287721255522\",\n  \"16085392195894691829567913404182676871326863890140775376809129785155092531260\",\n  \"14227467863135365427954093998621993651369686288941275436795622973781503444257\",\n  \"18224457394066545825553407391290108485121649197258948320896164404518684305122\",\n  \"274945154732293792784580363548970818611304339008964723447672490026510689427\",\n  \"11050822248291117548220126630860474473945266276626263036056336623671308219529\",\n  \"2119542016932434047340813757208803962484943912710204325088879681995922344971\",\n  \"0\",\n].map((n) => bigInt(n));\n\nclass FeistelState {\n  l: BigInteger;\n  r: BigInteger;\n  rounds: number;\n  k: BigInteger;\n\n  constructor(rounds: number, k: BigInteger) {\n    this.l = bigInt(0);\n    this.r = bigInt(0);\n    this.rounds = rounds;\n    this.k = k;\n  }\n\n  inject(elt: BigInteger): void {\n    this.l = this.l.add(elt).mod(p);\n  }\n\n  mix(): void {\n    for (let i = 0; i < this.rounds - 1; i++) {\n      const t = this.k.add(this.l).add(c[i]).mod(p);\n      const lNew = t.modPow(5, p).add(this.r).mod(p);\n      this.r = this.l;\n      this.l = lNew;\n    }\n    const t = this.k.add(this.l).mod(p);\n    this.r = t.modPow(5, p).add(this.r).mod(p);\n  }\n}\n\nfunction mimcSponge(\n  inputs: BigInteger[],\n  nOutputs: number,\n  rounds: number,\n  key: number\n): BigInteger[] {\n  const state = new FeistelState(rounds, bigInt(key));\n  for (const elt of inputs) {\n    state.inject(elt);\n    state.mix();\n  }\n  const outputs: BigInteger[] = [state.l];\n  for (let i = 0; i < nOutputs - 1; i++) {\n    state.mix();\n    outputs.push(state.l);\n  }\n  return outputs;\n}\n\nexport const modPBigInt = (x: number) => {\n  let ret = bigInt(x).mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n};\n\nexport const modPBigIntNative = (x: BigInteger) => {\n  let ret = x.mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n};\n\nexport const mimcWithRounds = (rounds: number, key: number) => (\n  ...inputs: number[]\n) =>\n  mimcSponge(\n    inputs.map((n) => modPBigInt(n)),\n    1,\n    rounds,\n    key\n  )[0];\n\nconst mimcHash = mimcWithRounds(220, KEY);\n\nexport const spaceTypeHash = mimcWithRounds(4, KEY);\nexport const biomeHash = mimcWithRounds(4, BIOME_KEY);\n\nexport default mimcHash;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport mimcHash from \"./mimc.ts\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nconsole.log(\n  mimcHash(\n    803469022129495137770981046170581301261101496891396417650688,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}