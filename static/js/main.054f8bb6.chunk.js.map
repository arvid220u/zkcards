{"version":3,"sources":["assert.js","utils.js","p2p.js","cards.js","config.js","snarks.js","mimc.ts","rules.js","tokens.js","logic.js","Chat.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["assert","condition","error_m","console","error","utils","shuffle","array","rng","temporaryValue","randomIndex","currentIndex","length","Math","floor","compileUserRule","rule","a","ruleLength","constructFunction","funcRule","compiledRule","Array","fill","BigInt","card2","card1","lastcard","evaluateFuncRule","val","computeBitNumber","bitNum","populateBit","random","log","i","concat","code","eval","SyntaxError","alert","message","bitInIndex","unimplemented","hash","encoder","TextEncoder","data","encode","crypto","subtle","digest","hashBuffer","hashArray","from","Uint8Array","hashHex","map","b","toString","padStart","join","objectify","obj","JSON","parse","stringify","_","value","RTC_CONFIG","iceServers","urls","onOpen","conn","messageHandlers","type","indx","onMessage","e","addMessageHandler","handler","messageHandlersIndx","parseInt","removeMessageHandler","key","send","json","dc","encodeKey","btoa","replace","decodeKey","str","slice","atob","RANK","RANKS","SUITS","VOID_CARD","shuffledDeck","startFromRankIndex","deck","suit_index","index","suit","rank_index","rank","push","orderedDeck","serializeCard","card","firstChar","charCodeAt","secondChar","String","fromCharCode","computeCardIndex","serializeCardASCII","charAt","toUpperCase","sameCard","c1","c2","pathToSnarks","prove","circuitInput","circuitName","snarkjs","fullProve","verify","publicSignals","proof","fetch","then","res","catch","err","vKey","p","bigInt","c","n","FeistelState","rounds","k","l","r","this","elt","add","mod","lNew","modPow","t","mimcSponge","inputs","nOutputs","state","inject","mix","outputs","modPBigInt","x","ret","lesser","mimcWithRounds","mimcHash","EVERYONE","createPrivateRule","name","source","owner","penalty","compileSource","compiled","publicRule","sameRule","r1","r2","determinePenalties","playedCards","hand","selectedRules","myRules","reportStatus","rulesActedUpon","answer","entries","status","computeSnarkProveInput","snarkInput","response","snarks","userAction","src","gameState","ruleHash","INCORRECT_PENALTIES","verifyPenalties","provedRules","verifyPublicSignals","TOKEN_STATE","TOKEN_STATE_BIT","createTokenState","players","tokenState","tokenHashes","myTokens","initialTokens","tokenStats","user","tokenNumToHash","tokenListToNum","tokens","tokenPower","id","num","pwr3","tokenStateToBit","Object","keys","includes","tokenNum","numCards","salt","tokenIdToPower","tokenId","filter","serializeTokens","draw","salt1","salt2","seed","opponentRandomness","nonce","userId","publicInput","oldCardstate","oldNumCardsInDeck","publicOutput","newCardState","newNumCardsInDeck","privateInput","privateOutput","newTokenHash","oldTokenHash","power","round","INCORRECTLY_DRAWN_TOKEN","verifyDrawnToken","drawnToken","previousHash","verification","newHash","play","token","userID","input","cardNumber","oldCardState","tok","INCORRECTLY_PLAYED_TOKEN","verifyPlayedToken","playedToken","tokenID","PHASE","SETUP","PLAY","GAMEOVER","ABORT","PHASES","values","SETUP_STATE","PRE_READY","SENT_READY","SENT_START","PLAY_STATE","WAIT_FOR_PLAY","WAIT_FOR_PLAYACK","METHOD","READY","START","PLAYACK","FINALIZE","METHODS","METHOD_HANDLER","game","m","phase","abort","readyHashes","maybeSendStart","update","createGame","listeners","listenerIndex","substr","allRules","numRounds","playerRandoms","prevSalt","initPhase","setUpPublicRules","rules","resetPhase","args","startNumbers","myRandom","sort","nextTurn","playerHands","users","cards","acksReceived","lastPlayedCard","lastPlayedUser","lastSelectedRules","penaltyRules","snarkStatus","winner","sentFinalize","finalizedReceived","readyToRestart","didDrawTokens","drawnTokens","compilingRule","addListener","listener","removeListener","randomNumber","randomNumberHash","maybeStartGame","some","legalToPlayCard","userRulesHashes","provedRulesHashes","penalties","recordPenalties","actuallyPlayCard","sendPlayAck","maybeStopWaitingForAcks","maybeFinishFinalize","reason","method","playCard","isMyTurn","every","updateSnarkStatus","sendReady","hash_r","j","bottomCard","splice","totalPenalty","reduce","acc","v","enforcePenalties","checkIfWon","numtokens","myAwardedTokens","newSalt","updateTokenSnarkStatus","getOppUserId","finalRandomNumber","forEach","seedrandom","startGame","submitRule","selectedToken","rulethings","sendStart","getMyUserId","getMyHand","getOppHand","playerHand","isMyTurnEnabled","getPlayedCards","getWinner","getRules","getMyTokens","isReadyToRestart","isReadyToDrawTokens","desiredamt","numtokensleft","min","myAvailableTokens","canSubmitRule","getSnarkStatus","getTokenSnarkStatus","methods","handlers","Chat","props","useState","chatMessage","setChatMessage","messages","setMessages","onSendMessage","connRef","current","newMessage","oldm","useEffect","p2p","onChange","target","onKeyUp","placeholder","onClick","style","whiteSpace","color","Setup","Play","logic","gameRef","setPlayedCards","myHand","setMyHand","oppHand","setOppHand","myUserId","setMyUserId","oppUserId","setOppUserId","selectedCard","setSelectedCard","myTurn","setMyTurn","setSelectedRules","setSnarkStatus","changeCard","useCallback","currentTarget","toggleRule","updateGameState","Hand","PlayedCards","MyHand","SelectRule","PlayButton","disabled","cardstr","secondCharSpades","diff","pass","Loading","text","marginTop","marginBottom","className","Fragment","checked","htmlFor","margin","Deck","SelectableDeck","fontSize","cursor","GameOver","setWinner","setReadyToRestart","endedWithCards","setEndedWithCards","readyToDrawTokens","setReadyToDrawTokens","nTokens","setNtokens","setMyAvailableTokens","canSubmit","setCanSubmit","CreateRule","setRule","setSelectedToken","ruleName","setRuleName","zeroTokens","width","height","Rules","Rule","title","Tokens","tokenStock","Game","setPhase","setRules","setTokens","Create1","setOffer","setMyOffer","pc","signalingState","createDataChannel","onopen","onmessage","createOffer","d","setLocalDescription","onicecandidate","candidate","localDescription","Create2","joinKey","setJoinKey","onAddPlayer","answerDesc","RTCSessionDescription","setRemoteDescription","offer","Join1","onJoin","setAnswer","offerDesc","createAnswer","setMyAnswer","Join2","Welcome","href","Lobby","numConn","setNumConn","myOffer","myAnswer","App","inSetup","setInSetup","useRef","RTCPeerConnection","ondatachannel","channel","oniceconnectionstatechange","iceConnectionState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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Kc,OAAO,GAAGC,cAWlC,SAASC,EAASC,EAAIC,GAC3B,OAAID,IAAOvB,GAAawB,IAAOxB,EACtBuB,IAAOvB,GAAawB,IAAOxB,EAC7BuB,EAAGlB,QAAUmB,EAAGnB,MC1IlB,I,QCCDoB,EAAe,YASd,SAAeC,EAAtB,oC,4CAAO,WAAqBC,EAAcC,GAAnC,SAAA7G,EAAA,6DACLd,QAAQ+B,IAAI2F,GACZ1H,QAAQ+B,IAAI4F,GAFP,SAGQC,IAAgBC,UAC3BH,EACAF,EAAavF,OAAO0F,EAAa,kCACjCH,EAAavF,OAAO0F,EAAa,6BAN9B,oF,sBAmBA,SAAeG,EAAtB,sC,4CAAO,WAAsBH,EAAaI,EAAeC,GAAlD,eAAAlH,EAAA,sEACcmH,MACjBT,EAAavF,OAAO0F,EAAa,gCAEhCO,MAAK,SAACC,GAAD,OAASA,EAAIhD,UAClBiD,OAAM,SAACC,GAAD,OAAShG,MAAMgG,MALnB,cACCC,EADD,gBAMQV,IAAgBE,OAAOQ,EAAMP,EAAeC,GANpD,oF,yDCzBMO,EAAIC,IACf,iFAMIC,EAAI,CACR,IACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,8EACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,8EACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,+EACA,8EACA,gFACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,8EACA,gFACA,+EACA,gFACA,8EACA,+EACA,gFACA,gFACA,gFACA,gFACA,gFACA,+EACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,+EACA,8EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,+EACA,6EACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,+EACA,+EACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,8EACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,8EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,8EACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,8EACA,8EACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,gFACA,8EACA,gFACA,+EACA,KACAnF,KAAI,SAACoF,GAAD,OAAOF,IAAOE,MAEdC,E,WAMJ,WAAYC,EAAgBC,GAAgB,yBAL5CC,OAK2C,OAJ3CC,OAI2C,OAH3CH,YAG2C,OAF3CC,OAE2C,EACzCG,KAAKF,EAAIN,IAAO,GAChBQ,KAAKD,EAAIP,IAAO,GAChBQ,KAAKJ,OAASA,EACdI,KAAKH,EAAIA,E,mDAGJI,GACLD,KAAKF,EAAIE,KAAKF,EAAEI,IAAID,GAAKE,IAAIZ,K,4BAI7B,IAAK,IAAIvG,EAAI,EAAGA,EAAIgH,KAAKJ,OAAS,EAAG5G,IAAK,CACxC,IACMoH,EADIJ,KAAKH,EAAEK,IAAIF,KAAKF,GAAGI,IAAIT,EAAEzG,IAAImH,IAAIZ,GAC5Bc,OAAO,EAAGd,GAAGW,IAAIF,KAAKD,GAAGI,IAAIZ,GAC5CS,KAAKD,EAAIC,KAAKF,EACdE,KAAK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","file":"static/js/main.054f8bb6.chunk.js","sourcesContent":["import * as utils from \"./utils.js\";\n\nexport default function assert(condition, error_m) {\n  if (condition) return;\n  console.error(\"assertion failed\");\n  console.error(utils.objectify(error_m));\n}\n","/* global BigInt */\nimport assert from \"./assert.js\";\n\nexport function shuffle(array, rng) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\nexport async function compileUserRule(rule) {\n  const ruleLength = 30;\n  let funcRule = await constructFunction(rule);\n  let compiledRule = new Array(ruleLength).fill(BigInt(0));\n  for (var card2 = 0; card2 < 53; card2++) {\n    for (var card1 = 0; card1 < 53; card1++) {\n      for (var lastcard = 0; lastcard < 2; lastcard++) {\n        let val = await evaluateFuncRule(\n          funcRule,\n          lastcard === 1,\n          card1,\n          card2\n        );\n        let bitNum = await computeBitNumber(lastcard === 1, card1, card2);\n        if (val) {\n          await populateBit(compiledRule, bitNum);\n        }\n      }\n    }\n  }\n  compiledRule[29] = BigInt(Math.floor(1000000 * Math.random()));\n  console.log(\"result of compiling \" + rule + \"is\");\n  for (var i = 0; i < 30; i++) {\n    compiledRule[i] = `${compiledRule[i]}`;\n  }\n  console.log(compiledRule);\n  return compiledRule;\n}\n\nasync function constructFunction(rule) {\n  let prefix = \"async function f(lastcard, card1, card2){\\n\";\n  let suffix = \"\\n}\";\n  return prefix.concat(rule).concat(suffix);\n}\n\nasync function evaluateFuncRule(funcRule, lastcard, card1, card2) {\n  let code = funcRule + `\\nf(${lastcard},${card1},${card2});`;\n  try {\n    return eval(code);\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      alert(e.message);\n    }\n  }\n}\nasync function computeBitNumber(lastcard, card1, card2) {\n  return lastcard + 2 * card1 + 2 * 53 * card2;\n}\nasync function populateBit(compiledRule, bitNum) {\n  let bitInIndex = bitNum % 200;\n  let numberIndex = (bitNum - bitInIndex) / 200;\n  compiledRule[numberIndex] += BigInt(2) ** BigInt(bitInIndex);\n}\n\nexport function unimplemented() {\n  assert(false, \"not implemented yet!!\");\n}\n\nexport async function hash(message) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n\nexport function objectify(obj) {\n  return JSON.parse(\n    JSON.stringify(\n      obj,\n      (_, value) => (typeof value === \"bigint\" ? value.toString() : value) // return everything else unchanged\n    )\n  );\n}\n","const RTC_CONFIG = {\n  iceServers: [\n    { urls: [\"stun:stun.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"] },\n  ],\n};\n\n// var haveGum = navigator.mediaDevices\n//   .getUserMedia({ video: true, audio: true })\n//   .catch(console.log);\n\nexport function createConn() {\n  let conn = {\n    pc: new RTCPeerConnection(RTC_CONFIG),\n    dc: null,\n    messageHandlers: {},\n    messageHandlersIndx: \"0\",\n  };\n  conn.pc.ondatachannel = (e) => {\n    conn.dc = e.channel;\n    conn.dc.onopen = () => onOpen(conn);\n    conn.dc.onmessage = (e) => onMessage(conn, e);\n  };\n  conn.pc.oniceconnectionstatechange = (e) =>\n    console.log(conn.pc.iceConnectionState);\n  return conn;\n}\n\nfunction onOpen(conn) {\n  console.log(\"opened chat!!\");\n  console.log(conn.messageHandlers);\n  const data = { type: \"info\", value: \"successfully opened connection!!\" };\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nfunction onMessage(conn, e) {\n  console.log(\"received message!\");\n  console.log(conn.messageHandlers);\n  let data = JSON.parse(e.data);\n  console.log(data);\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nexport function addMessageHandler(conn, handler) {\n  const indx = conn.messageHandlersIndx;\n  conn.messageHandlers[indx] = handler;\n  conn.messageHandlersIndx = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeMessageHandler(conn, key) {\n  if (!conn) return;\n  console.log(`removing key ${key} from conn ${conn}`);\n  delete conn.messageHandlers[key];\n}\n\nexport function sendMessage(conn, message) {\n  send(conn, { type: \"message\", message: message });\n}\nexport function sendData(conn, data) {\n  send(conn, { type: \"data\", ...data });\n}\nexport function send(conn, json) {\n  conn.dc.send(JSON.stringify(json));\n}\n\nexport function createOffer(conn, setOffer) {\n  console.log(\"create offer\");\n  console.log(conn.pc.signalingState);\n  conn.dc = conn.pc.createDataChannel(\"chat\");\n\n  conn.dc.onopen = () => onOpen(conn);\n  conn.dc.onmessage = (e) => onMessage(conn, e);\n\n  // haveGum\n  //   .then(() => conn.pc.createOffer())\n  conn.pc\n    .createOffer()\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setOffer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nfunction encodeKey(json) {\n  return btoa(json).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction decodeKey(key) {\n  let str = key;\n  if (str.length % 4 !== 0) {\n    str += \"===\".slice(0, 4 - (str.length % 4));\n  }\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return atob(str);\n}\n\nexport function join(conn, joinKey, setAnswer) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  let offerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n\n  conn.pc\n    .setRemoteDescription(offerDesc)\n    .then(() => conn.pc.createAnswer())\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setAnswer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nexport function acceptAnswer(conn, joinKey) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  var answerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n  conn.pc.setRemoteDescription(answerDesc).catch(console.log);\n}\n\nexport function numConnections(conn) {\n  // TODO: update this for many players\n  return 1;\n}\n","import * as utils from \"./utils.js\";\n\nexport const RANK = {\n  ACE: \"A\",\n  TWO: \"2\",\n  THREE: \"3\",\n  FOUR: \"4\",\n  FIVE: \"5\",\n  SIX: \"6\",\n  SEVEN: \"7\",\n  EIGHT: \"8\",\n  NINE: \"9\",\n  TEN: \"10\",\n  JACK: \"J\",\n  QUEEN: \"Q\",\n  KING: \"K\",\n};\nexport const RANKS = [\n  RANK.ACE,\n  RANK.TWO,\n  RANK.THREE,\n  RANK.FOUR,\n  RANK.FIVE,\n  RANK.SIX,\n  RANK.SEVEN,\n  RANK.EIGHT,\n  RANK.NINE,\n  RANK.TEN,\n  RANK.JACK,\n  RANK.QUEEN,\n  RANK.KING,\n]; // dont do Object.values because we want to guarantee order\nexport const SUIT = {\n  SPADES: \"spades\",\n  HEARTS: \"hearts\",\n  DIAMONDS: \"diamonds\",\n  CLUBS: \"clubs\",\n};\nexport const SUITS = [SUIT.SPADES, SUIT.HEARTS, SUIT.DIAMONDS, SUIT.CLUBS]; // dont do Object.values because we want to guarantee order\n\nexport const VOID_CARD = \"VOID_CARD\";\n\n//      card is represented by {rank:, suit:} (why no types :(((()))))\n\nexport function orderedDeck(startFromRankIndex) {\n  if (!startFromRankIndex) startFromRankIndex = 0;\n  let deck = [];\n  let suit_index = 0;\n  let index = 0;\n  for (const suit of SUITS) {\n    let rank_index = 0;\n    for (const rank of RANKS) {\n      if (rank_index >= startFromRankIndex) {\n        deck.push({ rank, suit, rank_index, suit_index, index });\n      }\n      rank_index++;\n      index++;\n    }\n    suit_index++;\n  }\n  return deck;\n}\n\nexport function shuffledDeck(rng, startFromRankIndex) {\n  let deck = orderedDeck(startFromRankIndex);\n  return utils.shuffle(deck, rng);\n}\n\n// users: list of IDs for each user who wants a card\n// return: an object {user_id -> array of cards}, as even as possible, union is all cards, disjoint\nexport function dealShuffledCards(users, rng, startFromRankIndex) {\n  let deck = shuffledDeck(rng, startFromRankIndex);\n  let cards = {};\n  let index = 0;\n  for (const user of users) {\n    cards[user] = [];\n  }\n  while (index < deck.length) {\n    for (const user of users) {\n      cards[user].push(deck[index]);\n      index++;\n    }\n  }\n  return cards;\n}\n\nexport function serializeCard(card) {\n  const aceOfSpades = \"🂡\";\n  const firstChar = aceOfSpades.charCodeAt(0);\n  const secondChar = aceOfSpades.charCodeAt(1);\n  return (\n    String.fromCharCode(firstChar) +\n    String.fromCharCode(\n      secondChar +\n        card.rank_index +\n        card.suit_index * 16 +\n        (card.rank === RANK.QUEEN || card.rank === RANK.KING ? 1 : 0)\n    )\n  );\n}\nexport function deserializeCard(cardstr) {\n  const aceOfSpades = \"🂡\";\n  const secondCharSpades = aceOfSpades.charCodeAt(1);\n  const secondChar = cardstr.charCodeAt(1);\n  const diff = secondChar - secondCharSpades;\n  const suit_index = Math.floor(diff / 16);\n  let rank_index = diff % 16;\n  if (rank_index >= 12) {\n    rank_index--;\n  }\n  return {\n    suit: SUITS[suit_index],\n    rank: RANKS[rank_index],\n    suit_index,\n    rank_index,\n    index: suit_index * 13 + rank_index,\n  };\n}\n\nexport function computeCardIndex(card) {\n  return card === VOID_CARD ? 52 : card.index;\n}\n\nexport function serializeCardASCII(card) {\n  return card.rank + card.suit.charAt(0).toUpperCase();\n}\n\nexport function serializeDeck(deck) {\n  let deckstr = \"\";\n  for (const card of deck) {\n    deckstr += serializeCard(card);\n  }\n  return deckstr;\n}\n\nexport function sameCard(c1, c2) {\n  if (c1 === VOID_CARD || c2 === VOID_CARD)\n    return c1 === VOID_CARD && c2 === VOID_CARD;\n  return c1.index === c2.index;\n}\n","export const START_FROM_RANK = 12;\n\nexport const NUM_CLEAN_SLATE_RULES = 0;\n","import * as snarkjs from \"snarkjs\";\nconst pathToSnarks = \"circuits/\";\n/*\n *params:\n * circuitInput: an Object that maps the circuit input to their values (write integers as strings)\n * circuitName: name of the circuit, this project has three circuits:\n *    playCards, maoRules, drawcardsprivately\n *output:\n * An object containing the proof and public signals\n */\nexport async function prove(circuitInput, circuitName) {\n  console.log(circuitInput);\n  console.log(circuitName);\n  return await snarkjs.groth16.fullProve(\n    circuitInput,\n    pathToSnarks.concat(circuitName, \"/compiled-circuit/circuit.wasm\"),\n    pathToSnarks.concat(circuitName, \"/keys/circuit_final.zkey\")\n  );\n}\n\n/*\n *params:\n * circuitName: name of the circuit, this project has three circuits:\n *     playCards, maoRules, drawcardsprivately\n * publicSignals: the public signal outputted by the circuit\n * proof: the proof outputted by the circuit\n *output:\n * A boolean specifying whether the proof is correct\n */\nexport async function verify(circuitName, publicSignals, proof) {\n  const vKey = await fetch(\n    pathToSnarks.concat(circuitName, \"/keys/verification_key.json\")\n  )\n    .then((res) => res.json())\n    .catch((err) => alert(err));\n  return await snarkjs.groth16.verify(vKey, publicSignals, proof);\n}\n","//credit to https://github.com/darkforest-eth/client/blob/master/src/miner/mimc.ts\nimport bigInt from \"big-integer\";\nimport { BigInteger } from \"big-integer\";\n\nexport const p = bigInt(\n  \"21888242871839275222246405745257275088548364400416034343698204186575808495617\"\n);\n\nconst KEY = 0;\nconst BIOME_KEY = 8;\n\nconst c = [\n  \"0\",\n  \"7120861356467848435263064379192047478074060781135320967663101236819528304084\",\n  \"5024705281721889198577876690145313457398658950011302225525409148828000436681\",\n  \"17980351014018068290387269214713820287804403312720763401943303895585469787384\",\n  \"19886576439381707240399940949310933992335779767309383709787331470398675714258\",\n  \"1213715278223786725806155661738676903520350859678319590331207960381534602599\",\n  \"18162138253399958831050545255414688239130588254891200470934232514682584734511\",\n  \"7667462281466170157858259197976388676420847047604921256361474169980037581876\",\n  \"7207551498477838452286210989212982851118089401128156132319807392460388436957\",\n  \"9864183311657946807255900203841777810810224615118629957816193727554621093838\",\n  \"4798196928559910300796064665904583125427459076060519468052008159779219347957\",\n  \"17387238494588145257484818061490088963673275521250153686214197573695921400950\",\n  \"10005334761930299057035055370088813230849810566234116771751925093634136574742\",\n  \"11897542014760736209670863723231849628230383119798486487899539017466261308762\",\n  \"16771780563523793011283273687253985566177232886900511371656074413362142152543\",\n  \"749264854018824809464168489785113337925400687349357088413132714480582918506\",\n  \"3683645737503705042628598550438395339383572464204988015434959428676652575331\",\n  \"7556750851783822914673316211129907782679509728346361368978891584375551186255\",\n  \"20391289379084797414557439284689954098721219201171527383291525676334308303023\",\n  \"18146517657445423462330854383025300323335289319277199154920964274562014376193\",\n  \"8080173465267536232534446836148661251987053305394647905212781979099916615292\",\n  \"10796443006899450245502071131975731672911747129805343722228413358507805531141\",\n  \"5404287610364961067658660283245291234008692303120470305032076412056764726509\",\n  \"4623894483395123520243967718315330178025957095502546813929290333264120223168\",\n  \"16845753148201777192406958674202574751725237939980634861948953189320362207797\",\n  \"4622170486584704769521001011395820886029808520586507873417553166762370293671\",\n  \"16688277490485052681847773549197928630624828392248424077804829676011512392564\",\n  \"11878652861183667748838188993669912629573713271883125458838494308957689090959\",\n  \"2436445725746972287496138382764643208791713986676129260589667864467010129482\",\n  \"1888098689545151571063267806606510032698677328923740058080630641742325067877\",\n  \"148924106504065664829055598316821983869409581623245780505601526786791681102\",\n  \"18875020877782404439294079398043479420415331640996249745272087358069018086569\",\n  \"15189693413320228845990326214136820307649565437237093707846682797649429515840\",\n  \"19669450123472657781282985229369348220906547335081730205028099210442632534079\",\n  \"5521922218264623411380547905210139511350706092570900075727555783240701821773\",\n  \"4144769320246558352780591737261172907511489963810975650573703217887429086546\",\n  \"10097732913112662248360143041019433907849917041759137293018029019134392559350\",\n  \"1720059427972723034107765345743336447947522473310069975142483982753181038321\",\n  \"6302388219880227251325608388535181451187131054211388356563634768253301290116\",\n  \"6745410632962119604799318394592010194450845483518862700079921360015766217097\",\n  \"10858157235265583624235850660462324469799552996870780238992046963007491306222\",\n  \"20241898894740093733047052816576694435372877719072347814065227797906130857593\",\n  \"10165780782761211520836029617746977303303335603838343292431760011576528327409\",\n  \"2832093654883670345969792724123161241696170611611744759675180839473215203706\",\n  \"153011722355526826233082383360057587249818749719433916258246100068258954737\",\n  \"20196970640587451358539129330170636295243141659030208529338914906436009086943\",\n  \"3180973917010545328313139835982464870638521890385603025657430208141494469656\",\n  \"17198004293191777441573635123110935015228014028618868252989374962722329283022\",\n  \"7642160509228669138628515458941659189680509753651629476399516332224325757132\",\n  \"19346204940546791021518535594447257347218878114049998691060016493806845179755\",\n  \"11501810868606870391127866188394535330696206817602260610801897042898616817272\",\n  \"3113973447392053821824427670386252797811804954746053461397972968381571297505\",\n  \"6545064306297957002139416752334741502722251869537551068239642131448768236585\",\n  \"5203908808704813498389265425172875593837960384349653691918590736979872578408\",\n  \"2246692432011290582160062129070762007374502637007107318105405626910313810224\",\n  \"11760570435432189127645691249600821064883781677693087773459065574359292849137\",\n  \"5543749482491340532547407723464609328207990784853381797689466144924198391839\",\n  \"8837549193990558762776520822018694066937602576881497343584903902880277769302\",\n  \"12855514863299373699594410385788943772765811961581749194183533625311486462501\",\n  \"5363660674689121676875069134269386492382220935599781121306637800261912519729\",\n  \"13162342403579303950549728848130828093497701266240457479693991108217307949435\",\n  \"916941639326869583414469202910306428966657806899788970948781207501251816730\",\n  \"15618589556584434434009868216186115416835494805174158488636000580759692174228\",\n  \"8959562060028569701043973060670353733575345393653685776974948916988033453971\",\n  \"16390754464333401712265575949874369157699293840516802426621216808905079127650\",\n  \"168282396747788514908709091757591226095443902501365500003618183905496160435\",\n  \"8327443473179334761744301768309008451162322941906921742120510244986704677004\",\n  \"17213012626801210615058753489149961717422101711567228037597150941152495100640\",\n  \"10394369641533736715250242399198097296122982486516256408681925424076248952280\",\n  \"17784386835392322654196171115293700800825771210400152504776806618892170162248\",\n  \"16533189939837087893364000390641148516479148564190420358849587959161226782982\",\n  \"18725396114211370207078434315900726338547621160475533496863298091023511945076\",\n  \"7132325028834551397904855671244375895110341505383911719294705267624034122405\",\n  \"148317947440800089795933930720822493695520852448386394775371401743494965187\",\n  \"19001050671757720352890779127693793630251266879994702723636759889378387053056\",\n  \"18824274411769830274877839365728651108434404855803844568234862945613766611460\",\n  \"12771414330193951156383998390424063470766226667986423961689712557338777174205\",\n  \"11332046574800279729678603488745295198038913503395629790213378101166488244657\",\n  \"9607550223176946388146938069307456967842408600269548190739947540821716354749\",\n  \"8756385288462344550200229174435953103162307705310807828651304665320046782583\",\n  \"176061952957067086877570020242717222844908281373122372938833890096257042779\",\n  \"12200212977482648306758992405065921724409841940671166017620928947866825250857\",\n  \"10868453624107875516866146499877130701929063632959660262366632833504750028858\",\n  \"2016095394399807253596787752134573207202567875457560571095586743878953450738\",\n  \"21815578223768330433802113452339488275704145896544481092014911825656390567514\",\n  \"4923772847693564777744725640710197015181591950368494148029046443433103381621\",\n  \"1813584943682214789802230765734821149202472893379265320098816901270224589984\",\n  \"10810123816265612772922113403831964815724109728287572256602010709288980656498\",\n  \"1153669123397255702524721206511185557982017410156956216465120456256288427021\",\n  \"5007518659266430200134478928344522649876467369278722765097865662497773767152\",\n  \"2511432546938591792036639990606464315121646668029252285288323664350666551637\",\n  \"32883284540320451295484135704808083452381176816565850047310272290579727564\",\n  \"10484856914279112612610993418405543310546746652738541161791501150994088679557\",\n  \"2026733759645519472558796412979210009170379159866522399881566309631434814953\",\n  \"14731806221235869882801331463708736361296174006732553130708107037190460654379\",\n  \"14740327483193277147065845135561988641238516852487657117813536909482068950652\",\n  \"18787428285295558781869865751953016580493190547148386433580291216673009884554\",\n  \"3804047064713122820157099453648459188816376755739202017447862327783289895072\",\n  \"16709604795697901641948603019242067672006293290826991671766611326262532802914\",\n  \"11061717085931490100602849654034280576915102867237101935487893025907907250695\",\n  \"2821730726367472966906149684046356272806484545281639696873240305052362149654\",\n  \"17467794879902895769410571945152708684493991588672014763135370927880883292655\",\n  \"1571520786233540988201616650622796363168031165456869481368085474420849243232\",\n  \"10041051776251223165849354194892664881051125330236567356945669006147134614302\",\n  \"3981753758468103976812813304477670033098707002886030847251581853700311567551\",\n  \"4365864398105436789177703571412645548020537580493599380018290523813331678900\",\n  \"2391801327305361293476178683853802679507598622000359948432171562543560193350\",\n  \"214219368547551689972421167733597094823289857206402800635962137077096090722\",\n  \"18192064100315141084242006659317257023098826945893371479835220462302399655674\",\n  \"15487549757142039139328911515400805508248576685795694919457041092150651939253\",\n  \"10142447197759703415402259672441315777933858467700579946665223821199077641122\",\n  \"11246573086260753259993971254725613211193686683988426513880826148090811891866\",\n  \"6574066859860991369704567902211886840188702386542112593710271426704432301235\",\n  \"11311085442652291634822798307831431035776248927202286895207125867542470350078\",\n  \"20977948360215259915441258687649465618185769343138135384346964466965010873779\",\n  \"792781492853909872425531014397300057232399608769451037135936617996830018501\",\n  \"5027602491523497423798779154966735896562099398367163998686335127580757861872\",\n  \"14595204575654316237672764823862241845410365278802914304953002937313300553572\",\n  \"13973538843621261113924259058427434053808430378163734641175100160836376897004\",\n  \"16395063164993626722686882727042150241125309409717445381854913964674649318585\",\n  \"8465768840047024550750516678171433288207841931251654898809033371655109266663\",\n  \"21345603324471810861925019445720576814602636473739003852898308205213912255830\",\n  \"21171984405852590343970239018692870799717057961108910523876770029017785940991\",\n  \"10761027113757988230637066281488532903174559953630210849190212601991063767647\",\n  \"6678298831065390834922566306988418588227382406175769592902974103663687992230\",\n  \"4993662582188632374202316265508850988596880036291765531885657575099537176757\",\n  \"18364168158495573675698600238443218434246806358811328083953887470513967121206\",\n  \"3506345610354615013737144848471391553141006285964325596214723571988011984829\",\n  \"248732676202643792226973868626360612151424823368345645514532870586234380100\",\n  \"10090204501612803176317709245679152331057882187411777688746797044706063410969\",\n  \"21297149835078365363970699581821844234354988617890041296044775371855432973500\",\n  \"16729368143229828574342820060716366330476985824952922184463387490091156065099\",\n  \"4467191506765339364971058668792642195242197133011672559453028147641428433293\",\n  \"8677548159358013363291014307402600830078662555833653517843708051504582990832\",\n  \"1022951765127126818581466247360193856197472064872288389992480993218645055345\",\n  \"1888195070251580606973417065636430294417895423429240431595054184472931224452\",\n  \"4221265384902749246920810956363310125115516771964522748896154428740238579824\",\n  \"2825393571154632139467378429077438870179957021959813965940638905853993971879\",\n  \"19171031072692942278056619599721228021635671304612437350119663236604712493093\",\n  \"10780807212297131186617505517708903709488273075252405602261683478333331220733\",\n  \"18230936781133176044598070768084230333433368654744509969087239465125979720995\",\n  \"16901065971871379877929280081392692752968612240624985552337779093292740763381\",\n  \"146494141603558321291767829522948454429758543710648402457451799015963102253\",\n  \"2492729278659146790410698334997955258248120870028541691998279257260289595548\",\n  \"2204224910006646535594933495262085193210692406133533679934843341237521233504\",\n  \"16062117410185840274616925297332331018523844434907012275592638570193234893570\",\n  \"5894928453677122829055071981254202951712129328678534592916926069506935491729\",\n  \"4947482739415078212217504789923078546034438919537985740403824517728200332286\",\n  \"16143265650645676880461646123844627780378251900510645261875867423498913438066\",\n  \"397690828254561723549349897112473766901585444153303054845160673059519614409\",\n  \"11272653598912269895509621181205395118899451234151664604248382803490621227687\",\n  \"15566927854306879444693061574322104423426072650522411176731130806720753591030\",\n  \"14222898219492484180162096141564251903058269177856173968147960855133048449557\",\n  \"16690275395485630428127725067513114066329712673106153451801968992299636791385\",\n  \"3667030990325966886479548860429670833692690972701471494757671819017808678584\",\n  \"21280039024501430842616328642522421302481259067470872421086939673482530783142\",\n  \"15895485136902450169492923978042129726601461603404514670348703312850236146328\",\n  \"7733050956302327984762132317027414325566202380840692458138724610131603812560\",\n  \"438123800976401478772659663183448617575635636575786782566035096946820525816\",\n  \"814913922521637742587885320797606426167962526342166512693085292151314976633\",\n  \"12368712287081330853637674140264759478736012797026621876924395982504369598764\",\n  \"2494806857395134874309386694756263421445039103814920780777601708371037591569\",\n  \"16101132301514338989512946061786320637179843435886825102406248183507106312877\",\n  \"6252650284989960032925831409804233477770646333900692286731621844532438095656\",\n  \"9277135875276787021836189566799935097400042171346561246305113339462708861695\",\n  \"10493603554686607050979497281838644324893776154179810893893660722522945589063\",\n  \"8673089750662709235894359384294076697329948991010184356091130382437645649279\",\n  \"9558393272910366944245875920138649617479779893610128634419086981339060613250\",\n  \"19012287860122586147374214541764572282814469237161122489573881644994964647218\",\n  \"9783723818270121678386992630754842961728702994964214799008457449989291229500\",\n  \"15550788416669474113213749561488122552422887538676036667630838378023479382689\",\n  \"15016165746156232864069722572047169071786333815661109750860165034341572904221\",\n  \"6506225705710197163670556961299945987488979904603689017479840649664564978574\",\n  \"10796631184889302076168355684722130903785890709107732067446714470783437829037\",\n  \"19871836214837460419845806980869387567383718044439891735114283113359312279540\",\n  \"20871081766843466343749609089986071784031203517506781251203251608363835140622\",\n  \"5100105771517691442278432864090229416166996183792075307747582375962855820797\",\n  \"8777887112076272395250620301071581171386440850451972412060638225741125310886\",\n  \"5300440870136391278944213332144327695659161151625757537632832724102670898756\",\n  \"1205448543652932944633962232545707633928124666868453915721030884663332604536\",\n  \"5542499997310181530432302492142574333860449305424174466698068685590909336771\",\n  \"11028094245762332275225364962905938096659249161369092798505554939952525894293\",\n  \"19187314764836593118404597958543112407224947638377479622725713735224279297009\",\n  \"17047263688548829001253658727764731047114098556534482052135734487985276987385\",\n  \"19914849528178967155534624144358541535306360577227460456855821557421213606310\",\n  \"2929658084700714257515872921366736697080475676508114973627124569375444665664\",\n  \"15092262360719700162343163278648422751610766427236295023221516498310468956361\",\n  \"21578580340755653236050830649990190843552802306886938815497471545814130084980\",\n  \"1258781501221760320019859066036073675029057285507345332959539295621677296991\",\n  \"3819598418157732134449049289585680301176983019643974929528867686268702720163\",\n  \"8653175945487997845203439345797943132543211416447757110963967501177317426221\",\n  \"6614652990340435611114076169697104582524566019034036680161902142028967568142\",\n  \"19212515502973904821995111796203064175854996071497099383090983975618035391558\",\n  \"18664315914479294273286016871365663486061896605232511201418576829062292269769\",\n  \"11498264615058604317482574216318586415670903094838791165247179252175768794889\",\n  \"10814026414212439999107945133852431304483604215416531759535467355316227331774\",\n  \"17566185590731088197064706533119299946752127014428399631467913813769853431107\",\n  \"14016139747289624978792446847000951708158212463304817001882956166752906714332\",\n  \"8242601581342441750402731523736202888792436665415852106196418942315563860366\",\n  \"9244680976345080074252591214216060854998619670381671198295645618515047080988\",\n  \"12216779172735125538689875667307129262237123728082657485828359100719208190116\",\n  \"10702811721859145441471328511968332847175733707711670171718794132331147396634\",\n  \"6479667912792222539919362076122453947926362746906450079329453150607427372979\",\n  \"15117544653571553820496948522381772148324367479772362833334593000535648316185\",\n  \"6842203153996907264167856337497139692895299874139131328642472698663046726780\",\n  \"12732823292801537626009139514048596316076834307941224506504666470961250728055\",\n  \"6936272626871035740815028148058841877090860312517423346335878088297448888663\",\n  \"17297554111853491139852678417579991271009602631577069694853813331124433680030\",\n  \"16641596134749940573104316021365063031319260205559553673368334842484345864859\",\n  \"7400481189785154329569470986896455371037813715804007747228648863919991399081\",\n  \"2273205422216987330510475127669563545720586464429614439716564154166712854048\",\n  \"15162538063742142685306302282127534305212832649282186184583465569986719234456\",\n  \"5628039096440332922248578319648483863204530861778160259559031331287721255522\",\n  \"16085392195894691829567913404182676871326863890140775376809129785155092531260\",\n  \"14227467863135365427954093998621993651369686288941275436795622973781503444257\",\n  \"18224457394066545825553407391290108485121649197258948320896164404518684305122\",\n  \"274945154732293792784580363548970818611304339008964723447672490026510689427\",\n  \"11050822248291117548220126630860474473945266276626263036056336623671308219529\",\n  \"2119542016932434047340813757208803962484943912710204325088879681995922344971\",\n  \"0\",\n].map((n) => bigInt(n));\n\nclass FeistelState {\n  l: BigInteger;\n  r: BigInteger;\n  rounds: number;\n  k: BigInteger;\n\n  constructor(rounds: number, k: BigInteger) {\n    this.l = bigInt(0);\n    this.r = bigInt(0);\n    this.rounds = rounds;\n    this.k = k;\n  }\n\n  inject(elt: BigInteger): void {\n    this.l = this.l.add(elt).mod(p);\n  }\n\n  mix(): void {\n    for (let i = 0; i < this.rounds - 1; i++) {\n      const t = this.k.add(this.l).add(c[i]).mod(p);\n      const lNew = t.modPow(5, p).add(this.r).mod(p);\n      this.r = this.l;\n      this.l = lNew;\n    }\n    const t = this.k.add(this.l).mod(p);\n    this.r = t.modPow(5, p).add(this.r).mod(p);\n  }\n}\n\nfunction mimcSponge(\n  inputs: BigInteger[],\n  nOutputs: number,\n  rounds: number,\n  key: number\n): BigInteger[] {\n  const state = new FeistelState(rounds, bigInt(key));\n  for (const elt of inputs) {\n    state.inject(elt);\n    state.mix();\n  }\n  const outputs: BigInteger[] = [state.l];\n  for (let i = 0; i < nOutputs - 1; i++) {\n    state.mix();\n    outputs.push(state.l);\n  }\n  return outputs;\n}\n\nexport const modPBigInt = (x: number) => {\n  let ret = bigInt(x).mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n};\n\nexport const modPBigIntNative = (x: BigInteger) => {\n  let ret = x.mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n};\n\nexport const mimcWithRounds = (rounds: number, key: number) => (\n  ...inputs: number[]\n) =>\n  mimcSponge(\n    inputs.map((n) => modPBigInt(n)),\n    1,\n    rounds,\n    key\n  )[0];\n\nconst mimcHash = mimcWithRounds(220, KEY);\n\nexport const spaceTypeHash = mimcWithRounds(4, KEY);\nexport const biomeHash = mimcWithRounds(4, BIOME_KEY);\n\nexport default mimcHash;\n","/* global BigInt */\n// rules\n\nimport * as utils from \"./utils.js\";\nimport * as snarks from \"./snarks.js\";\nimport mimcHash from \"./mimc.ts\";\nimport { computeCardIndex } from \"./cards.js\";\n\n// rule is a struct containing:\n//  - name: name of the rule\n//  - hash: hash of the compiled source code (same hash as within the snark)\n//  - owner: (the user id of the user owning the rule, or \"everyone\")\n//  - penalty: (int, the # cards to penalize with)\n//  if it is private, also contains:\n//  - source: (the human readable source code written a cool language)\n//  - compiled: (a list of integers which is the compiled version for the snark)\n\n// the game will store:\n//  - myRules: a list of my private rules\n//  - allRules: a list of all known public rules\n//  - rulesByOwner: a map {user -> ownedRule}. because if initial rules it is ok for multiple people to know the same rule\n\nexport const EVERYONE = \"everyone\";\n\nexport async function createPrivateRule(name, source, owner, penalty) {\n  const rule = {\n    name,\n    source,\n    owner,\n    penalty,\n    compiled: await compileSource(source),\n    hash: null,\n  };\n  rule.hash = `${await mimcHash(...rule.compiled)}`;\n  return rule;\n}\nexport function publicRule(rule) {\n  // strip out the private parts of this rule, before publishing it to anyone else\n  const publicRule = {\n    name: rule.name,\n    owner: rule.owner,\n    hash: rule.hash,\n    penalty: rule.penalty,\n  };\n  return publicRule;\n}\n\nasync function compileSource(source) {\n  console.log(\"compiling source:\");\n  console.log(source);\n  return await utils.compileUserRule(source);\n}\n\nexport function sameRule(r1, r2) {\n  return r1.hash === r2.hash;\n}\n\n// input:\n//  - card: the card that was played\n//  - playedCards: the cards that have been played so far, not including `card`, 0 is oldest and n-1 is most recently played\n//  - the Hand of the player who is being checked, DOES NOT INCLUDE card\n//  - selectedRules: the rules that the player playing `card` selected\n//  - myRules: the private rules (including source code) that we know of and want to check for\n// output:\n//  - a list `provedRules` of length myRules.length, such that provedRules[i] is an object on the form:\n//      {rule: (publicrule object), proof: (snarkproof), penalty: (0 or 1)}\n//    where `rule` is the public rule version of each rule in `myRules`\nexport async function determinePenalties(\n  card,\n  playedCards,\n  hand,\n  selectedRules,\n  myRules,\n  reportStatus\n) {\n  let rulesActedUpon = {};\n  for (let rule of selectedRules) {\n    rulesActedUpon[rule.hash] = rule;\n  }\n  let answer = [];\n  for (let [index, rule] of myRules.entries()) {\n    let status = `verifying ${rule.name}; rule ${index + 1} of ${\n      myRules.length\n    }.`;\n    reportStatus(status);\n    let snarkInput = await computeSnarkProveInput(\n      card,\n      playedCards,\n      hand,\n      rule,\n      rule.hash in rulesActedUpon\n    );\n    let response = {};\n    response[\"proof\"] = await snarks.prove(snarkInput, \"maoRule\");\n    response[\"rule\"] = publicRule(rule);\n    response[\"penalty\"] = response[\"proof\"][\"publicSignals\"][0] === \"0\";\n    answer.push(response);\n  }\n  reportStatus(null);\n  return answer;\n}\nasync function computeSnarkProveInput(\n  card,\n  playedCards,\n  hand,\n  rule,\n  userAction\n) {\n  let card1 = computeCardIndex(card);\n  let card2 =\n    playedCards.length === 0\n      ? 52\n      : computeCardIndex(playedCards[playedCards.length - 1]);\n  let lastcard = hand.length === 1;\n  let hash = rule.hash;\n  let src = rule.compiled;\n  let gameState = [lastcard, card1, card2];\n  return {\n    rule: src,\n    ruleHash: hash,\n    gameState: gameState,\n    userAction: userAction,\n  };\n}\n\nexport const INCORRECT_PENALTIES = \"INCORRECT_PENALTIES\";\n\n// input:\n//  - card: the card that was played\n//  - playedCards: the cards that have been played so far, not including `card`, 0 is oldest and n-1 is most recently played\n//  - the Hand of the player who is being checked, DOES NOT INCLUDE card\n//  - selectedRules: the rules that the player playing `card` selected\n//  - provedRules: the proof object outputted by determinePenalties\n// output:\n//  if all provedRules were correct:\n//      - a list of all the publicrules that were violated\n//  if anything is incorrect:\n//      - INCORRECT_PENALTIES\nexport async function verifyPenalties(\n  card,\n  playedCards,\n  hand,\n  selectedRules,\n  provedRules\n) {\n  let rulesActedUpon = {};\n  for (const rule of selectedRules) {\n    rulesActedUpon[rule.hash] = rule;\n  }\n  let answer = [];\n  for (const proof of provedRules) {\n    if (\n      !(await verifyPublicSignals(\n        proof[\"proof\"][\"publicSignals\"],\n        card,\n        playedCards,\n        hand,\n        proof[\"rule\"].hash in rulesActedUpon,\n        proof[\"rule\"].hash\n      )) ||\n      !(await snarks.verify(\n        \"maoRule\",\n        proof[\"proof\"][\"publicSignals\"],\n        proof[\"proof\"][\"proof\"]\n      ))\n    ) {\n      return INCORRECT_PENALTIES;\n    }\n    if (proof[\"penalty\"]) {\n      answer.push(proof[\"rule\"]);\n    }\n  }\n  return answer;\n}\n\nasync function verifyPublicSignals(\n  publicSignals,\n  card,\n  playedCards,\n  hand,\n  userAction,\n  ruleHash\n) {\n  let card1 = `${computeCardIndex(card)}`;\n  let card2 =\n    playedCards.length === 0\n      ? \"52\"\n      : `${computeCardIndex(playedCards[playedCards.length - 1])}`;\n  let lastcard = hand.length === 1;\n  console.log(publicSignals[1] === ruleHash);\n  console.log(publicSignals[2] === (lastcard ? \"1\" : \"0\"));\n  console.log(publicSignals[3] === card1);\n  console.log(publicSignals[4] === card2);\n  console.log(publicSignals[5] === (userAction ? \"1\" : \"0\"));\n  return (\n    publicSignals[1] === ruleHash &&\n    publicSignals[2] === (lastcard ? \"1\" : \"0\") &&\n    publicSignals[3] === card1 &&\n    publicSignals[4] === card2 &&\n    publicSignals[5] === (userAction ? \"1\" : \"0\")\n  );\n}\n","import assert from \"./assert.js\";\nimport mimcHash from \"./mimc.ts\";\nimport * as snarks from \"./snarks.js\";\nimport * as utils from \"./utils.js\";\n// we store a tokenState object.\n// a tokenState object has the following:\n//      1. tokenHashes: {userId -> tokenHash}\n//      2. myTokens: list of token objects\n//      3. tokenStats {userId -> {stock: n, hand: n, discarded: n}}\n//\n// a token is represented by: {tokenPower: n, state: }. tokenPower = # cards for penalty\n\n// FIRST SALT ALWAYS HAS TO BE THE SAME!!!!!!\n\nexport const TOKEN_STATE = {\n  STOCK: \"STOCK\", // 0\n  HAND: \"HAND\", // 1\n  DISCARDED: \"DISCARDED\", // 2\n};\nconst TOKEN_STATES = [\n  TOKEN_STATE.STOCK,\n  TOKEN_STATE.HAND,\n  TOKEN_STATE.DISCARDED,\n];\nconst TOKEN_STATE_BIT = {\n  [TOKEN_STATE.STOCK]: 0,\n  [TOKEN_STATE.HAND]: 1,\n  [TOKEN_STATE.DISCARDED]: 2,\n};\n\n// needs to be same as length of token states\nconst NUM_TOKEN_STATES = 3;\n\n// important!! this needs to be the same as the generated snarks\nconst NUM_TOKENS = 10;\n\nexport async function createTokenState(players) {\n  const tokenState = {\n    tokenHashes: {},\n    myTokens: initialTokens(),\n    tokenStats: {},\n  };\n  for (const user of players) {\n    tokenState.tokenHashes[user] = await tokenNumToHash(\n      tokenListToNum(initialTokens()),\n      NUM_TOKENS,\n      0\n    );\n    tokenState.tokenStats[user] = {\n      [TOKEN_STATE.STOCK]: NUM_TOKENS,\n      [TOKEN_STATE.HAND]: 0,\n      [TOKEN_STATE.DISCARDED]: 0,\n    };\n  }\n  return tokenState;\n}\n\nexport function initialTokens() {\n  // this order determines the power\n  const tokens = [\n    { tokenPower: 3, state: TOKEN_STATE.STOCK, id: 0 }, // 3^0\n    { tokenPower: 2, state: TOKEN_STATE.STOCK, id: 1 }, // 3^1\n    { tokenPower: 1, state: TOKEN_STATE.STOCK, id: 2 }, // 3^2\n    { tokenPower: 1, state: TOKEN_STATE.STOCK, id: 3 }, // 3^3\n    { tokenPower: 1, state: TOKEN_STATE.STOCK, id: 4 }, // 3^4\n    { tokenPower: 0, state: TOKEN_STATE.STOCK, id: 5 }, // 3^5\n    { tokenPower: 0, state: TOKEN_STATE.STOCK, id: 6 }, // 3^6\n    { tokenPower: 0, state: TOKEN_STATE.STOCK, id: 7 }, // 3^7\n    { tokenPower: 0, state: TOKEN_STATE.STOCK, id: 8 }, // 3^8\n    { tokenPower: 0, state: TOKEN_STATE.STOCK, id: 9 }, // 3^9\n  ];\n  assert(tokens.length === NUM_TOKENS, \"tokens must be sameeeee\");\n  return tokens;\n}\n\nfunction tokenListToNum(tokens) {\n  let num = 0;\n  let pwr3 = 1;\n  for (const token of tokens) {\n    num += pwr3 * tokenStateToBit(token.state);\n    pwr3 = pwr3 * NUM_TOKEN_STATES;\n  }\n  return num;\n}\nfunction tokenNumToList(tokenNum) {\n  // reverse of tokenListToNum\n  let num = tokenNum;\n  let tokens = initialTokens();\n  for (const token of tokens) {\n    let bit = num % NUM_TOKEN_STATES;\n    num = Math.floor(num / NUM_TOKEN_STATES);\n    let tokenState = tokenBitToState(bit);\n    token.state = tokenState;\n  }\n  assert(num === 0, \"should be 0 lol\");\n  return tokens;\n}\nfunction tokenStateToBit(tokenState) {\n  assert(Object.keys(TOKEN_STATE_BIT).includes(tokenState), \"uh\");\n  return TOKEN_STATE_BIT[tokenState];\n}\nfunction tokenBitToState(tokenBit) {\n  assert(0 <= tokenBit && tokenBit < NUM_TOKEN_STATES, \"uh\");\n  return TOKEN_STATES[tokenBit];\n}\nasync function tokenNumToHash(tokenNum, numCards, salt) {\n  // TODO: hash this in the mimc way lol\n  return `${await mimcHash(tokenNum, numCards, salt)}`;\n}\nexport function tokenIdToPower(tokenId) {\n  return initialTokens().filter((t) => t.id === tokenId)[0].tokenPower;\n}\n\nexport function serializeTokens(tokens) {\n  return tokens.map((t) => `${t.tokenPower}`).join(\",\");\n}\n\nexport function awardFunction(numCards) {\n  if (numCards === 0) {\n    return 3;\n  } else if (numCards === 1) {\n    return 2;\n  } else if (numCards < 5) {\n    return 1;\n  }\n  return 0;\n}\n\n// input:\n//      -tokenState (see def top of this file)\n//      -salt1 (the salt used with the previous state commit)\n//      -salt2 (the salt used this state commit)\n//      -seed (the seed)\n//      -opponentRandomness (the opponentRandomness)\n//      -nonce (the number of the turn)\n//      -userId (the Id of the owner of the card)\n// and it draws 1 card from the personal deck\n// precondition is that there is at least 1 card in the personal deck\n// it returns:\n//  - {newTokenHash: , proof: }\n// side effects:\n//  - update tokenState.myTokens to reflect the newly drawn token\nexport async function draw(\n  tokenState,\n  salt1,\n  salt2,\n  seed,\n  opponentRandomness,\n  nonce,\n  userId\n) {\n  let publicInput = {\n    oldCardstate: `${tokenListToNum(tokenState.myTokens)}`,\n    oldNumCardsInDeck: `${tokenState.tokenStats[userId][TOKEN_STATE.STOCK]}`,\n    seed: `${seed}`,\n    nonce: `${nonce}`,\n    opponentRandomness: `${opponentRandomness}`,\n  };\n\n  let publicOutput = await snarks.prove(publicInput, \"drawcardspublicly\");\n  publicOutput = publicOutput.publicSignals;\n  let newCardState = publicOutput[0];\n  let newNumCardsInDeck = publicOutput[1];\n\n  let privateInput = { ...publicInput };\n  privateInput[\"newCardstate\"] = `${newCardState}`;\n  privateInput[\"newNumCardsInDeck\"] = `${newNumCardsInDeck}`;\n  privateInput[\"salt1\"] = `${salt1}`;\n  privateInput[\"salt2\"] = `${salt2}`;\n\n  console.log(\n    \"qowierjfpoiqwejgfpowqejpoqwejfpoqwejfpioqwejfpoqwejfpoiqwefjpoiqwejf\"\n  );\n  console.log(utils.objectify(privateInput));\n  let privateOutput = await snarks.prove(privateInput, \"drawcardsprivately\");\n  let newTokenHash = privateOutput[\"publicSignals\"][1];\n  let oldTokenHash = privateOutput[\"publicSignals\"][0];\n  assert(\n    oldTokenHash === tokenState.tokenHashes[userId],\n    \"hashes should be same lolol\"\n  );\n  console.log(\"SEEEEEEEEED: \");\n  console.log(seed);\n  console.log(\"SEEEEDCOMMITTTTT:\");\n  console.log(utils.objectify(privateOutput));\n  console.log(oldTokenHash);\n  console.log(tokenState.tokenHashes[userId]);\n  console.log(utils.objectify(tokenState));\n\n  //TODO update the tokenHash stuff\n  let power = Math.round(\n    Math.log(newCardState - publicInput[\"oldCardstate\"]) / Math.log(3)\n  );\n  assert(\n    tokenState.myTokens.filter((t) => t.id === power)[0].state ===\n      TOKEN_STATE.STOCK,\n    \"this should ne with the player\"\n  );\n  tokenState.myTokens.filter((t) => t.id === power)[0].state = TOKEN_STATE.HAND;\n  return {\n    newTokenHash: `${newTokenHash}`,\n    proof: privateOutput,\n  };\n}\n\nexport const INCORRECTLY_DRAWN_TOKEN = \"INCORRECTLY_DRAWN_TOKEN\";\n\n// input:\n//      - tokenState (see top of this file)\n//      - drawnToken (output of draw)\n//      - user (the id of the user who drew the token)\n// output:\n//   if everything correct (need to check that tokenState.tokenHashes reflects the old hash value!):\n//      - true\n//   if incorrect proof:\n//      - INCORRECTLY_DRAWN_TOKEN\n// side effects:\n//   if everything correct:\n//      - update tokenState.tokenHashes to reflect the new hash\n//      - update tokenState.tokenStats to reflect the newly drawn token\nexport async function verifyDrawnToken(\n  tokenState,\n  drawnToken,\n  user,\n  opponentRandomness,\n  nonce,\n  seed\n) {\n  //TODO assign the variables below\n  let previousHash = tokenState.tokenHashes[user];\n  //   let seedCommit = `${await mimcHash(seed)}`;\n  let proof = drawnToken[\"proof\"]; // a value in the object returned by the proof function\n  let oldNumCardsInDeck = tokenState.tokenStats[user][TOKEN_STATE.STOCK];\n  let newNumCardsInDeck = tokenState.tokenStats[user][TOKEN_STATE.STOCK] - 1;\n  console.log(\n    \"HEEEEEEEEEEEEEEEEEEREEEEEEEEEEEEEEEEEEEEEEE\\n\\n\\n\\n\\n\\n\\\\n\\n\\n\\n\\\\n\\n\\n\\\\n\\n\\n\"\n  );\n  console.log(proof[\"publicSignals\"][0]);\n  console.log(previousHash);\n  console.log(proof[\"publicSignals\"]);\n  console.log(\n    \"HEEEEEEEEEEEEEEEEEEREEEEEEEEEEEEEEEEEEEEEEE\\n\\n\\n\\n\\n\\n\\\\n\\n\\n\\n\\\\n\\n\\n\\\\n\\n\\n\"\n  );\n  console.log(\"SEEEEEEEEED: \");\n  console.log(seed);\n\n  //check that stuff make sense\n  if (proof[\"publicSignals\"][0] !== previousHash) {\n    console.log(\"Oh noo\");\n    console.log(1);\n    // console.log(seedCommit);\n    // console.log(seedCommit !== proof[\"publicSignals\"][0]);\n    console.log(proof[\"publicSignals\"][0] !== previousHash);\n\n    return INCORRECTLY_DRAWN_TOKEN;\n  }\n\n  //check that public paramaters are good\n  if (\n    `${oldNumCardsInDeck}` !== proof[\"publicSignals\"][2] ||\n    `${newNumCardsInDeck}` !== proof[\"publicSignals\"][3] ||\n    `${seed}` !== proof[\"publicSignals\"][4] ||\n    `${opponentRandomness}` !== proof[\"publicSignals\"][5] ||\n    `${nonce}` !== proof[\"publicSignals\"][6]\n  ) {\n    console.log(\"Oh noooo\");\n    console.log(2);\n    console.log(oldNumCardsInDeck !== proof[\"publicSignals\"][2]);\n    console.log(newNumCardsInDeck !== proof[\"publicSignals\"][3]);\n    console.log(opponentRandomness !== proof[\"publicSignals\"][4]);\n    console.log(nonce !== proof[\"publicSignals\"][5]);\n    return INCORRECTLY_DRAWN_TOKEN;\n  }\n  //check the proof\n  let verification = await snarks.verify(\n    \"drawcardsprivately\",\n    proof[\"publicSignals\"],\n    proof[\"proof\"]\n  );\n\n  //TODO figure side effects out\n  let newHash = proof[\"publicSignals\"][1]; //TODO store this somewhere\n  tokenState.tokenHashes[user] = newHash;\n  tokenState.tokenStats[user][TOKEN_STATE.STOCK]--;\n  tokenState.tokenStats[user][TOKEN_STATE.HAND]++;\n\n  return verification ? true : INCORRECTLY_DRAWN_TOKEN;\n}\n\n// input:\n//      - tokenState (see top of file)\n//      - token (the token you want to play)\n//      -salt1 (the salt used with the previous state commit)\n//      -salt2 (the salt used this state commit)\n//      -userId (the Id of the owner of the card)\n// output:\n//     {newTokenHash: , proof: }\n// side effects:\n//    - update tokenState.myTokens to reflect the newly played token\nexport async function play(tokenState, token, salt1, salt2, userID) {\n  let input = {\n    cardNumber: `${token.id}`,\n    oldCardState: `${tokenListToNum(tokenState.myTokens)}`,\n    newCardState: `${tokenListToNum(tokenState.myTokens) + 3 ** token.id}`,\n    oldNumCardsInDeck: `${tokenState.tokenStats[userID][TOKEN_STATE.STOCK]}`,\n    newNumCardsInDeck: `${tokenState.tokenStats[userID][TOKEN_STATE.STOCK]}`,\n    salt1: `${salt1}`,\n    salt2: `${salt2}`,\n  };\n  let proof = await snarks.prove(input, \"playCard\");\n  assert(\n    tokenState.myTokens.filter((tok) => tok.id === token.id)[0].state ===\n      TOKEN_STATE.HAND,\n    \"card should be in hand@@@@@@bbbbbb\"\n  );\n  tokenState.myTokens.filter((tok) => tok.id === token.id)[0].state =\n    TOKEN_STATE.DISCARDED;\n  return {\n    newTokenHash: proof[\"publicSignals\"][1],\n    proof: proof,\n  };\n}\n\nexport const INCORRECTLY_PLAYED_TOKEN = \"INCORRECTLY_PLAYED_TOKEN\";\n// input:\n//      - tokenState (see top of this file)\n//      - playedToken (output of play)\n//      - tokenID (the id of the token being played)\n//      - user (the id of the user who played the token)\n// output:\n//   if everything correct (including verifying that tokenID is indeed the input to playedToken!):\n//      - true\n//   if incorrect proof:\n//      - INCORRECTLY_PLAYED_TOKEN\n// side effects:\n//   if everything correct:\n//      - update tokenState.tokenHashes to reflect the new hash\n//      - update tokenState.tokenStats to reflect the newly played token\nexport async function verifyPlayedToken(\n  tokenState,\n  playedToken,\n  tokenID,\n  user\n) {\n  //TODO assign the variables below\n  let oldNumCardsInDeck = tokenState.tokenStats[user][TOKEN_STATE.STOCK];\n  let newNumCardsInDeck = tokenState.tokenStats[user][TOKEN_STATE.STOCK];\n  let previousHash = tokenState.tokenHashes[user];\n  let proof = playedToken[\"proof\"]; // a value in the object returned by the proof function\n\n  //check that stuff make sense\n  if (\n    proof[\"publicSignals\"][0] !== previousHash ||\n    proof[\"publicSignals\"][2] !== `${tokenID}`\n  ) {\n    return INCORRECTLY_PLAYED_TOKEN;\n  }\n\n  //check that public paramaters are good\n  if (\n    `${oldNumCardsInDeck}` !== proof[\"publicSignals\"][3] ||\n    `${newNumCardsInDeck}` !== proof[\"publicSignals\"][4]\n  ) {\n    return INCORRECTLY_PLAYED_TOKEN;\n  }\n  //check the proof\n  let verification = await snarks.verify(\n    \"playCard\",\n    proof[\"publicSignals\"],\n    proof[\"proof\"]\n  );\n\n  let newHash = proof[\"publicSignals\"][1];\n  tokenState.tokenHashes[user] = newHash;\n  tokenState.tokenStats[user][TOKEN_STATE.HAND]--;\n  tokenState.tokenStats[user][TOKEN_STATE.DISCARDED]++;\n\n  return verification ? true : INCORRECTLY_PLAYED_TOKEN;\n}\n","// logic.js is intended to hold all game logic\n\nimport seedrandom from \"seedrandom\";\n\nimport * as p2p from \"./p2p.js\";\nimport * as utils from \"./utils.js\";\nimport * as cards from \"./cards.js\";\nimport * as config from \"./config.js\";\nimport * as rules from \"./rules.js\";\nimport * as tokens from \"./tokens.js\";\n\nimport assert from \"./assert.js\";\n\n// TODO: later version: add signatures to actually be secure\n\n// WIRE PROTOCOL:\n// always assume broadcast messages!!!!!! this allows us to assume synchronicity which makes everything so much simpler\n// 1. setup:\n//  1.1 everyone: READY hashOfRandomNumber userID (number is a 64-bit integers, user id is randomly generated (later should be public key))\n//  1.2 when everyone you have open connections with say READY: START randomNumber  (userID is sent with every message)\n//  1.3 when received all STARTs: verifies all hashes, xors all numbers, seed rng with this, then just pick cards\n//  1.4 using same seed just choose order\n// 2. play:\n//  2.1 someone: PLAY card userID rules provedRules (same as for playack, need to show you enforce rules consistently even for yourself)\n//  2.2 everyone else: PLAYACK card user userID provedRules (rulehash, snark proof, for each rule you know)\n// 3. gameover: (when someone gets 0 cards)\n//  3.1 everyone: FINALIZE tokenHash drawTokenProof newRule (rule, power, spendTokenProof)\n//      (can then send READY to transition into setup phase)\n// 4. abort:\n//  3.1 send ABORT userID to every user, be sad\n\n// we assume that messages come to people in the order they are sent\n// i.e. we assume that channels are FIFO\n\n// ok so we have:\n// phase = {\"setup\", \"play\", \"gameover\", \"abort\"}\n// each phase has some metadata, which can be public or private\n// the public metadata is always sent over for debugging purposes\n\n// transitions\n// setup:\n//      state = {\"preReady\",\"sentReady\",\"sentStart\"},\n//      players, readyHashes, startNumbers, myRandom\n//\n// play:\n//      nextTurn = index into players\n//      players (order matters),\n//      playedCards (0 bottom, n-1 top),\n//      playerHands (id -> array),\n//      state = {\"waitforplay\", \"waitforack\"}\n//      acksReceived = []\n//      lastPlayedCard\n//      lastPlayedUser\n//      lastSelectedRules\n//      penaltyRules\n//      snarkStatus\n//\n// gameover: (transitions directly to setup.sentReady (only if received all finalized))\n//      winner = user_id\n//      sentFinalize = true/false\n//      finalizedReceived = []\n//      readyToRestart = true/false\n//      didDrawTokens = true/false\n//      drawnTokens = []\n//      compilingRule = true/false\n//      snarkStatus\n//\n// abort:\n//      (no data)\n\nexport const PHASE = {\n  SETUP: \"SETUP\",\n  PLAY: \"PLAY\",\n  GAMEOVER: \"GAMEOVER\",\n  ABORT: \"ABORT\",\n};\nconst PHASES = Object.values(PHASE);\nconst SETUP_STATE = {\n  PRE_READY: \"PRE_READY\",\n  SENT_READY: \"SENT_READY\",\n  SENT_START: \"SENT_START\",\n};\nconst SETUP_STATES = Object.values(SETUP_STATE);\nconst PLAY_STATE = {\n  WAIT_FOR_PLAY: \"WAIT_FOR_PLAY\",\n  WAIT_FOR_PLAYACK: \"WAIT_FOR_PLAYACK\",\n};\nconst PLAY_STATES = Object.values(PLAY_STATE);\n\nconst METHOD = {\n  READY: \"READY\",\n  START: \"START\",\n  PLAY: \"PLAY\",\n  PLAYACK: \"PLAYACK\",\n  FINALIZE: \"FINALIZE\",\n  ABORT: \"ABORT\",\n};\nconst METHODS = Object.values(METHOD);\nconst METHOD_HANDLER = {\n  [METHOD.READY]: handleReadyMethod,\n  [METHOD.START]: handleStartMethod,\n  [METHOD.PLAY]: handlePlayMethod,\n  [METHOD.PLAYACK]: handlePlayAckMethod,\n  [METHOD.FINALIZE]: handleFinalizeMethod,\n  [METHOD.ABORT]: handleAbortMethod,\n};\nassert(\n  JSON.stringify(METHODS) === JSON.stringify(Object.keys(METHOD_HANDLER)),\n  {\n    methods: METHODS,\n    handlers: METHOD_HANDLER,\n  }\n);\n\nexport function createGame(conn) {\n  // TODO: generate private/public keypair here and let userId be the public key\n  const userId = Math.random().toString(36).substr(2, 9);\n  const game = {\n    conn,\n    listeners: {},\n    listenerIndex: \"0\",\n    userId: userId,\n    phase: null,\n    data: {}, // contains data for every phase\n\n    // rule data\n    myRules: [],\n    allRules: [],\n\n    // token state (filled in first when all players are known)\n    tokenState: null,\n\n    numRounds: 0,\n\n    playerRandoms: {},\n\n    prevSalt: 0,\n  };\n  for (const phase of PHASES) {\n    game.data[phase] = {};\n  }\n  initPhase(game, PHASE.SETUP);\n  setUpPublicRules(game);\n  console.log(\"PERSISTENT GAME OBJECT:\");\n  console.log(game);\n  return game;\n}\nasync function setUpPublicRules(game) {\n  /*let cleanSlate = {\n    spades: \"return card1 < 13;\",\n    lastcard: \"return lastcard;\",\n    \"have a nice day\": \"return card1 % 13 === 6;\",\n    \"thank you\": \"return card2 % 13 === 6;\",\n    \"i salute the chair\": \"return (card1 % 13) > 9\",\n  };*/\n  let answer = JSON.parse(\n    // '[{\"name\":\"spades\",\"source\":\"return card1 < 13;\",\"owner\":\"everyone\",\"compiled\":[\"5444517789605377000807312023119353348095\",\"22300744866223624195306750046696871313797120\",\"91343850972051964703976448191270384901313003520\",\"374144413581524847427487531791443496555778062417920\",\"1532495518029925775062988930217752561892466943663800320\",\"6277101641850575974658002658171914493511544601246926110720\",\"1606937661135105059069747502754722727590241779965516819988480\",\"1605368768825143605351003146283434881209071198220234113679375\",\"5316911903911500977350890647577493503\",\"21778071158421508003229248092477413392380\",\"89202979464894496781227000186787485255188480\",\"365375403888207858815905792765081539605252014080\",\"1496577654326099389709950127165773986223112249671680\",\"6129982072119703100251955720871010247569867774655201280\",\"25108406567402303898632010632687657974046178404987704442880\",\"1606936511763449409653103733995403102794358138513688774049792\",\"1600660942523603594778126308110251717269675811532557948813375\",\"21267647615646003909403562590309974015\",\"87112284633686032012916992369909653569520\",\"356811917859577987124908000747149941020753920\",\"1461501615552831435263623171060326158421008056320\",\"5986310617304397558839800508663095944892448998686720\",\"24519928288478812401007822883484040990279471098620805120\",\"100433626269609215594528042530750631896184713619950817771520\",\"1606931914276826811986528658958124603610823572706376590295040\",\"1581829637317443552486618955417519061512094264781853289349375\",\"85070590462584015637614250361239896063\",\"348449138534744128051667969479638614278080\",\"0\",\"717022\"],\"hash\":\"17205012832311340811919375832927141639902470640718918663600937074630886418595\"},{\"name\":\"lastcard\",\"source\":\"return lastcard;\",\"owner\":\"everyone\",\"compiledhash\":\"21230679390951108096990554741869645482032749412231210854096376350304594975156\"},{\"name\":\"have a nice day\",\"source\":\"return card1 % 13 === 6;\",\"owner\":\"everyone\",\"compiled\":[\"301300887788293773446888249548557771191567189891548616601600\",\"18389946764422227383232879752063607310570598236088696832\",\"75325221947073443361721875464452535544097170375019302224640\",\"4597486691105556080172894365904359035049782837534261248\",\"18831305486768357704388175322744254607563910502540334072000\",\"1149371659931159785689584661951516033716831152264445952\",\"4707826319078030482184538775353409674104140399675170619440\",\"71835729548524325715753614794864123151675984833609728\",\"294239148230755638131726806199763448429264833878465445900\",\"1205203551153175093787552998194231084766268759566194466406400\",\"73559787057688909532931519008254429242282392944354787328\",\"301300887788293773446887501857810142176388681500077208898560\",\"18389946764422224320691577463617436140199131350137044992\",\"75325221947073430817552701290977018430255642010161336288000\",\"4597486639724639142758338647806064134867324609057783808\",\"18831305276312121928738155101413638696416561598700682477760\",\"287342918194097302863014459179456492606703939334438912\",\"1176956592923022552526907224799053793717059335513861783600\",\"71835729548524325715753436531498466056916399359721472\",\"294239148230755638131726076033017716969129571777419149315\",\"1205203551153175093787550007431240568705554726000308835594240\",\"73559787057688897282766309854469744560796525400548179968\",\"301300887788293723270210805163908073721022568040645345152000\",\"18389946558898556571033354591224256539469298436231135232\",\"75325221105248487714952620405654554785666246394802729911040\",\"1149371672776389211452057836717825970426815757337755648\",\"4707826371692090210107628899196215174868237342055447134400\",\"287342918194097302863013746125993864227665597438885888\",\"12\",\"656804\"],\"hash\":\"2384772224768571088793082997670145304784266395039989777732184072162815188083\"},{\"name\":\"thank you\",\"source\":\"return card2 % 13 === 6;\",\"owner\":\"everyone\",\"compiled\":[\"0\",\"0\",\"0\",\"5575186299632655785383929568162021657018368\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1329227995784915872903807060280328192\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1600660942523603594778126302917954936106100638338328800788480\",\"316912650057057350374175801343\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1606938042762412598915117504100589333820729181655117911293952\",\"75557863725914323419135\",\"0\",\"0\",\"0\",\"0\",\"28819\"],\"hash\":\"1790166872727187973982917880744434754227559549735937037239485954634777301283\"},{\"name\":\"i salute the chair\",\"source\":\"return (card1 % 13) > 9\",\"owner\":\"everyone\",\"compiled\":[\"24136805128304173440493154674583484595123910184866414592\",\"98864353805533894412259961547093952901627536117212834169840\",\"6034201282076042355226923855249471233502839974263717888\",\"24716088451383469487009480111101834172427632534584188469500\",\"1508550303659647218717579868811364794253340887347085312\",\"6179022043789915007867207142651350197261684274573661438015\",\"1205203627478637739094649071182491370150813881911824720588800\",\"386188882052866775047891433137189526063410094465485897743\",\"1581829660888542310596163310129928298755727746930630237158400\",\"96547220513216693761972618698333938380495640739465658368\",\"395457415222135577649039846188375811606510144468851336679360\",\"24136805128304169420907695420997884934011359897054871552\",\"98864353805533877948037920444407336689710530138336753878000\",\"6034201214638588874870319475245459177013363549388341248\",\"24716088175159660031468828570605400789046737098294645752060\",\"377137580129752710007706477673036646546298920376451072\",\"1544755528211467100191565732548758104253640377861943590975\",\"1506504510777198415758766963496225387456302006374142442729472\",\"386188882052866775047890474793335753521982562957862633475\",\"1581829660888542310596159384753503246426040577875405346717440\",\"96547220513216677683630781683991539736045439588219486208\",\"395457415222135511792151681777629346758842120553347015512000\",\"24136804858554355499481277900981836708053454197553364992\",\"98864352700638640125875314282421603156186948393178583008240\",\"1508550320519010840030825910692146586185195681505804288\",\"6179022112845868400766262930195032417014561511447774363900\",\"1205203910331822836409181576961413742258599044148191265013760\",\"1544755528211467100191561899173343014087930251831450533903\",\"64512\",\"988211\"],\"hash\":\"10193634527461628677548098928674737437338433299539938568332421073540891325839\"}]'\n    '[{\"name\": \"spades\", \"source\": \"return card1 < 13;\", \"owner\": \"everyone\", \"compiled\": [\"5444517789605377000807312023119353348095\", \"22300744866223624195306750046696871313797120\", \"91343850972051964703976448191270384901313003520\", \"374144413581524847427487531791443496555778062417920\", \"1532495518029925775062988930217752561892466943663800320\", \"6277101641850575974658002658171914493511544601246926110720\", \"1606937661135105059069747502754722727590241779965516819988480\", \"1605368768825143605351003146283434881209071198220234113679375\", \"5316911903911500977350890647577493503\", \"21778071158421508003229248092477413392380\", \"89202979464894496781227000186787485255188480\", \"365375403888207858815905792765081539605252014080\", \"1496577654326099389709950127165773986223112249671680\", \"6129982072119703100251955720871010247569867774655201280\", \"25108406567402303898632010632687657974046178404987704442880\", \"1606936511763449409653103733995403102794358138513688774049792\", \"1600660942523603594778126308110251717269675811532557948813375\", \"21267647615646003909403562590309974015\", \"87112284633686032012916992369909653569520\", \"356811917859577987124908000747149941020753920\", \"1461501615552831435263623171060326158421008056320\", \"5986310617304397558839800508663095944892448998686720\", \"24519928288478812401007822883484040990279471098620805120\", \"100433626269609215594528042530750631896184713619950817771520\", \"1606931914276826811986528658958124603610823572706376590295040\", \"1581829637317443552486618955417519061512094264781853289349375\", \"85070590462584015637614250361239896063\", \"348449138534744128051667969479638614278080\", \"0\", \"717022\"], \"hash\": \"17205012832311340811919375832927141639902470640718918663600937074630886418595\", \"penalty\": 1}, {\"name\": \"lastcard\", \"source\": \"return lastcard;\", \"owner\": \"everyone\", \"compiled\": [\"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"1071292029505993517027974728227441735014801995855195223534250\", \"174762\", \"465140\"], \"hash\": \"21230679390951108096990554741869645482032749412231210854096376350304594975156\", \"penalty\": 2}, {\"name\": \"have a nice day\", \"source\": \"return card1 % 13 === 6;\", \"owner\": \"everyone\", \"compiled\": [\"301300887788293773446888249548557771191567189891548616601600\", \"18389946764422227383232879752063607310570598236088696832\", \"75325221947073443361721875464452535544097170375019302224640\", \"4597486691105556080172894365904359035049782837534261248\", \"18831305486768357704388175322744254607563910502540334072000\", \"1149371659931159785689584661951516033716831152264445952\", \"4707826319078030482184538775353409674104140399675170619440\", \"71835729548524325715753614794864123151675984833609728\", \"294239148230755638131726806199763448429264833878465445900\", \"1205203551153175093787552998194231084766268759566194466406400\", \"73559787057688909532931519008254429242282392944354787328\", \"301300887788293773446887501857810142176388681500077208898560\", \"18389946764422224320691577463617436140199131350137044992\", \"75325221947073430817552701290977018430255642010161336288000\", \"4597486639724639142758338647806064134867324609057783808\", \"18831305276312121928738155101413638696416561598700682477760\", \"287342918194097302863014459179456492606703939334438912\", \"1176956592923022552526907224799053793717059335513861783600\", \"71835729548524325715753436531498466056916399359721472\", \"294239148230755638131726076033017716969129571777419149315\", \"1205203551153175093787550007431240568705554726000308835594240\", \"73559787057688897282766309854469744560796525400548179968\", \"301300887788293723270210805163908073721022568040645345152000\", \"18389946558898556571033354591224256539469298436231135232\", \"75325221105248487714952620405654554785666246394802729911040\", \"1149371672776389211452057836717825970426815757337755648\", \"4707826371692090210107628899196215174868237342055447134400\", \"287342918194097302863013746125993864227665597438885888\", \"12\", \"656804\"], \"hash\": \"2384772224768571088793082997670145304784266395039989777732184072162815188083\", \"penalty\": 1}, {\"name\": \"thank you\", \"source\": \"return card2 % 13 === 6;\", \"owner\": \"everyone\", \"compiled\": [\"0\", \"0\", \"0\", \"5575186299632655785383929568162021657018368\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1329227995784915872903807060280328192\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1600660942523603594778126302917954936106100638338328800788480\", \"316912650057057350374175801343\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1606938042762412598915117504100589333820729181655117911293952\", \"75557863725914323419135\", \"0\", \"0\", \"0\", \"0\", \"28819\"], \"hash\": \"1790166872727187973982917880744434754227559549735937037239485954634777301283\", \"penalty\": 1}, {\"name\": \"i salute the chair\", \"source\": \"return (card1 % 13) > 9\", \"owner\": \"everyone\", \"compiled\": [\"24136805128304173440493154674583484595123910184866414592\", \"98864353805533894412259961547093952901627536117212834169840\", \"6034201282076042355226923855249471233502839974263717888\", \"24716088451383469487009480111101834172427632534584188469500\", \"1508550303659647218717579868811364794253340887347085312\", \"6179022043789915007867207142651350197261684274573661438015\", \"1205203627478637739094649071182491370150813881911824720588800\", \"386188882052866775047891433137189526063410094465485897743\", \"1581829660888542310596163310129928298755727746930630237158400\", \"96547220513216693761972618698333938380495640739465658368\", \"395457415222135577649039846188375811606510144468851336679360\", \"24136805128304169420907695420997884934011359897054871552\", \"98864353805533877948037920444407336689710530138336753878000\", \"6034201214638588874870319475245459177013363549388341248\", \"24716088175159660031468828570605400789046737098294645752060\", \"377137580129752710007706477673036646546298920376451072\", \"1544755528211467100191565732548758104253640377861943590975\", \"1506504510777198415758766963496225387456302006374142442729472\", \"386188882052866775047890474793335753521982562957862633475\", \"1581829660888542310596159384753503246426040577875405346717440\", \"96547220513216677683630781683991539736045439588219486208\", \"395457415222135511792151681777629346758842120553347015512000\", \"24136804858554355499481277900981836708053454197553364992\", \"98864352700638640125875314282421603156186948393178583008240\", \"1508550320519010840030825910692146586185195681505804288\", \"6179022112845868400766262930195032417014561511447774363900\", \"1205203910331822836409181576961413742258599044148191265013760\", \"1544755528211467100191561899173343014087930251831450533903\", \"64512\", \"988211\"], \"hash\": \"10193634527461628677548098928674737437338433299539938568332421073540891325839\", \"penalty\": 1}]'\n  );\n  let index = 0;\n  for (const rule of answer) {\n    if (index >= config.NUM_CLEAN_SLATE_RULES) break;\n    game.myRules.push(rule);\n    const publicRule = rules.publicRule(rule);\n    game.allRules.push(publicRule);\n    update(game);\n    index++;\n  }\n}\nfunction resetPhase(game, phase, args) {\n  assert(PHASES.includes(phase), game);\n  let data = {};\n  if (phase === PHASE.SETUP) {\n    data = {\n      state: SETUP_STATE.PRE_READY,\n      players: [game.userId],\n      readyHashes: {},\n      startNumbers: {},\n      myRandom: null,\n    };\n  } else if (phase === PHASE.PLAY) {\n    // shuffle the player list\n    // note: we need to sort it first before we do it so everyone gets the same list\n\n    data.players = utils.shuffle(\n      [...game.data[PHASE.SETUP].players].sort(),\n      args.rng\n    );\n\n    data.nextTurn = 0;\n\n    data.playedCards = []; // start empty\n\n    // now deal cards\n    data.playerHands = cards.dealShuffledCards(\n      utils.shuffle(data.players, args.rng),\n      args.rng,\n      config.START_FROM_RANK\n    );\n\n    data.state = PLAY_STATE.WAIT_FOR_PLAY;\n\n    data.acksReceived = [];\n    data.lastPlayedCard = null;\n    data.lastPlayedUser = null;\n    data.lastSelectedRules = null;\n    data.penaltyRules = [];\n    data.snarkStatus = null;\n  } else if (phase === PHASE.GAMEOVER) {\n    data.winner = args.winner;\n    data.sentFinalize = false;\n    data.finalizedReceived = [];\n    data.readyToRestart = false;\n    data.didDrawTokens = false;\n    data.drawnTokens = [];\n    data.compilingRule = false;\n    data.snarkStatus = null;\n  }\n  game.data[phase] = data;\n}\nfunction initPhase(game, phase, args) {\n  assert(PHASES.includes(phase), game);\n  resetPhase(game, phase, args);\n  game.phase = phase;\n}\nexport function addListener(game, listener) {\n  const indx = game.listenerIndex;\n  game.listeners[indx] = listener;\n  game.listenerIndex = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeListener(game, key) {\n  if (!game) return;\n  console.log(`removing key ${key} from game ${game}`);\n  console.log(game);\n  delete game.listeners[key];\n}\n// this function needs to be called every time the game state is updated!!!!!!!!\nfunction update(game) {\n  for (let listener of Object.values(game.listeners)) {\n    listener();\n  }\n}\n\n// m should be on form {data: , method: , ...}\nexport function receive(game, m) {\n  console.log(\"game receiving message!\");\n  console.log(m);\n  if (m.type !== \"data\") {\n    console.log(\"ignoring non-data message\");\n    return;\n  }\n  assert(METHODS.includes(m.method));\n  console.log(METHOD_HANDLER);\n  METHOD_HANDLER[m.method](game, m);\n}\nfunction send(game, m) {\n  // TODO: sign the message\n  m[\"from\"] = game.userId;\n  p2p.sendData(game.conn, m);\n}\n\nfunction handleReadyMethod(game, m) {\n  // should be in setup phase, or gameover phase\n  if (!(game.phase === PHASE.SETUP || game.phase === PHASE.GAMEOVER))\n    return abort(game);\n  const data = game.data[PHASE.SETUP];\n  // should not have sent start already\n  if (\n    !(\n      data.state === SETUP_STATE.PRE_READY ||\n      data.state === SETUP_STATE.SENT_READY\n    )\n  ) {\n    return abort(game);\n  }\n\n  const user = m.from;\n  const hash = m.hash;\n\n  // shouldn't receive twice; should have different IDs\n  if (data.players.includes(user)) return abort(game);\n\n  data.players.push(user);\n  data.readyHashes[user] = hash;\n\n  // if we have received all, send start\n  maybeSendStart(game);\n\n  update(game);\n}\nasync function handleStartMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) return abort(game, \"wrong phase\");\n  const data = game.data[PHASE.SETUP];\n  // should have sent ready (not necessarily should have sent start though)\n  if (\n    !(\n      data.state === SETUP_STATE.SENT_READY ||\n      data.state === SETUP_STATE.SENT_START\n    )\n  ) {\n    return abort(game);\n  }\n\n  const user = m.from;\n  const randomNumber = m.randomNumber;\n\n  // shouldn't receive twice\n  if (Object.keys(data.startNumbers).includes(user)) return abort(game);\n\n  // should receive from verified user\n  if (!data.players.includes(user)) return abort(game, `unknown user ${user}`);\n\n  // assert that the hash is ok\n  const randomNumberHash = await utils.hash(`${randomNumber}`);\n  if (data.readyHashes[user] !== randomNumberHash)\n    return abort(\n      game,\n      `incorrect hash ${randomNumberHash} received for random number ${randomNumber} from user ${user}`\n    );\n\n  // add to numbers\n  data.startNumbers[user] = randomNumber;\n\n  // if we have received all, go to the game!!\n  maybeStartGame(game);\n\n  update(game);\n}\nasync function handlePlayMethod(game, m) {\n  if (game.phase !== PHASE.PLAY) return abort(game, \"wrong phase\");\n  const data = game.data[game.phase];\n  if (data.state !== PLAY_STATE.WAIT_FOR_PLAY)\n    return abort(game, \"wrong state\");\n\n  const user = m.from;\n  const card = m.card;\n  const selectedRules = m.rules;\n  const provedRules = m.provedRules;\n\n  // make sure it is this user's turn\n  if (user !== data.players[data.nextTurn]) {\n    return abort(game, \"user tried to make move but it's not their turn\");\n  }\n\n  // make sure this user owns this card (or it is voidcard)\n  if (\n    card !== cards.VOID_CARD &&\n    !data.playerHands[user].some((c) => cards.sameCard(c, card))\n  ) {\n    return abort(game, \"user tried to play card not in their hand\");\n  }\n\n  // make sure the card move is legal\n  if (!legalToPlayCard(game, card)) {\n    return abort(game, \"user tried to play illegal card\");\n  }\n\n  // verify that provedRules contains all the (1) public rules and (2) user's rules\n  const userRulesHashes = game.allRules\n    .filter((r) => r.owner === rules.EVERYONE || r.owner === user)\n    .map((r) => r.hash);\n  const provedRulesHashes = provedRules.map((r) => r.rule.hash);\n  // these arrays need to contain the same set\n  if (\n    JSON.stringify(userRulesHashes.sort()) !==\n    JSON.stringify(provedRulesHashes.sort())\n  ) {\n    return abort(game, \"did not prove outcomes for all rules user knows of\");\n  }\n  const penalties = await rules.verifyPenalties(\n    card,\n    data.playedCards,\n    data.playerHands[user].filter((c) => !cards.sameCard(c, card)),\n    selectedRules,\n    provedRules\n  );\n  if (penalties === rules.INCORRECT_PENALTIES) {\n    return abort(game, \"proofs were incorrect somehow :(\");\n  }\n  recordPenalties(game, penalties);\n\n  // actually do the move\n  actuallyPlayCard(game, user, card, selectedRules);\n\n  sendPlayAck(game, user, card, selectedRules);\n\n  update(game);\n}\nasync function handlePlayAckMethod(game, m) {\n  if (game.phase !== PHASE.PLAY) return abort(game, \"wrong phase\");\n  const data = game.data[game.phase];\n  if (data.state !== PLAY_STATE.WAIT_FOR_PLAYACK)\n    return abort(game, \"wrong state\");\n\n  const user = m.user;\n  const from = m.from;\n  const card = m.card;\n  const provedRules = m.provedRules;\n\n  // make sure the right user n right card was acked\n  if (user !== data.lastPlayedUser) {\n    return abort(game, \"tried to ack the wrong user\");\n  }\n  if (!cards.sameCard(card, data.lastPlayedCard)) {\n    return abort(game, \"tried to ack the wrong card\");\n  }\n\n  if (data.acksReceived.includes(from)) {\n    return abort(game, \"already received ack from this user\");\n  }\n\n  // verify that provedRules contains all the (1) public rules and (2) user's rules\n  const userRulesHashes = game.allRules\n    .filter((r) => r.owner === rules.EVERYONE || r.owner === from)\n    .map((r) => r.hash);\n  const provedRulesHashes = provedRules.map((r) => r.rule.hash);\n  // these arrays need to contain the same set\n  if (\n    JSON.stringify(userRulesHashes.sort()) !==\n    JSON.stringify(provedRulesHashes.sort())\n  ) {\n    return abort(game, \"did not prove outcomes for all rules user knows of\");\n  }\n\n  const penalties = await rules.verifyPenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    data.playerHands[user],\n    data.lastSelectedRules,\n    provedRules\n  );\n  if (penalties === rules.INCORRECT_PENALTIES) {\n    return abort(game, \"proofs were incorrect somehow :(\");\n  }\n  recordPenalties(game, penalties);\n\n  data.acksReceived.push(from);\n\n  maybeStopWaitingForAcks(game);\n\n  update(game);\n}\nfunction recordPenalties(game, penalties) {\n  const data = game.data[game.phase];\n  for (const penalty of penalties) {\n    if (!data.penaltyRules.includes(penalty)) {\n      data.penaltyRules.push(penalty);\n    }\n  }\n}\nfunction enforcePenalties(game, user, penalties) {\n  console.log(\"enforce penalties:\");\n  console.log(penalties);\n  const data = game.data[game.phase];\n  // just take cards from the played cards as long as we can do so\n  // take from the bottom\n  for (let i = 0; i < penalties.length && data.playedCards.length > 0; i++) {\n    for (\n      let j = 0;\n      j < penalties[i].penalty && data.playedCards.length > 0;\n      j++\n    ) {\n      const bottomCard = data.playedCards[0];\n      data.playerHands[user].push(bottomCard);\n      data.playedCards.splice(0, 1);\n    }\n  }\n  const totalPenalty = penalties.reduce((acc, v) => acc + v.penalty, 0);\n  console.log(`total penalty is: ${totalPenalty}`);\n  console.log(\"right before updating the game:\");\n  console.log(utils.objectify(game));\n  update(game);\n}\nasync function handleFinalizeMethod(game, m) {\n  console.log(\"FINALIZE message received\");\n  console.log(m);\n\n  if (game.phase !== PHASE.GAMEOVER) return abort(game, \"wrong phase\");\n  const data = game.data[game.phase];\n\n  const user = m.from;\n  const rule = m.rule;\n  const drawnTokens = m.drawnTokens;\n  const tokenID = m.tokenID;\n  const playedToken = m.playedToken;\n\n  if (data.finalizedReceived.includes(user)) {\n    return abort(game, \"received two finalized from the same user\");\n  }\n\n  // verify that the drawn tokens are correct\n  for (const drawnToken of drawnTokens) {\n    const verification = await tokens.verifyDrawnToken(\n      game.tokenState,\n      drawnToken,\n      user,\n      game.playerRandoms[game.userId],\n      game.numRounds,\n      game.playerRandoms[user]\n    );\n    if (verification === tokens.INCORRECTLY_DRAWN_TOKEN) {\n      return abort(game, \"token was not drawn correctly\");\n    }\n  }\n\n  if (rule) {\n    game.allRules.push(rule);\n    const verification = await tokens.verifyPlayedToken(\n      game.tokenState,\n      playedToken,\n      tokenID,\n      user\n    );\n    if (verification === tokens.INCORRECTLY_PLAYED_TOKEN) {\n      return abort(game, \"token was not played correctly\");\n    }\n    // check that the rule has the correct penalty given the played tokenID\n    if (rule.penalty !== tokens.tokenIdToPower(tokenID)) {\n      return abort(\n        game,\n        \"token was played correctly, but an unrelated penalty was used for the rule lol\"\n      );\n    }\n  }\n\n  data.finalizedReceived.push(user);\n\n  maybeFinishFinalize(game);\n\n  update(game);\n}\nfunction maybeFinishFinalize(game) {\n  assert(game.phase === PHASE.GAMEOVER, \"duh\");\n  const data = game.data[game.phase];\n  if (\n    data.finalizedReceived.length ===\n      game.data[PHASE.PLAY].players.length - 1 &&\n    data.sentFinalize\n  ) {\n    console.log(\"finish finalize\");\n    console.log(game);\n    // yay transition out of this\n    data.readyToRestart = true;\n    update(game);\n  }\n}\nfunction handleAbortMethod(game, m) {\n  console.log(\"ABORTING :(((( SAD\");\n  utils.unimplemented();\n\n  update(game);\n}\n\nfunction abort(game, reason) {\n  console.error(\"ABORT GAME :((\");\n  console.error(reason);\n  send(game, { method: METHOD.ABORT, reason });\n  game.phase = PHASE.ABORT;\n\n  update(game);\n}\n\nfunction actuallyPlayCard(game, user, card, selectedRules) {\n  const data = game.data[game.phase];\n  data.nextTurn = (data.nextTurn + 1) % data.players.length;\n  data.state = PLAY_STATE.WAIT_FOR_PLAYACK;\n  data.lastPlayedCard = card;\n  data.lastPlayedUser = user;\n  data.lastSelectedRules = selectedRules;\n  if (card !== cards.VOID_CARD) {\n    data.playedCards.push(card);\n    data.playerHands[user] = data.playerHands[user].filter(\n      (c) => c.index !== card.index\n    );\n  }\n  update(game);\n}\n\nfunction legalToPlayCard(game, card) {\n  const data = game.data[game.phase];\n  // always ok to pass\n  if (card === cards.VOID_CARD) return true;\n  // first move always legal\n  if (data.playedCards.length === 0) return true;\n  // either suit or rank must be the same\n  const lastcard = data.playedCards[data.playedCards.length - 1];\n  return lastcard.suit === card.suit || lastcard.rank === card.rank;\n}\n\nexport async function playCard(game, card, selectedRules) {\n  assert(game.phase === PHASE.PLAY && isMyTurn(game), game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAY, game);\n  assert(\n    card === cards.VOID_CARD ||\n      data.playerHands[game.userId].some((c) => cards.sameCard(c, card)),\n    game\n  );\n  assert(\n    selectedRules.every(\n      (rule) => game.allRules.filter((x) => rules.sameRule(x, rule)).length > 0\n    ),\n    game\n  );\n  console.log(`play card!`);\n  console.log(card);\n  console.log(selectedRules);\n\n  assert(legalToPlayCard(game, card), game);\n\n  // we do this for ourselves. we need to run the snarks\n  // to prove to others that we enforce our own rules correctly even on ourselves\n  const provedRules = await rules.determinePenalties(\n    card,\n    data.playedCards,\n    data.playerHands[game.userId].filter((c) => !cards.sameCard(c, card)),\n    selectedRules,\n    game.myRules,\n    (status) => updateSnarkStatus(game, status)\n  );\n  const penalties = await rules.verifyPenalties(\n    card,\n    data.playedCards,\n    data.playerHands[game.userId].filter((c) => !cards.sameCard(c, card)),\n    selectedRules,\n    provedRules\n  );\n  assert(\n    penalties !== rules.INCORRECT_PENALTIES,\n    \"your own penalty calculations were wrong lololol\"\n  );\n  recordPenalties(game, penalties);\n\n  send(game, { method: METHOD.PLAY, card, rules: selectedRules, provedRules });\n\n  actuallyPlayCard(game, game.userId, card, selectedRules);\n  update(game);\n}\n\nexport function restartGame(game) {\n  game.phase = PHASE.SETUP;\n  game.numRounds++;\n\n  sendReady(game);\n}\n\nexport async function sendReady(game) {\n  assert(game.phase === PHASE.SETUP, game);\n  const data = game.data[PHASE.SETUP];\n  assert(data.state === SETUP_STATE.PRE_READY, game);\n  // generate a random number\n  data.myRandom = Math.floor(Math.random() * 2 ** 64);\n  // hash the random number\n  const hash_r = await utils.hash(`${data.myRandom}`);\n  console.log(hash_r);\n  data.readyHashes[game.userId] = hash_r;\n  send(game, { method: METHOD.READY, hash: hash_r });\n  data.state = SETUP_STATE.SENT_READY;\n  maybeSendStart(game);\n\n  update(game);\n}\n\nfunction checkIfWon(game) {\n  assert(game.phase === PHASE.PLAY, game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAY, game);\n\n  for (const user of data.players) {\n    if (data.playerHands[user].length === 0) {\n      // someone won!!!!\n      // assert only one player won\n      assert(\n        Object.values(data.playerHands).filter((l) => l.length === 0).length ===\n          1\n      );\n\n      initPhase(game, PHASE.GAMEOVER, { winner: user });\n    }\n  }\n}\n\nfunction maybeStopWaitingForAcks(game) {\n  const data = game.data[game.phase];\n  // everyone except the player needs to ack the card\n  if (data.acksReceived.length === data.players.length - 1) {\n    enforcePenalties(game, data.lastPlayedUser, data.penaltyRules);\n\n    data.state = PLAY_STATE.WAIT_FOR_PLAY;\n    data.acksReceived = [];\n    data.lastPlayedCard = null;\n    data.lastPlayedUser = null;\n    data.lastSelectedRules = null;\n    data.penaltyRules = [];\n\n    // check if someone won\n    checkIfWon(game);\n\n    update(game);\n  }\n}\n\nasync function sendPlayAck(game, user, card, selectedRules) {\n  assert(game.phase === PHASE.PLAY, game);\n  const data = game.data[game.phase];\n  assert(data.state === PLAY_STATE.WAIT_FOR_PLAYACK, game);\n\n  const provedRules = await rules.determinePenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    data.playerHands[user],\n    selectedRules,\n    game.myRules,\n    (status) => updateSnarkStatus(game, status)\n  );\n  const penalties = await rules.verifyPenalties(\n    card,\n    data.playedCards.slice(0, data.playedCards.length - 1),\n    data.playerHands[user],\n    selectedRules,\n    provedRules\n  );\n  assert(\n    penalties !== rules.INCORRECT_PENALTIES,\n    \"my own proofs were incorrect lolol im stupid\"\n  );\n  recordPenalties(game, penalties);\n\n  send(game, { method: METHOD.PLAYACK, card, user, provedRules });\n\n  assert(!data.acksReceived.includes(game.userId), game);\n  data.acksReceived.push(game.userId);\n\n  maybeStopWaitingForAcks(game);\n\n  update(game);\n}\n\nexport async function drawTokens(game) {\n  assert(game.phase === PHASE.GAMEOVER, \"pls be in gameover state sir\");\n  const data = game.data[game.phase];\n  assert(!data.didDrawTokens, \"cannot draw tokens twice!!!!!\");\n\n  data.didDrawTokens = true;\n\n  update(game);\n\n  const numtokens = myAwardedTokens(game);\n\n  console.log(`drawing ${numtokens} tokens!`);\n\n  for (let i = 0; i < numtokens; i++) {\n    const newSalt = Math.floor(Math.random() * 2 ** 64);\n    updateTokenSnarkStatus(game, `drawing token ${i + 1} of ${numtokens}`);\n    const drawnToken = await tokens.draw(\n      game.tokenState,\n      game.prevSalt,\n      newSalt,\n      game.playerRandoms[game.userId],\n      game.playerRandoms[getOppUserId(game)],\n      game.numRounds,\n      game.userId\n    );\n    game.prevSalt = newSalt;\n    data.drawnTokens.push(drawnToken);\n    const verification = await tokens.verifyDrawnToken(\n      game.tokenState,\n      drawnToken,\n      game.userId,\n      game.playerRandoms[getOppUserId(game)],\n      game.numRounds,\n      game.playerRandoms[game.userId]\n    );\n    assert(\n      verification !== tokens.INCORRECTLY_DRAWN_TOKEN,\n      \"verification is wrong\"\n    );\n    update(game);\n  }\n  updateTokenSnarkStatus(game, null);\n}\n\nfunction maybeStartGame(game) {\n  const data = game.data[game.phase];\n  if (data.players.length === Object.keys(data.startNumbers).length) {\n    startGame(game);\n  }\n}\nexport async function submitRule(game, rule, name, selectedToken) {\n  assert(game.phase === PHASE.GAMEOVER, \"submit rule only when game over lol\");\n  const data = game.data[game.phase];\n  assert(!data.sentFinalize, \"cannot submit rules twice!\");\n\n  console.log(\"creating a rule:\");\n  console.log(rule);\n\n  data.compilingRule = true;\n\n  update(game);\n\n  let rulethings = {};\n  if (rule) {\n    // assert that we own the selected token!!!\n    assert(\n      game.tokenState.myTokens.filter(\n        (tok) =>\n          tok.id === selectedToken.id && tok.state === tokens.TOKEN_STATE.HAND\n      ),\n      \"we need to own the token to use it\"\n    );\n\n    // play the token\n    const newSalt = Math.floor(Math.random() * 2 ** 64);\n    const playedToken = await tokens.play(\n      game.tokenState,\n      selectedToken,\n      game.prevSalt,\n      newSalt,\n      game.userId\n    );\n    game.prevSalt = newSalt;\n    const verification = await tokens.verifyPlayedToken(\n      game.tokenState,\n      playedToken,\n      selectedToken.id,\n      game.userId\n    );\n    assert(\n      verification !== tokens.INCORRECTLY_PLAYED_TOKEN,\n      \"token must be drawn correctly\"\n    );\n    assert(\n      selectedToken.tokenPower === tokens.tokenIdToPower(selectedToken.id),\n      \"id must match the power\"\n    );\n\n    // create a rule\n    const compiledRule = await rules.createPrivateRule(\n      name,\n      rule,\n      game.userId,\n      selectedToken.tokenPower\n    );\n    game.myRules.push(compiledRule);\n    const publicRule = rules.publicRule(compiledRule);\n    game.allRules.push(publicRule);\n    update(game);\n\n    rulethings = {\n      rule: publicRule,\n      tokenID: selectedToken.id,\n      playedToken,\n    };\n  }\n\n  send(game, {\n    method: METHOD.FINALIZE,\n    drawnTokens: data.drawnTokens,\n    ...rulethings,\n  });\n\n  data.sentFinalize = true;\n\n  maybeFinishFinalize(game);\n\n  update(game);\n}\nfunction startGame(game) {\n  assert(game.phase === PHASE.SETUP);\n  const data = game.data[game.phase];\n  assert(data.state === SETUP_STATE.SENT_START, game);\n\n  // xor all the random numbers (which means that as long as at least 1 person honest, it is random)\n  let finalRandomNumber = 0;\n  Object.values(data.startNumbers).forEach((randomNumber) => {\n    finalRandomNumber ^= randomNumber;\n  });\n\n  console.log(`final randomness: ${finalRandomNumber}`);\n  // use this random number as the seed of an rng\n  let rng = seedrandom(`${finalRandomNumber}`);\n\n  game.playerRandoms = { ...data.startNumbers };\n\n  // now we can transition to the game phase\n  // delete the old game object properties\n  initPhase(game, PHASE.PLAY, { rng });\n  resetPhase(game, PHASE.SETUP);\n\n  console.log(\"STARTING GAME!!!! exciting :)))\");\n  console.log(game);\n\n  update(game);\n}\n\nfunction maybeSendStart(game) {\n  const data = game.data[PHASE.SETUP];\n  if (\n    p2p.numConnections(game.conn) ===\n    Object.keys(data.readyHashes).length - 1\n  ) {\n    assert(data.players.length === Object.keys(data.readyHashes).length, game);\n    sendStart(game);\n  }\n}\nasync function sendStart(game) {\n  assert(game.phase === PHASE.SETUP, game);\n  const data = game.data[game.phase];\n  assert(data.state === SETUP_STATE.SENT_READY, game);\n\n  send(game, { method: METHOD.START, randomNumber: data.myRandom });\n\n  data.startNumbers[game.userId] = data.myRandom;\n  data.state = SETUP_STATE.SENT_START;\n\n  // here we want to create a token object if one doesn't already exist\n  if (game.tokenState === null) {\n    game.tokenState = await tokens.createTokenState(data.players);\n  }\n\n  maybeStartGame(game);\n\n  update(game);\n}\n\n// convenience for 2 players\n// TODO: update this for more players\n\nexport function getMyUserId(game) {\n  return game.userId;\n}\nexport function getOppUserId(game) {\n  const data = game.data[PHASE.PLAY];\n  const oppUserId = data.players.filter((x) => x !== getMyUserId(game))[0];\n  return oppUserId;\n}\nexport function getMyHand(game) {\n  const data = game.data[PHASE.PLAY];\n  return [...data.playerHands[getMyUserId(game)]];\n}\nexport function getOppHand(game) {\n  const data = game.data[PHASE.PLAY];\n  const playerHand = data.playerHands[getOppUserId(game)];\n  return [...playerHand];\n}\nfunction isMyTurn(game) {\n  const data = game.data[PHASE.PLAY];\n  return getMyUserId(game) === data.players[data.nextTurn];\n}\nexport function isMyTurnEnabled(game) {\n  const data = game.data[PHASE.PLAY];\n  return isMyTurn(game) && data.state === PLAY_STATE.WAIT_FOR_PLAY;\n}\n\nexport function getPlayedCards(game) {\n  const data = game.data[PHASE.PLAY];\n  return [...data.playedCards];\n}\n\nexport function getWinner(game) {\n  const data = game.data[PHASE.GAMEOVER];\n  return data.winner;\n}\n\nexport function getRules(game) {\n  return [...game.allRules];\n}\n\nexport function getMyTokens(game) {\n  if (game.tokenState === null) {\n    return null;\n  }\n  return [...game.tokenState.myTokens];\n}\n\nexport function isReadyToRestart(game) {\n  const data = game.data[PHASE.GAMEOVER];\n  if (game.phase !== PHASE.GAMEOVER) return false;\n  return data.readyToRestart;\n}\n\nexport function isReadyToDrawTokens(game) {\n  const data = game.data[PHASE.GAMEOVER];\n  if (game.phase !== PHASE.GAMEOVER) return false;\n  return !data.didDrawTokens;\n}\n\nexport function myAwardedTokens(game) {\n  assert(\n    game.phase === PHASE.GAMEOVER,\n    \"u need to be in gameover to get tokens\"\n  );\n  const desiredamt = tokens.awardFunction(getMyHand(game).length);\n  const numtokensleft = game.tokenState.myTokens.filter(\n    (tok) => tok.state === tokens.TOKEN_STATE.STOCK\n  ).length;\n  return Math.min(desiredamt, numtokensleft);\n}\n\nexport function myAvailableTokens(game) {\n  if (!game.tokenState) return [];\n  return [\n    ...game.tokenState.myTokens.filter(\n      (tok) => tok.state === tokens.TOKEN_STATE.HAND\n    ),\n  ];\n}\n\nexport function canSubmitRule(game) {\n  if (game.phase !== PHASE.GAMEOVER) return false;\n  const data = game.data[PHASE.GAMEOVER];\n  return !data.sentFinalize && !data.compilingRule;\n}\n\nexport function getSnarkStatus(game) {\n  if (game.phase !== PHASE.PLAY) return null;\n  const data = game.data[game.phase];\n  return data.snarkStatus;\n}\n\nexport function updateSnarkStatus(game, status) {\n  if (game.phase !== PHASE.PLAY) return;\n  game.data[game.phase].snarkStatus = status;\n  update(game);\n}\n\nexport function getTokenSnarkStatus(game) {\n  if (game.phase !== PHASE.GAMEOVER) return null;\n  const data = game.data[game.phase];\n  return data.snarkStatus;\n}\n\nexport function updateTokenSnarkStatus(game, status) {\n  if (game.phase !== PHASE.GAMEOVER) return;\n  game.data[game.phase].snarkStatus = status;\n  update(game);\n}\n","import React from \"react\";\nimport { useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\n\nexport function Chat(props) {\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  function onSendMessage() {\n    p2p.sendMessage(props.connRef.current, chatMessage);\n    newMessage(chatMessage);\n    setChatMessage(\"\");\n  }\n\n  function newMessage(m) {\n    setMessages((oldm) => {\n      if (oldm === \"\") return m;\n      return m + \"\\n\" + oldm;\n    });\n  }\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(props.connRef.current, (m) => {\n      if (m.type === \"message\") return newMessage(m.message);\n      newMessage(JSON.stringify(m));\n    });\n    return () => {\n      console.log(`cleaning up chat!!! index ${indx}`);\n      p2p.removeMessageHandler(props.connRef.current, indx);\n    };\n  }, [props.connRef]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={chatMessage}\n        onChange={(e) => setChatMessage(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onSendMessage() : 0)}\n        placeholder=\"(say hi)\"\n      ></input>\n      <button onClick={onSendMessage}>send message</button>\n      <p style={{ whiteSpace: \"pre-line\", color: \"rgba(0,0,0,0.5)\" }}>\n        {messages}\n      </p>\n    </div>\n  );\n}\n","import \"./Game.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as logic from \"./logic.js\";\nimport * as cards from \"./cards.js\";\nimport * as utils from \"./utils.js\";\nimport * as rules from \"./rules.js\";\nimport * as tokens from \"./tokens.js\";\n\nimport { Chat } from \"./Chat.js\";\n\nfunction Setup() {\n  return <div>waiting for everyone else to press start...</div>;\n}\n\nfunction Play(props) {\n  const [playedCards, setPlayedCards] = useState(\n    logic.getPlayedCards(props.gameRef.current)\n  );\n  const [myHand, setMyHand] = useState(logic.getMyHand(props.gameRef.current));\n  const [oppHand, setOppHand] = useState(\n    logic.getOppHand(props.gameRef.current)\n  );\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n  const [oppUserId, setOppUserId] = useState(\n    logic.getOppUserId(props.gameRef.current)\n  );\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [myTurn, setMyTurn] = useState(\n    logic.isMyTurnEnabled(props.gameRef.current)\n  );\n  const [selectedRules, setSelectedRules] = useState([]);\n  const [snarkStatus, setSnarkStatus] = useState(\n    logic.getSnarkStatus(props.gameRef.current)\n  );\n\n  const changeCard = useCallback((e) => {\n    setSelectedCard(e.currentTarget.value);\n  }, []);\n\n  const toggleRule = useCallback(\n    (e) => {\n      const rule = JSON.parse(e.currentTarget.value);\n      console.log(`toggling rule ${rule.name}`);\n      if (selectedRules.filter((x) => rules.sameRule(x, rule)).length > 0) {\n        setSelectedRules(selectedRules.filter((x) => !rules.sameRule(x, rule)));\n      } else {\n        setSelectedRules([rule, ...selectedRules]);\n      }\n    },\n    [selectedRules]\n  );\n\n  const updateGameState = useCallback(() => {\n    console.log(\"updating game state in Play :))))))\");\n    console.log(utils.objectify(props.gameRef.current));\n    setPlayedCards(logic.getPlayedCards(props.gameRef.current));\n    setMyHand(logic.getMyHand(props.gameRef.current));\n    setOppHand(logic.getOppHand(props.gameRef.current));\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n    setOppUserId(logic.getOppUserId(props.gameRef.current));\n    setMyTurn(logic.isMyTurnEnabled(props.gameRef.current));\n    setSnarkStatus(logic.getSnarkStatus(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      <Hand cards={oppHand} user={oppUserId} />\n      <PlayedCards cards={playedCards} />\n      <MyHand\n        cards={myHand}\n        user={myUserId}\n        changeCard={changeCard}\n        selectedCard={selectedCard}\n      />\n      <SelectRule\n        rules={props.rules}\n        selectedRules={selectedRules}\n        toggleRule={toggleRule}\n      />\n      <PlayButton\n        disabled={!myTurn || props.disabled}\n        play={() => {\n          if (selectedCard === null) {\n            return alert(\"pls select a card!\");\n          }\n          logic.playCard(\n            props.gameRef.current,\n            cards.deserializeCard(selectedCard),\n            selectedRules\n          );\n          setSelectedRules([]);\n          setSelectedCard(null);\n        }}\n        pass={() => {\n          logic.playCard(props.gameRef.current, cards.VOID_CARD, selectedRules);\n          setSelectedRules([]);\n          setSelectedCard(null);\n        }}\n      />\n      {snarkStatus && <Loading text={snarkStatus} />}\n    </div>\n  );\n}\nfunction Loading(props) {\n  return <div>{props.text}...</div>;\n}\n\nfunction SelectRule(props) {\n  return (\n    <div style={{ marginTop: \"5px\", marginBottom: \"7px\" }}>\n      actions:{props.rules.length === 0 ? \" (none)\" : \"\"}\n      <div className=\"SelectRule\">\n        {props.rules.map((rule, index) => {\n          return (\n            <React.Fragment key={`rulesfragment${index}`}>\n              <input\n                type=\"checkbox\"\n                name=\"rules\"\n                value={JSON.stringify(rule)}\n                checked={\n                  props.selectedRules.filter((x) => rules.sameRule(x, rule))\n                    .length > 0\n                }\n                onChange={props.toggleRule}\n                id={rule.hash}\n                key={`rulesradio${index}`}\n              />\n              <label htmlFor={rule.hash} key={`ruleslabel${index}`}>\n                {rule.name}\n              </label>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction PlayButton(props) {\n  return (\n    <div>\n      <button onClick={props.play} disabled={props.disabled}>\n        play!\n      </button>\n      <button onClick={props.pass} disabled={props.disabled}>\n        pass\n      </button>\n    </div>\n  );\n}\n\nfunction PlayedCards(props) {\n  return (\n    <div style={{ margin: \"5px\" }}>\n      played cards: <Deck cards={props.cards} />\n    </div>\n  );\n}\n\nfunction Hand(props) {\n  return (\n    <div>\n      {props.user}'s cards:\n      <Deck cards={props.cards} />\n    </div>\n  );\n}\nfunction MyHand(props) {\n  return (\n    <div>\n      my cards:\n      <SelectableDeck\n        cards={props.cards}\n        changeCard={props.changeCard}\n        selectedCard={props.selectedCard}\n      />\n    </div>\n  );\n}\nfunction Deck(props) {\n  return <SelectableDeck cards={props.cards} disabled={true} />;\n}\nfunction SelectableDeck(props) {\n  if (props.cards.length === 0) {\n    return <div>(none)</div>;\n  }\n  return (\n    <div style={{ fontSize: \"4em\" }} className=\"SelectableDeck\">\n      {props.cards.map((card, index) => {\n        return (\n          <React.Fragment key={`mycardsfragment${index}`}>\n            <input\n              type=\"radio\"\n              name=\"mycards\"\n              value={cards.serializeCard(card)}\n              checked={props.selectedCard === cards.serializeCard(card)}\n              onChange={props.changeCard}\n              id={cards.serializeCardASCII(card)}\n              key={`mycardsradio${index}`}\n              disabled={props.disabled}\n            />\n            <label\n              htmlFor={cards.serializeCardASCII(card)}\n              key={`mycardslabel${index}`}\n              style={props.disabled ? { cursor: \"default\" } : {}}\n            >\n              {cards.serializeCard(card)}\n            </label>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction GameOver(props) {\n  const [winner, setWinner] = useState(logic.getWinner(props.gameRef.current));\n  const [readyToRestart, setReadyToRestart] = useState(\n    logic.isReadyToRestart(props.gameRef.current)\n  );\n  const [endedWithCards, setEndedWithCards] = useState(\n    logic.getMyHand(props.gameRef.current).length\n  );\n  const [readyToDrawTokens, setReadyToDrawTokens] = useState(\n    logic.isReadyToDrawTokens(props.gameRef.current)\n  );\n  const [nTokens, setNtokens] = useState(\n    logic.myAwardedTokens(props.gameRef.current)\n  );\n  const [myAvailableTokens, setMyAvailableTokens] = useState(\n    logic.myAvailableTokens(props.gameRef.current)\n  );\n  const [canSubmit, setCanSubmit] = useState(\n    logic.canSubmitRule(props.gameRef.current)\n  );\n  const [snarkStatus, setSnarkStatus] = useState(\n    logic.getTokenSnarkStatus(props.gameRef.current)\n  );\n\n  const updateGameState = useCallback(() => {\n    setWinner(logic.getWinner(props.gameRef.current));\n    setReadyToRestart(logic.isReadyToRestart(props.gameRef.current));\n    setEndedWithCards(logic.getMyHand(props.gameRef.current).length);\n    setReadyToDrawTokens(logic.isReadyToDrawTokens(props.gameRef.current));\n    setNtokens(logic.myAwardedTokens(props.gameRef.current));\n    setMyAvailableTokens(logic.myAvailableTokens(props.gameRef.current));\n    setCanSubmit(logic.canSubmitRule(props.gameRef.current));\n    setSnarkStatus(logic.getTokenSnarkStatus(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      <div style={{ fontSize: \"2em\" }}>\n        game over!! {winner === props.userId ? \"you\" : winner} won!\n      </div>\n      because you ended with {endedWithCards} card\n      {endedWithCards === 1 ? \"\" : \"s\"} left, you are awarded {nTokens} token\n      {nTokens === 1 ? \"\" : \"s\"}, randomly drawn from the available tokens:\n      <br />\n      <button\n        onClick={() => logic.drawTokens(props.gameRef.current)}\n        disabled={!readyToDrawTokens}\n      >\n        draw {nTokens} token{nTokens === 1 ? \"\" : \"s\"}!\n      </button>\n      <CreateRule\n        tokens={myAvailableTokens}\n        gameRef={props.gameRef}\n        canSubmit={canSubmit}\n      />\n      {readyToRestart && (\n        <button onClick={() => logic.restartGame(props.gameRef.current)}>\n          play again!\n        </button>\n      )}\n      {snarkStatus && <Loading text={snarkStatus} />}\n    </div>\n  );\n}\n\nfunction CreateRule(props) {\n  const [rule, setRule] = useState(\"\");\n  const [selectedToken, setSelectedToken] = useState(null);\n  const [ruleName, setRuleName] = useState(\"\");\n\n  const zeroTokens = props.tokens.filter((t) => t.tokenPower > 0).length === 0;\n\n  return (\n    <div>\n      create a rule:\n      <br />\n      {!zeroTokens && \"token (# penalty cards):\"}{\" \"}\n      {props.tokens\n        .filter((t) => t.tokenPower > 0)\n        .map((token, index) => {\n          return (\n            <React.Fragment key={`token${index}`}>\n              <input\n                type=\"radio\"\n                name=\"tokens\"\n                value={token.tokenPower}\n                checked={\n                  selectedToken === null ? false : selectedToken.id === token.id\n                }\n                onChange={() => setSelectedToken(token)}\n                id={token.id}\n                key={`tokeninp${index}`}\n              />\n              <label htmlFor={token.id} key={`tokenlab${index}`}>\n                {token.tokenPower}\n              </label>\n            </React.Fragment>\n          );\n        })}\n      {!zeroTokens && <br />}\n      {zeroTokens && (\n        <React.Fragment>\n          <span>\n            you don't have any valuable tokens so you can't create any rules :(\n          </span>\n          <br />\n        </React.Fragment>\n      )}\n      <input\n        type=\"text\"\n        value={ruleName}\n        onChange={(e) => setRuleName(e.target.value)}\n        placeholder=\"(rule name)\"\n        disabled={!props.canSubmit || zeroTokens}\n      />\n      <br />\n      <span style={{ fontSize: \"0.8em\", color: \"rgba(0,0,0,0.5)\" }}>\n        {\n          \"function rule(card1: number, card2: number, lastcard: boolean) -> boolean:\"\n        }\n      </span>\n      <br />\n      <textarea\n        style={{ width: \"250px\", height: \"50px\" }}\n        value={rule}\n        onChange={(e) => setRule(e.target.value)}\n        placeholder=\"(rule code)\"\n        disabled={!props.canSubmit || zeroTokens}\n      />\n      <br />\n      <button\n        onClick={() => {\n          if (selectedToken === null) {\n            return alert(\"pls select a token\");\n          }\n          if (ruleName === \"\") {\n            return alert(\"pls enter a rule name\");\n          }\n          if (rule === \"\") {\n            return alert(\"pls enter rule code\");\n          }\n          logic.submitRule(\n            props.gameRef.current,\n            rule,\n            ruleName,\n            selectedToken\n          );\n        }}\n        disabled={!props.canSubmit || zeroTokens}\n      >\n        create rule!\n      </button>\n      <button\n        onClick={() =>\n          logic.submitRule(props.gameRef.current, null, null, null)\n        }\n        disabled={!props.canSubmit}\n      >\n        skip creating a rule\n      </button>\n    </div>\n  );\n}\n\nfunction Rules(props) {\n  return (\n    <div>\n      active rules:{\" \"}\n      {props.rules.length > 0 && (\n        <ul>\n          {props.rules.map((rule) => {\n            return (\n              <li key={rule.hash}>\n                <Rule rule={rule} key={rule.hash} />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {props.rules.length === 0 && <span>(none)</span>}\n    </div>\n  );\n}\nfunction Rule(props) {\n  const rule = props.rule;\n  return (\n    <span title={\"hash: \" + rule.hash}>\n      {rule.name} (penalty {rule.penalty}, owned by {rule.owner})\n    </span>\n  );\n}\n\nfunction Tokens(props) {\n  const tokenStock = props.tokens.filter(\n    (token) => token.state === tokens.TOKEN_STATE.STOCK\n  );\n  const myTokens = props.tokens.filter(\n    (token) => token.state === tokens.TOKEN_STATE.HAND\n  );\n\n  return (\n    <div>\n      my tokens:{\" \"}\n      {myTokens.length === 0 ? \"none\" : tokens.serializeTokens(myTokens)}{\" \"}\n      (available tokens: {tokens.serializeTokens(tokenStock)})\n    </div>\n  );\n}\n\nexport function Game(props) {\n  const [phase, setPhase] = useState(props.gameRef.current.phase);\n  const [myUserId, setMyUserId] = useState(\n    logic.getMyUserId(props.gameRef.current)\n  );\n  const [rules, setRules] = useState(logic.getRules(props.gameRef.current));\n  const [tokens, setTokens] = useState(\n    logic.getMyTokens(props.gameRef.current)\n  );\n\n  const updateGameState = useCallback(() => {\n    setPhase(props.gameRef.current.phase);\n    setMyUserId(logic.getMyUserId(props.gameRef.current));\n    setRules(logic.getRules(props.gameRef.current));\n    setTokens(logic.getMyTokens(props.gameRef.current));\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef, updateGameState]);\n\n  return (\n    <div>\n      welcome to the game, {myUserId}!\n      <hr />\n      {phase === logic.PHASE.GAMEOVER && (\n        <React.Fragment>\n          <GameOver gameRef={props.gameRef} userId={myUserId} />\n          <hr />\n        </React.Fragment>\n      )}\n      {phase === logic.PHASE.SETUP && (\n        <React.Fragment>\n          <Setup />\n          <hr />\n        </React.Fragment>\n      )}\n      <Rules rules={rules} />\n      {tokens && <Tokens tokens={tokens} />}\n      <hr />\n      {(phase === logic.PHASE.PLAY || phase === logic.PHASE.GAMEOVER) && (\n        <React.Fragment>\n          <Play\n            gameRef={props.gameRef}\n            disabled={phase === logic.PHASE.GAMEOVER}\n            rules={rules}\n          />\n          <hr />\n        </React.Fragment>\n      )}\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\n\nimport { Game } from \"./Game.js\";\nimport { Chat } from \"./Chat.js\";\n\nfunction Create1(props) {\n  return (\n    <div>\n      <button\n        onClick={() => p2p.createOffer(props.connRef.current, props.setMyOffer)}\n      >\n        create game\n      </button>\n    </div>\n  );\n}\n\nfunction Create2(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n\n  const onAddPlayer = useCallback(() => {\n    p2p.acceptAnswer(props.connRef.current, joinKey);\n  }, [props.connRef, joinKey]);\n\n  return (\n    <div>\n      1. send this key to your friend: <code>{props.offer}</code>\n      <hr />\n      2. input their key:{\" \"}\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onAddPlayer() : 0)}\n        placeholder=\"(paste key here)\"\n      ></input>\n      <button onClick={onAddPlayer}>connect</button>\n    </div>\n  );\n}\n\nfunction Join1(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n\n  const onJoin = useCallback(() => {\n    p2p.join(props.connRef.current, joinKey, props.setMyAnswer);\n  }, [props.connRef, props.setMyAnswer, joinKey]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onJoin() : 0)}\n        placeholder=\"(paste key here)\"\n      ></input>\n      <button onClick={onJoin}>join game</button>\n    </div>\n  );\n}\n\nfunction Join2(props) {\n  return (\n    <div>\n      1. send this key to your friend: <code>{props.answer}</code>\n      <br />\n    </div>\n  );\n}\n\nfunction Welcome(props) {\n  console.log(props.connRef);\n  return (\n    <div>\n      <Create1 connRef={props.connRef} setMyOffer={props.setMyOffer} />\n      <br />\n      <Join1 connRef={props.connRef} setMyAnswer={props.setMyAnswer} />\n      <br />\n      <a href=\"https://github.com/arvid220u/zkcards\">github</a>\n    </div>\n  );\n}\n\nfunction Lobby(props) {\n  const [numConn, setNumConn] = useState(0);\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(props.connRef.current, (m) =>\n      setNumConn(p2p.numConnections(props.connRef.current))\n    );\n    return () => {\n      p2p.removeMessageHandler(props.connRef.current, indx);\n    };\n  }, [props.connRef]);\n\n  return (\n    <div>\n      {props.offer ? (\n        <Create2 connRef={props.connRef} offer={props.offer} />\n      ) : (\n        <Join2 connRef={props.connRef} answer={props.answer} />\n      )}\n      <hr />\n      <button onClick={props.startGame} disabled={numConn === 0}>\n        start game!\n      </button>\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n\nfunction Setup(props) {\n  const [myOffer, setMyOffer] = useState(null);\n  const [myAnswer, setMyAnswer] = useState(null);\n\n  if (myOffer || myAnswer) {\n    return (\n      <Lobby\n        connRef={props.connRef}\n        offer={myOffer}\n        answer={myAnswer}\n        startGame={props.startGame}\n      />\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <Welcome\n          connRef={props.connRef}\n          setMyOffer={setMyOffer}\n          setMyAnswer={setMyAnswer}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction App() {\n  const [inSetup, setInSetup] = useState(true);\n  const connRef = useRef();\n  const gameRef = useRef();\n\n  const startGame = useCallback(() => {\n    setInSetup(false);\n    logic.sendReady(gameRef.current);\n  }, [gameRef]);\n\n  useEffect(() => {\n    connRef.current = p2p.createConn();\n    gameRef.current = logic.createGame(connRef.current);\n  }, []);\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(connRef.current, (m) =>\n      logic.receive(gameRef.current, m)\n    );\n    return () => {\n      p2p.removeMessageHandler(connRef.current, indx);\n    };\n  }, [connRef, gameRef]);\n\n  return (\n    <div className=\"App\">\n      <h1>zkmao</h1>\n      {inSetup && <Setup connRef={connRef} startGame={startGame} />}\n      {!inSetup && <Game connRef={connRef} gameRef={gameRef} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}