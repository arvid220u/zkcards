{"version":3,"sources":["p2p.js","utils.js","cards.js","assert.js","logic.js","Chat.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["RTC_CONFIG","iceServers","urls","onOpen","conn","console","log","messageHandlers","data","type","value","indx","onMessage","e","JSON","parse","addMessageHandler","handler","messageHandlersIndx","parseInt","removeMessageHandler","key","send","json","dc","stringify","encodeKey","btoa","replace","decodeKey","str","length","slice","atob","shuffle","array","rng","temporaryValue","randomIndex","currentIndex","Math","floor","RANKS","Object","values","ACE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","TEN","JACK","QUEEN","KING","SUITS","SPADES","CLUBS","DIAMONDS","HEARTS","shuffledDeck","utils","deck","rank","suit","push","orderedDeck","assert","condition","error_m","error","PHASE","SETUP","PLAY","GAMEOVER","ABORT","SETUP_STATE","PRE_READY","SENT_READY","SENT_START","METHOD","READY","START","PLAYACK","METHODS","METHOD_HANDLER","game","m","phase","abort","state","user","from","hash","players","includes","readyHashes","maybeSendStart","update","unimplemented","listeners","listener","userId","a","randomNumber","keys","startNumbers","randomNumberHash","maybeStartGame","reason","method","message","encoder","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","Uint8Array","hashHex","map","b","toString","padStart","join","myRandom","random","hash_r","finalRandomNumber","forEach","seedrandom","sort","nextTurn","playedCards","playerHands","users","cards","index","startGame","sendStart","Chat","props","useState","chatMessage","setChatMessage","messages","setMessages","onSendMessage","connRef","current","newMessage","oldm","useEffect","p2p","onChange","target","onKeyUp","onClick","style","whiteSpace","Setup","Play","Game","gameRef","setPhase","updateGameState","useCallback","listenerIndex","logic","Create1","setOffer","setMyOffer","pc","signalingState","createDataChannel","onopen","onmessage","createOffer","then","d","setLocalDescription","catch","onicecandidate","candidate","localDescription","Create2","joinKey","setJoinKey","offer","answerDesc","RTCSessionDescription","setRemoteDescription","Join1","setAnswer","offerDesc","createAnswer","setMyAnswer","Join2","answer","Welcome","Lobby","myOffer","myAnswer","Fragment","methods","handlers","App","inSetup","setInSetup","useRef","RTCPeerConnection","ondatachannel","channel","oniceconnectionstatechange","iceConnectionState","substr","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eba0c894.chunk.js","sourcesContent":["const RTC_CONFIG = {\n  iceServers: [\n    { urls: [\"stun:stun.l.google.com:19302\", \"stun:stun2.l.google.com:19302\"] },\n  ],\n};\n\nexport function createConn() {\n  let conn = {\n    pc: new RTCPeerConnection(RTC_CONFIG),\n    dc: null,\n    messageHandlers: {},\n    messageHandlersIndx: \"0\",\n  };\n  conn.pc.ondatachannel = (e) => {\n    conn.dc = e.channel;\n    conn.dc.onopen = () => onOpen(conn);\n    conn.dc.onmessage = (e) => onMessage(conn, e);\n  };\n  conn.pc.oniceconnectionstatechange = (e) =>\n    console.log(conn.pc.iceConnectionState);\n  return conn;\n}\n\nfunction onOpen(conn) {\n  console.log(\"opened chat!!\");\n  console.log(conn.messageHandlers);\n  const data = { type: \"info\", value: \"successfully opened connection!!\" };\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nfunction onMessage(conn, e) {\n  console.log(\"received message!\");\n  console.log(conn.messageHandlers);\n  let data = JSON.parse(e.data);\n  console.log(data);\n  for (const indx in conn.messageHandlers) {\n    conn.messageHandlers[indx](data);\n  }\n}\nexport function addMessageHandler(conn, handler) {\n  const indx = conn.messageHandlersIndx;\n  conn.messageHandlers[indx] = handler;\n  conn.messageHandlersIndx = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeMessageHandler(conn, key) {\n  console.log(`removing key ${key} from conn ${conn}`);\n  delete conn.messageHandlers[key];\n}\n\nexport function sendMessage(conn, message) {\n  send(conn, { type: \"message\", message: message });\n}\nexport function sendData(conn, data) {\n  send(conn, { type: \"data\", ...data });\n}\nexport function send(conn, json) {\n  conn.dc.send(JSON.stringify(json));\n}\n\nexport function createOffer(conn, setOffer) {\n  console.log(\"create offer\");\n  console.log(conn.pc.signalingState);\n  conn.dc = conn.pc.createDataChannel(\"chat\");\n\n  conn.dc.onopen = () => onOpen(conn);\n  conn.dc.onmessage = (e) => onMessage(conn, e);\n\n  conn.pc\n    .createOffer()\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setOffer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nfunction encodeKey(json) {\n  return btoa(json).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction decodeKey(key) {\n  let str = key;\n  if (str.length % 4 !== 0) {\n    str += \"===\".slice(0, 4 - (str.length % 4));\n  }\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return atob(str);\n}\n\nexport function join(conn, joinKey, setAnswer) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  let offerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n\n  conn.pc\n    .setRemoteDescription(offerDesc)\n    .then(() => conn.pc.createAnswer())\n    .then((d) => conn.pc.setLocalDescription(d))\n    .catch(console.log);\n\n  conn.pc.onicecandidate = (e) => {\n    if (e.candidate) return;\n    setAnswer(encodeKey(JSON.stringify(conn.pc.localDescription)));\n  };\n}\n\nexport function acceptAnswer(conn, joinKey) {\n  console.log(\"join\");\n  console.log(conn.pc.signalingState);\n  var answerDesc = new RTCSessionDescription(JSON.parse(decodeKey(joinKey)));\n  conn.pc.setRemoteDescription(answerDesc).catch(console.log);\n}\n\nexport function numConnections(conn) {\n  // TODO: update this for many players\n  return 1;\n}\n","export function shuffle(array, rng) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rng() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import * as utils from \"./utils.js\";\n\nexport const RANK = {\n  ACE: \"A\",\n  TWO: \"2\",\n  THREE: \"3\",\n  FOUR: \"4\",\n  FIVE: \"5\",\n  SIX: \"6\",\n  SEVEN: \"7\",\n  EIGHT: \"8\",\n  NINE: \"9\",\n  TEN: \"10\",\n  JACK: \"J\",\n  QUEEN: \"Q\",\n  KING: \"K\",\n};\nexport const RANKS = Object.values(RANK);\nexport const SUIT = {\n  SPADES: \"spades\",\n  CLUBS: \"clubs\",\n  DIAMONDS: \"diamonds\",\n  HEARTS: \"hearts\",\n};\nexport const SUITS = Object.values(SUIT);\n\n//      card is represented by {rank:, suit:} (why no types :(((()))))\n\nexport function orderedDeck() {\n  let deck = [];\n  for (const rank of RANKS) {\n    for (const suit of SUITS) {\n      deck.push({ rank, suit });\n    }\n  }\n  return deck;\n}\n\nexport function shuffledDeck(rng) {\n  let deck = orderedDeck();\n  return utils.shuffle(deck, rng);\n}\n\n// users: list of IDs for each user who wants a card\n// return: an object {user_id -> array of cards}, as even as possible, union is all cards, disjoint\nexport function dealShuffledCards(users, rng) {\n  let deck = shuffledDeck(rng);\n  let cards = {};\n  let index = 0;\n  for (const user of users) {\n    cards[user] = [];\n  }\n  while (index < deck.length) {\n    for (const user of users) {\n      cards[user].push(deck[index]);\n      index++;\n    }\n  }\n  return cards;\n}\n","export default function assert(condition, error_m) {\n  if (condition) return;\n  console.error(\"assertion failed\");\n  console.error(error_m);\n}\n","// logic.js is intended to hold all game logic\n\nimport seedrandom from \"seedrandom\";\n\nimport * as p2p from \"./p2p.js\";\nimport * as utils from \"./utils.js\";\nimport * as cards from \"./cards.js\";\n\nimport assert from \"./assert.js\";\n\n// what's the game state?\n// there's a public part and a private part\n// the public part needs to be agreed upon among all players\n// the private part is\n//\n// PUBLIC:\n// for version 1:\n// 1: the middle deck, which has order\n// 2: each player's hand, which does not have order\n//      invariant: all disjoint, union is all cards\n//\n// for version 2:\n// 3: all the rule hashes\n// 4:\n//\n// PRIVATE:\n// for version 2:\n// 1: your own rules (which is in the form of uhhhh)\n//\n//\n//\n// TODO: later version: add signatures to actually be secure\n\n// WIRE PROTOCOL:\n// always assume broadcast messages!!!!!!\n// 1. setup:\n//  1.1 everyone: READY hashOfRandomNumber userID (number is a 64-bit integers, user id is randomly generated (later should be public key))\n//  1.2 when everyone you have open connections with say READY: START randomNumber  (userID is sent with every message)\n//  1.3 when received all STARTs: verifies all hashes, xors all numbers, seed rng with this, then just pick cards\n//  1.4 using same seed just choose order\n// 2. play:\n//  2.1 someone: PLAY card userID publicGameStateAfter\n//  2.2 everyone else: PLAYACK card fromUser userID publicGameStateAfter\n// 3. abort:\n//  3.1 send ABORT userID to every user, be sad\n\n// ok dont overthink it\n// i think having a hierarchical state thing makes sense\n// this is javascript not rust\n\n// ok so we have:\n// phase = {\"setup\", \"play\", \"gameover\", \"abort\"}\n// each phase has some metadata, which can be public or private\n// the public metadata is always sent over for debugging purposes\n\n// transitions\n// setup:\n//      state = {\"preReady\",\"sentReady\",\"sentStart\"},\n//      players, readyHashes, startNumbers, myRandom\n//\n// play:\n//      nextTurn = user_id\n//      public: players (order matters), playedCards (0 bottom, n-1 top), playerHands (id -> array)\n//          invariant: union is good, disjoint\n//\n// gameover: (transitions directly to setup.sentReady)\n//      winner = user_id\n//\n// abort:\n//      (no data)\n\nexport const PHASE = {\n  SETUP: \"SETUP\",\n  PLAY: \"PLAY\",\n  GAMEOVER: \"GAMEOVER\",\n  ABORT: \"ABORT\",\n};\nconst PHASES = Object.values(PHASE);\nconst SETUP_STATE = {\n  PRE_READY: \"PRE_READY\",\n  SENT_READY: \"SENT_READY\",\n  SENT_START: \"SENT_START\",\n};\nconst SETUP_STATES = Object.values(SETUP_STATE);\n\nconst METHOD = {\n  READY: \"READY\",\n  START: \"START\",\n  PLAY: \"PLAY\",\n  PLAYACK: \"PLAYACK\",\n  ABORT: \"ABORT\",\n};\nconst METHODS = Object.values(METHOD);\nconst METHOD_HANDLER = {\n  [METHOD.READY]: handleReadyMethod,\n  [METHOD.START]: handleStartMethod,\n  [METHOD.PLAY]: handlePlayMethod,\n  [METHOD.PLAYACK]: handlePlayAckMethod,\n  [METHOD.ABORT]: handleAbortMethod,\n};\nassert(\n  JSON.stringify(METHODS) === JSON.stringify(Object.keys(METHOD_HANDLER)),\n  {\n    methods: METHODS,\n    handlers: METHOD_HANDLER,\n  }\n);\n\nexport function createGame(conn) {\n  // TODO: generate private/public keypair here and let userId be the public key\n  const userId = Math.random().toString(36).substr(2, 9);\n  const game = {\n    conn,\n    listeners: {},\n    listenerIndex: \"0\",\n    phase: PHASE.SETUP,\n    userId: userId,\n    state: SETUP_STATE.PRE_READY,\n    players: [userId],\n    readyHashes: {},\n    startNumbers: {},\n    myRandom: null,\n  };\n  return game;\n}\nexport function addListener(game, listener) {\n  const indx = game.listenerIndex;\n  game.listeners[indx] = listener;\n  game.listenerIndex = `${parseInt(indx) + 1}`;\n  return indx;\n}\nexport function removeListener(game, key) {\n  console.log(`removing key ${key} from game ${game}`);\n  delete game.listener[key];\n}\n// this function needs to be called every time the game state is updated!!!!!!!!\nfunction update(game) {\n  for (let listener of Object.values(game.listeners)) {\n    listener();\n  }\n}\n\n// m should be on form {data: , method: , ...}\nexport function receive(game, m) {\n  console.log(\"game receiving message!\");\n  console.log(m);\n  if (m.type !== \"data\") {\n    console.log(\"ignoring non-data message\");\n    return;\n  }\n  assert(METHODS.includes(m.method));\n  console.log(METHOD_HANDLER);\n  METHOD_HANDLER[m.method](game, m);\n}\nfunction send(game, m) {\n  // TODO: sign the message\n  m[\"from\"] = game.userId;\n  p2p.sendData(game.conn, m);\n}\n\nfunction unimplemented() {\n  assert(false, \"not implemented yet!!\");\n}\n\nfunction handleReadyMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) abort(game);\n  // should not have sent start already\n  if (\n    !(\n      game.state === SETUP_STATE.PRE_READY ||\n      game.state === SETUP_STATE.SENT_READY\n    )\n  ) {\n    abort(game);\n  }\n\n  const user = m.from;\n  const hash = m.hash;\n\n  // shouldn't receive twice; should have different IDs\n  if (game.players.includes(user)) abort(game);\n\n  game.players.push(user);\n  game.readyHashes[user] = hash;\n\n  // if we have received all, send start\n  maybeSendStart(game);\n\n  update(game);\n}\nasync function handleStartMethod(game, m) {\n  // should be in setup phase\n  if (game.phase !== PHASE.SETUP) abort(game, \"wrong phase\");\n  // should have sent ready (not necessarily should have sent start though)\n  if (\n    !(\n      game.state === SETUP_STATE.SENT_READY ||\n      game.state === SETUP_STATE.SENT_START\n    )\n  ) {\n    abort(game);\n  }\n\n  const user = m.from;\n  const randomNumber = m.randomNumber;\n\n  // shouldn't receive twice\n  if (Object.keys(game.startNumbers).includes(user)) abort(game);\n\n  // should receive from verified user\n  if (!game.players.includes(user)) abort(game, `unknown user ${user}`);\n\n  // assert that the hash is ok\n  const randomNumberHash = await hash(`${randomNumber}`);\n  if (game.readyHashes[user] !== randomNumberHash)\n    abort(\n      game,\n      `incorrect hash ${randomNumberHash} received for random number ${randomNumber} from user ${user}`\n    );\n\n  // add to numbers\n  game.startNumbers[user] = randomNumber;\n\n  // if we have received all, go to the game!!\n  maybeStartGame(game);\n\n  update(game);\n}\nfunction handlePlayMethod(game, m) {\n  unimplemented();\n\n  update(game);\n}\nfunction handlePlayAckMethod(game, m) {\n  unimplemented();\n\n  update(game);\n}\nfunction handleAbortMethod(game, m) {\n  console.log(\"ABORTING :(((( SAD\");\n  unimplemented();\n\n  update(game);\n}\n\nfunction abort(game, reason) {\n  console.error(\"ABORT GAME :((\");\n  console.error(reason);\n  send(game, { method: METHOD.ABORT, reason });\n  game.phase = PHASE.ABORT;\n\n  update(game);\n}\n\nasync function hash(message) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\"); // convert bytes to hex string\n  return hashHex;\n}\n\nexport async function sendReady(game) {\n  assert(\n    (game.phase === PHASE.SETUP && game.state === SETUP_STATE.PRE_READY) ||\n      game.phase === PHASE.GAMEOVER,\n    game\n  );\n  // generate a random number\n  game.myRandom = Math.floor(Math.random() * 2 ** 64);\n  // hash the random number\n  const hash_r = await hash(`${game.myRandom}`);\n  console.log(hash_r);\n  game.readyHashes[game.userId] = hash_r;\n  send(game, { method: METHOD.READY, hash: hash_r });\n  game.state = SETUP_STATE.SENT_READY;\n  maybeSendStart(game);\n\n  update(game);\n}\n\nfunction maybeStartGame(game) {\n  if (game.players.length === Object.keys(game.startNumbers).length) {\n    startGame(game);\n  }\n}\nfunction startGame(game) {\n  assert(\n    game.phase === PHASE.SETUP && game.state === SETUP_STATE.SENT_START,\n    game\n  );\n\n  // xor all the random numbers (which means that as long as at least 1 person honest, it is random)\n  let finalRandomNumber = 0;\n  Object.values(game.startNumbers).forEach((randomNumber) => {\n    finalRandomNumber ^= randomNumber;\n  });\n\n  console.log(`final randomness: ${finalRandomNumber}`);\n  // use this random number as the seed of an rng\n  let rng = seedrandom(`${finalRandomNumber}`);\n\n  // now we can transition to the game phase\n  // delete the old game object properties\n  delete game.state;\n  delete game.readyHashes;\n  delete game.startNumbers;\n  delete game.myRandom;\n\n  // shuffle the player list\n  // note: we need to sort it first before we do it so everyone gets the same list\n  game.players = utils.shuffle(game.players.sort(), rng);\n\n  game.nextTurn = game.players[0];\n\n  game.playedCards = []; // start empty\n\n  // now deal cards\n  game.playerHands = cards.dealShuffledCards(\n    utils.shuffle(game.players, rng),\n    rng\n  );\n\n  // now we're done :))))))\n  game.phase = PHASE.PLAY;\n\n  console.log(\"STARTING GAME!!!! exciting :)))\");\n  console.log(game);\n\n  update(game);\n}\n\nfunction maybeSendStart(game) {\n  if (\n    p2p.numConnections(game.conn) ===\n    Object.keys(game.readyHashes).length - 1\n  ) {\n    assert(game.players.length === Object.keys(game.readyHashes).length, game);\n    sendStart(game);\n  }\n}\nfunction sendStart(game) {\n  assert(\n    game.phase === PHASE.SETUP && game.state === SETUP_STATE.SENT_READY,\n    game\n  );\n\n  send(game, { method: METHOD.START, randomNumber: game.myRandom });\n\n  game.startNumbers[game.userId] = game.myRandom;\n  game.state = SETUP_STATE.SENT_START;\n\n  maybeStartGame(game);\n\n  update(game);\n}\n","import React from \"react\";\nimport { useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\n\nexport function Chat(props) {\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  function onSendMessage() {\n    p2p.sendMessage(props.connRef.current, chatMessage);\n    newMessage(chatMessage);\n    setChatMessage(\"\");\n  }\n\n  function newMessage(m) {\n    setMessages((oldm) => {\n      if (oldm === \"\") return m;\n      return m + \"\\n\" + oldm;\n    });\n  }\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(props.connRef.current, (m) => {\n      if (m.type === \"message\") return newMessage(m.message);\n      newMessage(JSON.stringify(m));\n    });\n    return () => {\n      console.log(`cleaning up chat!!! index ${indx}`);\n      p2p.removeMessageHandler(props.connRef.current, indx);\n    };\n  }, [props.connRef]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={chatMessage}\n        onChange={(e) => setChatMessage(e.target.value)}\n        onKeyUp={(e) => (e.key === \"Enter\" ? onSendMessage() : 0)}\n      ></input>\n      <button onClick={onSendMessage}>Send message</button>\n      <p style={{ whiteSpace: \"pre-line\" }}>{messages}</p>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\n\nimport { Chat } from \"./Chat.js\";\n\nfunction Setup() {\n  return <div>Waiting for everyone else to press start...</div>;\n}\n\nfunction Play() {\n  return <div>Playing the game!!!</div>;\n}\n\nexport function Game(props) {\n  const [phase, setPhase] = useState(props.gameRef.current.phase);\n\n  const updateGameState = useCallback(() => {\n    setPhase(props.gameRef.current.phase);\n  }, [props.gameRef]);\n\n  useEffect(() => {\n    const indx = logic.addListener(props.gameRef.current, updateGameState);\n    return () => {\n      logic.removeListener(props.gameRef.current, indx);\n    };\n  }, [props.gameRef]);\n\n  return (\n    <div>\n      welcome to the game good sir!\n      <hr />\n      {phase === logic.PHASE.SETUP && <Setup />}\n      {phase === logic.PHASE.PLAY && <Play gameRef={props.gameRef} />}\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport { useCallback, useRef, useEffect, useState } from \"react\";\nimport * as p2p from \"./p2p.js\";\nimport * as logic from \"./logic.js\";\n\nimport { Game } from \"./Game.js\";\nimport { Chat } from \"./Chat.js\";\n\nfunction Create1(props) {\n  return (\n    <div>\n      <button\n        onClick={() => p2p.createOffer(props.connRef.current, props.setMyOffer)}\n      >\n        Create game\n      </button>\n    </div>\n  );\n}\n\nfunction Create2(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      send this message to your friends: <code>{props.offer}</code>\n      <br />\n      input their answer:\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button onClick={() => p2p.acceptAnswer(props.connRef.current, joinKey)}>\n        Add player\n      </button>\n    </div>\n  );\n}\n\nfunction Join1(props) {\n  const [joinKey, setJoinKey] = useState(\"\");\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={joinKey}\n        onChange={(e) => setJoinKey(e.target.value)}\n      ></input>\n      <button\n        onClick={() =>\n          p2p.join(props.connRef.current, joinKey, props.setMyAnswer)\n        }\n      >\n        Join\n      </button>\n    </div>\n  );\n}\n\nfunction Join2(props) {\n  return (\n    <div>\n      send this message to your friends: <code>{props.answer}</code>\n      <br />\n    </div>\n  );\n}\n\nfunction Welcome(props) {\n  console.log(props.connRef);\n  return (\n    <div>\n      <Create1 connRef={props.connRef} setMyOffer={props.setMyOffer} />\n      <br />\n      <Join1 connRef={props.connRef} setMyAnswer={props.setMyAnswer} />\n      <br />\n    </div>\n  );\n}\n\nfunction Lobby(props) {\n  return (\n    <div>\n      {props.offer ? (\n        <Create2 connRef={props.connRef} offer={props.offer} />\n      ) : (\n        <Join2 connRef={props.connRef} answer={props.answer} />\n      )}\n      <hr />\n      Participants list: idk\n      <br />\n      <hr />\n      <button onClick={props.startGame}>Start game!</button>\n      <hr />\n      <Chat connRef={props.connRef} />\n    </div>\n  );\n}\n\nfunction Setup(props) {\n  const [myOffer, setMyOffer] = useState(null);\n  const [myAnswer, setMyAnswer] = useState(null);\n\n  if (myOffer || myAnswer) {\n    return (\n      <Lobby\n        connRef={props.connRef}\n        offer={myOffer}\n        answer={myAnswer}\n        startGame={props.startGame}\n      />\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <Welcome\n          connRef={props.connRef}\n          setMyOffer={setMyOffer}\n          setMyAnswer={setMyAnswer}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction App() {\n  const [inSetup, setInSetup] = useState(true);\n  const connRef = useRef();\n  const gameRef = useRef();\n\n  const startGame = useCallback(() => {\n    setInSetup(false);\n    logic.sendReady(gameRef.current);\n  }, [gameRef]);\n\n  useEffect(() => {\n    connRef.current = p2p.createConn();\n    gameRef.current = logic.createGame(connRef.current);\n  }, []);\n\n  useEffect(() => {\n    const indx = p2p.addMessageHandler(connRef.current, (m) =>\n      logic.receive(gameRef.current, m)\n    );\n    return () => {\n      p2p.removeMessageHandler(connRef.current, indx);\n    };\n  }, [connRef, gameRef]);\n\n  return (\n    <div className=\"App\">\n      {inSetup && <Setup connRef={connRef} startGame={startGame} />}\n      {!inSetup && <Game connRef={connRef} gameRef={gameRef} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}